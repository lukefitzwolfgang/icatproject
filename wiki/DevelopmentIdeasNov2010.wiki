==ICAT Development Ideas==

Version 1.0 - TG - Uploaded 08/11/2010
Version 1.1 - TG - 09/11/2010

==About this wiki page==
The this document) is simply intended as a collection of brain-dumps to stimulate discussion between the facilities using and developing ICAT and our next project VC, on the 18th November 2010 at 13:00 GMT.
Please try to include What and Why to explain what the idea/problem is and why it should be addressed. Who and When are very much optional to aid discussion, and are in no way intended as a concrete plan.


==ICAT Core==

===Code documentation===

What: Review, update and expose the documentation. There is quite a bit scattered about – in the svn, wiki and on desktops. This needs to be reviewed, extended or updated where necessary.

Why: Easier for new developers (and old developers!) to understand code. Better maintainability

Who: All. One person to co-ordinate. Reviews should include at least one ‘expert’ and one person new-ish to ICAT.

When: Start now. Should be an ongoing tasks, with person acting as the owner.

===Installation package===

What: Remove ISIS/DLS flavours. Currently the installation package refers to the facility as either ISIS or DLS/Diamond. Things needs to be removed and replaced with a more generic name.

The key point to remember is that the install package is designed to give people a taste of ICAT, so must be simple and generic. Could also investigate whether an internal/memory database could be used rather than an oracle installation (see Database independence issue below)

Another idea is to create a virtual appliance (virtual machine instance) which has everything installed and ready to go. Would need to be careful with redistribution of Oracle etc!

Why: Increases ease of trialling ICAT at new institutions. Better adoption

Who: ?

When: ?

===Installation Documentation===

What: The current ICAT installation documentation is getting out of date, is not easy to follow (users regularly contact me with problems installing, which have arisen simple because the documentation is hard to follow). The documentation needs cleaning up. Thought should be given to whether it would be best to provide two separate documentation sets : 1) A very simple ‘try-CAT’ installation with minimum effort (perhaps a memory database) for simply trying it and 2) Steps for a real installation, including connection settings etc.

Why: Increases ease of trialling ICAT at new institutions. Better adoption

When: ?

Who: ?

===Authorisation/Permissions Model===

What: The current authorisation models uses basic roles to assign permissions to users on an investigation by investigation or dataset by dataset basis. This works well for facility users, but fails for facility staff, such as instrument scientists. Ideally instrument scientists should gain permissions directly be being recorded as the instrument scientist for an instrument, using some form of instant lookup, not by database triggers to create authorisation records. Currently not possible to identify if a staff members permission record is because they are the instrument scientist or if they were on the proposal as a Co-I.

Why: Increase performance. Easier maintenance of the database – easier to change facility staff – don’t need to update 1 million records every time staff change instruments.

Who:?

When:?

===XMLIngest===

What: XMLIngest was written for ISIS and as such has some ISIS specific code, such as calibration RB numbers, hard coded inside it. It is also poorly documented and temperamental. Ideally it should be able to cope with certain failure modes (i.e. if one file fails to ingest properly, it should report this, but not fail the whole set of files).  The code needs to be refactored or entirely rewritten.
Why: Current code is ISIS specific with undocumented rules that cause problems at other facilities. Current ACID nature means some facilities do not use it to ingest blocks of files, causing performance issues.

Who: ?

When: ?

===Database independence===

What: The current ICAT code and installation only works (or at least has only been tested on Oracle. Oracle licences are expensive, so it is desirable to verify ICAT on at least one open-source RDBMS.

Why: Cost of Oracle license. Better adoption. Principals (?)

When: Ongoing

Who: Database services

===User authentication===

What: The icat3-user-default authentication plug-in in use at ISIS and DLS is reliant on myproxy. There is no good reason for this dependency and a direct connection to LDAP/AD would be simpler and more reliable.

Why: Code maintainability. Less STFC specific (easier to use with sites LDAP services)

Who: ?

Why: ?

===Reporting===

What: Two use case: 1) “Who downloaded my data?” when we allow derived data to be uploaded users have said they would like reports on who has accessed this data (concerns over citation). 2) Facility management would like reports on how many people are downloading data. JFP has suggestions relating to data mining, so building a reporting database and connecting to something like BIRT may be worth considering.

Why: Meet the uses cases above. Enhanced value (potential use in impact assessments – “10,000 people access our data”)

Who: ?

When: ?

===Extra methods===

What: In order to meet requirements for TopCAT some extra methods are required: 
1) GetCyclesForInstrumentWithData(sessionId, Instrument)  
2) GetCyclesForInstrumentWithMyData(sessionId, Instrument)
3) GetInstrumentsWithMyData(sessionId)

Why: provide functionality for TopCAT

When: This is needed urgently for TopCAT so has already been added as tickets and work started

Who: by ISIS(Tom)

==TopCAT ==

Ability to manage permissions on ‘my’ data

Ability to upload derived data

Interface tweaks as discussed

DOI landing page