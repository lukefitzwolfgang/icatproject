#summary Apache front end for Glassfish 4

*Contents*

<wiki:toc max_depth="3" />


= Apache Icat Front End =

This is what I did on icat.default.stfc.uk0.bigv.io.  I repeated it on tng-1.default.stfc.uk0.bigv.io and it worked.

Note that you MUST have Glassfish 4 to get this to work.  Glassfish 4 also requires Java 1.7 jdk.  The operating system was Centos 6.  On other systems, the files may be in different places and have different names.  Eg httpd becomes apache2 on ubuntu.

These notes are good enough for me, but they do not explain things.  They are a personal aide-memoire.  They  may omit details.  For example, it does not tell you where you get mod_ssl.so.  Answer, get the source and compile it for yourself!  Alternatively there is a copy in the SVN for Pandata.   You copy it to the file /etc/httpd/modules/mod_jk.so.

== Configure the Apache ==

The following parts are done as root.

=== Preparation ===

{{{
yum install wireshark
yum install wireshark-gnome
yum install mod_ssl
yum install dejavu-sans-fonts
yum install dejavu-serif-fonts
yum install java-1.7.0-openjdk
yum install java-1.7.0-openjdk-devel
}}}

I found that if you do not add the fonts, the display is unreadable.

=== Create a directory for jk ===
{{{
mkdir /etc/httpd/jk
}}}

=== Route icat traffic to the worker ===

Add the following line to the bottom of the file: /etc/httpd/conf.d/ssl.conf 

Add it just before the line </VirtualHost>

{{{
JkMount /* worker1
}}}

At ESRF use:

{{{
JkMount /icat worker1
}}}

=== Configure jk ===

Create the following file: /etc/httpd/conf.d/jk.conf
{{{
JkWorkersFile /etc/httpd/jk/workers.properties 
JkLogFile /var/log/httpd/mod_jk.log 
JkLogLevel info 
JkLogStampFormat "[%a %b %d %H:%M:%S %Y] "
JkOptions +ForwardKeySize +ForwardURICompat -ForwardDirectories 
JkRequestLogFormat "%w %V %T"
JkShmFile /etc/httpd/jk/jk.shm
}}}

=== Configure the worker ===

Create the following file: /etc/httpd/jk/workers.properties
{{{
worker.list=worker1
worker.worker1.type=ajp13
worker.worker1.host=localhost
worker.worker1.port=8009
}}}

=== Add mod-jk to Apache ===

Edit the following file: /etc/httpd/conf/httpd.conf 

Add the following line around line 200 with all of the other LoadModule statements.

{{{
LoadModule jk_module modules/mod_jk.so
}}}

=== Configure the firewall ===

Make sure that the iptables allows traffic on 443, 8009 and 8181.  

Add the following to /etc/sysconfig/iptables:

{{{
-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT 
-A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT 
-A INPUT -p tcp -m state --state NEW -m tcp --dport 8009 -j ACCEPT 
-A INPUT -p tcp -m state --state NEW -m tcp --dport 8181 -j ACCEPT
}}}

then restart iptables:

{{{
/etc/init.d/iptables restart
}}}

=== Add a copy of mod_jk.so the Apache ===

Put a copy of mod_jk.so in the following directory:/etc/httpd/modules

=== Restart the apache ===
{{{
/etc/init.d/httpd restart
}}}

=== Use wireshark to see what is happening ===

You do not need to use Wireshark, but it is very useful to see what is going on.  If you have never used wireshark, it seems difficult at first, but it is worth the effort.

Start wireshark with the following filter: 
{{{
tcp.port == 8009 || tcp.port == 8181 || tpc.port == 443 
}}}

== Configure the Glassfish ==

The following parts are done as the glassfish user, conventionally glassfish3, even though it has to run glassfish4.

=== Install Glassfish4 ===

As the glassfish user, install glassfish4 and get the ICAT working on https://localhost:8181/ICAT/ICATService?wsdl. 

=== Configure the icat.ear file ===

Only configure icat.ear at ESRF.  Do not do it elsewhere!

The standard ear file is not suitable as it deploys to:

https://hostname:8181/ICATService/ICAT?wsdl.

For example, at ESRF we could use: 

https://wwws.esrf.fr/ICATService/ICAT?wsdl

But we use:

https://wwws.esrf.fr/icat/ICATService/ICAT?wsdl

The configuration file for the end point is hidden in the icat .ear file. It is necessary to unzip/unjar the main .ear file and then unzip/unjar the icat.exposed-4.x.x.jar file, which contains file META-INF/sun-ejb-jar.xml.  In this file, the last line:

{{{
<endpoint-address-uri>ICATService/ICAT</endpoint-address-uri>
}}}

has to be modified to add “icat/”

{{{
<endpoint-address-uri>icat/ICATService/ICAT</endpoint-address-uri>
}}}

The following command-line commands are suitable:
{{{
mkdir tmp_icat.ear
cd  tmp_icat.ear
jar xvf ../icat.ear-4.2.5.ear
mkdir tmp_expose
cd  tmp_expose
jar xvf ../icat.exposed-4.2.5.jar
vi  META-INF/sun-ejb-jar.xml
}}}

To re-create jar/ear and remove the tmp files, use:
{{{
jar cvf  ../icat.exposed-4.2.5.jar .
cd ..
rm -rf tmp_expose
jar cvf  ../icat.ear-4.2.5-icat.ear .
rm -rf tmp_icat.ear
}}}

Undeploy and deploy...

{{{
asadmin undeploy icat.ear-4.2.5
asadmin deploy icat.ear-4.2.5-icat.ear
}}}


Ensure that the tests from one of the service verifications run correctly before proceeding!

=== Configure Glassfish to listen to ajp ===

Tell the Glassfish server to pick up content from ajp on port 8009 and restart the Glassfish.

{{{
asadmin create-http-listener --listenerport 8009 --listeneraddress 0.0.0.0 --defaultvs server ajp 
asadmin set configs.config.server-config.network-config.network-listeners.network-listener.ajp.jk-enabled=true
asadmin restart-domain domain1
}}}

Note that in the above lines, the label "ajp" can be almost anything, but it must be the same in both lines.

== Run the tests with the new endpoint ==

Run the tests again this time with:

{{{
https://localhost/icat/ICAT/ICATService.wsdl
}}}

At ESRF use:

{{{
https://localhost/icat/ICAT/ICATService.wsdl
}}}

To get the tests to work, you have to use  trust.sh in test425 to handle the certificate correctly.  

- the end -