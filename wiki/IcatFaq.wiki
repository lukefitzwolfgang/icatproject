#summary Frequently Asked Questions.
#labels Icat-Generic


== Questions : == 

Q01:  What are the main technologies used in ICAT?

Q01:  ICAT uses EJB as one of its principal technologies.  Why is this the case?  Why does it use EJB and not alternatives such as Spring?

Q02:  ICAT deployment uses Glassfish.  Why is this the case?  Can it use alternatives such as Web Logic?

Q03:  Does ICAT use JMS?  If so, what does it use it for?

Q04:  Has anyone ever used a clustered version of GF with ICAT?  If so, were there any lessons learned from this?

Q05:  Does ICAT contain any deprecated legacy code such as Entity Beans.  If so, do we have a list of deprecated features?

Q06:  Do we know of any significant "crunch" points in ICAT which limit its ability to scale for example.  If so, what are they?

Q07:  Is there a list of tools which can be used to monitor ICAT in production?  Are there preferred ways to monitor the performance of ICAT?

Q08:  Has any use been made of Aspect Oriented Programming in ICAT for such things as logging?

Q09:  Is there a document which describes the assembly of artefacts from ICAT such as the ear files and their deployment?

Q10:  There are a lot of constants in the source code for ICAT.  Are there any plans to collect them into a more manageable assembly such as property bundles? 

Q11:  Are there any mechanisms provided in ICAT to simplify the management of data which is outside of the database, for example in file systems?


== Answers : == 

*Q01: ICAT has leveraged heavily of a range of technologies, which include:*

    * Java Enterprise Edition 5 - EJB 3, JSF, JSP, JMS etc
    * Java Standard Edition 6
    * JAX-WS - Web Services
    * JAXB2 - Java to/from XML for the Web Services.
    * Java Cog Kit - Interaction with Grid and !MyProxy
    * !MyFaces / Tomahawk - WI JSF components
    * Ajax4jsf - JSF Ajax integration
    * netBeans 6.1
          * 6.0.1 Does not support Shared Libraries that is needed for development.
          * 6.1 may have a bug that show up during web services development. 



*Q02:  ICAT uses EJB as one of its principal technologies.  Why is this the case?  Why does it use EJB and not alternatives such as Spring?*
Can give lots of answers to this:
1)	ICAT 2 used EJB2, so ICAT3 was a logical upgrade to EJB3
2)	EJB3 is a ‘good fit’ for ICAT
3)	EJB3 is a defined Java standard. Spring is not. This increases portability (vendor independence – e.g. eclipselink/toplink)  
4)	Reasonable comparison here: http://tim.oreilly.com/pub/a/onjava/2005/06/29/spring-ejb3.html 

*Q03:  ICAT deployment uses Glassfish.  Why is this the case?  Can it use alternatives such as Web Logic?*
1)	Glassfish is open source, with the option of a supported version
2)	Use of standards (such as EJB) means pretty good portability, so should be relatively easy to use on a standards compliant application server. We have done this in ISIS moving our EJB3 proposal system from JBoss to Glassfish and encountred no problems other than library location differences (i.e. different install script required)
3)	Glassfish was/is the reference implementation for JEE5

*Q04:  Does ICAT use JMS?  If so, what does it use it for?*
1)	ICAT – no. DataPortal did.
2)	It should use it for ingest (in my opinion). A good one for discussion

*Q05:  Has anyone ever used a clustered version of GF with ICAT?  If so, were there any lessons learned from this?*
1)	Not to my knowledge.
2)	As we don’t use stateful session beans should not be a problem. Glassfish v 3 does not fully support clustering (yet – roadmap says it will in 3.1)

*Q06:  Does ICAT contain any deprecated legacy code such as Entity Beans.  If so, do we have a list of deprecated features?*
1)	All entities are POJOs (JPA) if that is the question (no EJB2.1 style)
2)	I don’t believe we use may deprecated features (yet!)  - ICAT3 was a rewrite of EJB2 to EJB3

*Q07:  Do we know of any significant "crunch" points in ICAT which limit its ability to scale for example.  If so, what are they?*
1)	Not well known. Never done any profiling. There is JMeter test code in the svn.
2)	Ingest is seen as an issue by Diamond for example.

*Q08:  Is there a list of tools which can be used to monitor ICAT in production?  Are there preferred ways to monitor the performance of ICAT?*
1)	No. Good area to investigate

*Q09:  Has any use been made of Aspect Oriented Programming in ICAT for such things as logging?*
1)	Not explicitly.

*Q10:  Is there a document which describes the assembly of artefacts from ICAT such as the ear files and their deployment?*
2)	Yes, to some extent, but could be improved: 
-	Setup of Netbeans is here http://code.google.com/p/icatproject/wiki/SetupICAT3 
-	and description of packages here: http://code.google.com/p/icatproject/wiki/IcatApi 

*Q11:  There are a lot of constants in the source code for ICAT.  Are there any plans to collect them into a more manageable assembly such as property bundles? *
1)	This is true, but a lot are these are JPQL fragments, which seems a reasonable use of constants to me.
2)	Some such as MAX_RESULTS could well be moved over to properties
3)	Some things do already use properties – for example icat3-download

*Q12:  Are there any mechanisms provided in ICAT to simplify the management of data which is outside of the database, for example in file systems?*
Where a piece of data in icat is actually the address of a file in a file system, rather than storing something like /this/that/documentation/FAQ.txt or better this/that/documentation/FAQ.txt, is there some facility in ICAT for dealing with this in a more elegant way.  

No.  ICAT is designed for metadata management, not file system management.