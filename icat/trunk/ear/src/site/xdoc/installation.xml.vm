<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>ICAT Server Installation</title>
    </properties>

    <body>

        <section name="Installation">

            <p>To deploy an ICAT you need:
            </p>
            <ol>
                <li> a suitable container to support EJBs,</li>
                <li> databases on a system supported by eclipselink,</li>
                <li> to configure glassfish,</li>
                <li> to install and configure suitable authentication plugins,</li>
                <li> to install a copy of icat.properties and log4j.properties in the correct place,</li>
                <li> to deploy the .ear file,</li>
                <li> and see if it works.</li>
            </ol>

            <subsection name="EJB Container">
                <p> In principle you can use any EJB container. Testing has been performed with
                    glassfish 3.1.2 and these notes refer to that version.
                </p>

                <p> You must already have a Java SE installed (i.e. the command "java" is known), then
                    you can get Java EE 6 SDK Update 4 with JDK
                    6
                    Update 31 or later from
                    http://www.oracle.com/technetwork/java/javaee/downloads/index.html and execute
                    the script.
                </p>

                <p> Request custom installation, install and configure, and enter proxy details if
                    necessary on your site. Request a server domain, set
                    the domain name and set the
                    admin password. For a secure deployment of glassfish you should obtain a trusted
                    certificate rather than
                    using the self-signed one in the distribution.
                </p>

            </subsection>


            <subsection name="Databases">
                <p>
                    <em>
                        The database schema is almost identical to that used for ICAT 4.1 (the only difference is that some text columns are wider) so
                        if you already have a 4.1 database installed there is no need to start with an empty schema.
                    </em>
                </p>
                <p>
                    The database system must be supported by eclipselink. This includes most
                    database systems you are likely to want as explained at
                    <a href="http://wiki.eclipse.org/EclipseLink/FAQ/JPA#What_databases_are_supported.3F">the
                        eclipselink web site.
                    </a>
                    It has been tested with: MySQL, Oracle and
                    Derby. You will need an
                    <em>empty</em>
                    schema/database with permissions for data
                    definition
                    operations such as "CREATE TABLE ..." You must place a copy of the
                    "JDBC
                    Connector" for your database in the lib directory below
                    the domain where
                    you will install icat. You should get the connector from
                    the database supplier.
                    In the case of Oracle this is
                    ojdbc14.jar or ojdbc16.jar and for MySQL it is
                    something like
                    mysql-connector-java*.jar. MySQL must be installed with InnoDB
                    support. Eclipselink, which is used by ICAT, will ensure that MySQL
                    tables make use of the InnoDB
                    engine. In the case of Derby the
                    connector comes
                    pre-installed with Glassfish
                    however we do not
                    expect
                    Derby to be used for production work.
                </p>
            </subsection>

            <subsection name="Preparing glassfish.props">

                <p>
                    Obtain
                    <a href="${repoUrl}/org/icatproject/icat.ear/${project.version}/icat.ear-${project.version}-config.zip">icat.ear-${project.version}-config.zip</a>
                    and unzip it. You must first edit glassfish.props to match your system.
                </p>
                <dl>
                    <dt>driver</dt>
                    <dd>is the name of the jdbc driver and must match the jar file for your database that you stored in the previous step.</dd>
                    <dt>icatProperties</dt>
                    <dd>identifies the icat database and how to connect to it.</dd>
                    <dt>glassfish</dt>
                    <dd>is the top level of the glassfish installation. It must contain "glassfish/domains", and will be referred to here as
                        GLASSFISH_HOME as if an environment variable had been set.
                    </dd>
                    <dt>port</dt>
                    <dd>is the administration port of the chosen glassfish domain which is typically 4848.</dd>
                </dl>

                <p>For a local oracle-xe installation the following values of driver, icatProperties should be good except for
                    the user and password
                    values:
                </p>
                <code>
                    driver=oracle.jdbc.pool.OracleDataSource
                    <br />
                    icatProperties=url="'"jdbc:oracle:thin:@//localhost:1521/XE"'":ImplicitCachingEnabled=true:MaxStatements=200:user=icat:password=secret
                    <br />
                </code>
                <p>
                    Note the
                    <tt>"'"</tt>
                    which is needed because the url contains colons which also separate individual properties.
                </p>
                <p>For MySQL:</p>
                <code>
                    driver=com.mysql.jdbc.jdbc2.optional.MysqlDataSource
                    <br />
                    icatProperties=user=icat:password=secret:databaseName=icat
                    <br />
                </code>
            </subsection>

            <subsection name="Using glassfish.props to configure Glassfish">
                <p>
                    Having prepared the glassfish.props file you should run the command:
                    <tt>asadmin login</tt>
                    to login as admin. This will prompt you for your glassfish admin password to avoid being prompted for it later. If you do not do
                    this the
                    next step will fail. You will find the asadmin executable in the bin directory below the directory you have identified in
                    glassfish.props as "glassfish" - i.e. $GLASSFISH_HOME/bin/asadmin. There is no logout command but you can delete
                    <tt>~/.asadminpass</tt>
                    if you wish
                    once you have run the
                    <tt>create.sh</tt>
                    script successfully. Now check that your domain is running with
                    <tt>asadmin list-domains</tt>
                    and try running
                    <tt>create.sh</tt>
                    . It expects to find glassfish.props in the current directory. Amongst other things the script will try to "ping" the database. If
                    you have problems, modify the glassfish.props, run
                    <tt>drop.sh</tt>
                    and then
                    <tt>create.sh</tt>
                    again.
                </p>

            </subsection>

            <subsection name="Install and configure authentication plugins">
                <p>
                    You should obtain appropriate authentication plugins - such as
                    <a href="/mvn/site/authn_db">authn_db</a>
                    or
                    <a href="/mvn/site/authn_ldap">authn_ldap</a>
                    or you may wish to build your own following the instructions for
                    <a href="../icat.authentication/authentication.html">Authentication plugins</a>
                    .
                    Each plugin has its own configuration mechanism. Make sure that all plugins are are listed in the icat.properties file which is
                    described in the next section. If you install or modify a plugin after the icat ear file then you will need to reload the icat
                    application.
                </p>
            </subsection>

            <subsection name="icat.properties and log4j.properties">
                <p>
                    In the unpacked icat.ear-${project.version}-config.zip file you will find two properties files which should both be copied to the
                    config directory for your chosen glassfish domain. You will find your domain directory at $GLASSFISH_HOME/glassfish/domains. The
                    log4j.properties file should not need modification initially. It will result in an icat.log file being written to the logs
                    directory below your domain. The icat.properties file will probably need changing:

                </p>
                <dl>
                    <dt>lifetimeMinutes</dt>
                    <dd>Defines the lifetime of an ICAT sessionid. You should avoid making it have a long duration as this increases the risk if it
                        is
                        intercepted, lost or stolen.
                    </dd>

                    <dt>rootUserNames</dt>
                    <dd>Is a space separated list of user identifiers having full access to the authorization tables: Rule, Group, User and UserGroup.
                        The format of the user identifier is determined by the chosen authentication plugin. The authn_db and authn_ldap plugins may
                        be configured to either return the simple user name or to prepend it with a name identifying the mechanism. For example if
                        there is a an entry "root" in the database then if the authn_db authenticator is configured without a mechanism then the user
                        name to consider will be just "root", however if it has been configured with a mechanism of "db" then the string "db/root"
                        must be specified.
                    </dd>

                    <dt>authn.list</dt>
                    <dd>
                        is a space separated set of mnemonics for user to select the plugin in the login call.

                    </dd>
                    <dt>
                        authn.&lt;mnemonic&gt;.jndi
                    </dt>
                    <dd>is the jndi name to locate the plugin. When you installed the plugin a message would have appeared in the server.log stating
                        the JNDI names. For example for authn_db you would expect to see
                        java:global/authn_db.ear-1.0.0-SNAPSHOT/authn_db.ejb-1.0.0-SNAPSHOT/DB_Authenticator. There must be one such entry for each
                        plugin.
                    </dd>
                </dl>

                <p>The log4j.properties file is re-read periodically so there is no need to restart ICAT if you want to change the logging levels. If
                    you enable some logging, you will then need to explicitly disable it when you longer wish to receive that information, rather than
                    just removing the request. This is because the system is not
                    re-initialised each time the log4j.properties file is read.
                </p>

            </subsection>
            <subsection name="Installing the .ear file">
                <p>
                    If you already have an icat installed then you should first remove it with
                    <tt>asadmin --port 4848 undeploy &lt;ear&gt;</tt>
                    where the value of "ear" can be found by:
                    <tt>asadmin --port 4848 list-applications</tt>
                    Obtain
                    <a href="${repoUrl}/org/icatproject/icat.ear/${project.version}/icat.ear-${project.version}.ear">icat.ear-${project.version}.ear</a>
                    and install it with the command:
                    <tt>asadmin --port 4848 deploy icat.ear-${project.version}.ear</tt>
                    . If you have only one domain you may not need to specify the port and if the admin port is not 4848 then specify the correct
                    value.
                </p>
                <p>As the file is deployed the database is created. If you already have an ICAT 4.1 database you may get some messages as it tries to
                    create tables that already exist.
                </p>
            </subsection>
            <subsection name="Check that ICAT works">
                <p>
                    There is one more file in the unpacked icat.ear-${project.version}-config.zip file:
                    <tt>test.py</tt>
                    . This is a python script which requires that the suds client is available. On CENTOS this is packaged as a
                    <tt>python-suds</tt>
                    RPM. This connects as one of the root users you defined as 'rootUserNames' in the icat.properties file. Invoke the script with
                    four parameters: the hostname and port separated by a colon on which the service is deployed securely
                    (something like
                    example.com:8181), the mnemonic for the chosen authentication plugin and the user name and password for one of the root ICAT
                    users. It should report:
                </p>
                <code>Login, search, create, delete and logout operations were all successful.
                </code>
                <p>This script can be run at any time as it is almost harmless - it simply creates a "Group" with an unlikely name and removes it
                    again.
                </p>
                <p>In case of problems look at the log files: server.log and icat.log which can both be found in the logs directory below your domain.
                </p>
            </subsection>


        </section>
    </body>
</document>
			
