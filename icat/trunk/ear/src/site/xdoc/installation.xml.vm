<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>ICAT Server Installation</title>
    </properties>

    <body>

        <section name="Installation">

            <subsection name="Prerequisites">

                <ul>
                    <li>
                        The icat distribution:
                        <a href="${repoUrl}/org/icatproject/icat.ear/${project.version}/icat.ear-${project.version}-distro.zip">ice-${project.version}-distro.zip</a>
                    </li>
                    <li>
                        A suitable deployed container (here assumed to be glassfish though tomcat should be sufficient) to support a web
                        application.
                        Testing has been carried out with Glassfish 3.1.2.
                        <a href="https://code.google.com/p/icatproject/wiki/Glassfish">Glassfish installation instructions</a>
                        are available.
                    </li>
                    <li>
                        A database as described in
                        <a href="https://code.google.com/p/icatproject/wiki/Database">Database installation instructions</a>
                        installed on the server
                    </li>
                    <li>
                        Deployed ICAT authenticators.
                    </li>
                    <li>
                        Python (version 2.4 to 2.7) and the python-suds package installed on the server.
                    </li>
                </ul>
            </subsection>

            <subsection name="Summary of steps">

                <ol>
                    <li>Upgrade the database schema if you already have a 4.2.x version which you wish to use with ICAT 4.3.0</li>
                    <li> Download and unpack the distribution,</li>
                    <li> Rename icat-setup.properties.example to icat-setup.properties and edit it to meet requirements,</li>
                    <li> Rename icat.properties.example to icat.properties and edit it to meet requirements,</li>
                    <li> If you want to modify the logging then rename icat.log4j.properties.example to icat.log4j.properties and edit it to meet
                        requirements,
                    </li>
                    <li> Run "setup.py install",</li>
                    <li> and see if it works.</li>
                </ol>

            </subsection>

            <subsection name="Schema upgrade">

                <ol>
                    <li>Back up the database in case it all goes horribly wrong</li>
                    <li>
                        .Run the get_rules program to save the rules in the format accepted by icat-setup. This must be run as somebody who has read
                        access to the rules. For example:
                        <code>./get_rules.py https://example.com:8181 db username root password password</code>
                        The program should report how many rules it has saved and where.
                    </li>
                    <li>Ensure that nobody tries to use ICAT while it is being upgraded - the simplest approach is to undeploy the old one which can
                        be done from the command line or by using a web browser and connecting on the admin port (typically 4848) and undeploying from
                        there.
                    </li>
                    <li>
                        Try running
                        <tt>./upgrade_mysql_4_2_5.py</tt>
                        or
                        <tt>./upgrade_oracle_4_2_5.py</tt>
                        as appropriate. Note that the procedure has been tested on ICAT 4.2.5 but should work for earlier 4.2 versions. The script
                        will first check that everything should go work. If it reports problems fix them and try again. Once it gets past the checking
                        stage it starts the conversion which can take a long time. At the end you should have a 4.3.0 database. Any indices which had
                        been created manually will have been removed.
                    </li>
                </ol>

            </subsection>

            <subsection name="Preparing icat.setup.properties">

                <p>Rename icat-setup.properties.example to icat-setup.properties and edit it to meet requirements.

                </p>
                <dl>
                    <dt>driver</dt>
                    <dd>is the name of the jdbc driver and must match the jar file for your database that you stored in the previous step.</dd>
                    <dt>icatProperties</dt>
                    <dd>identifies the icat database and how to connect to it.</dd>
                    <dt>glassfish</dt>
                    <dd>is the top level of the glassfish installation. It must contain "glassfish/domains", and will be referred to here as
                        GLASSFISH_HOME as if an environment variable had been set.
                    </dd>
                    <dt>port</dt>
                    <dd>is the administration port of the chosen glassfish domain which is typically 4848.</dd>
                </dl>

                <p>For a local oracle-xe installation the following values of driver and icatProperties should be good except for
                    the user and password
                    values:
                </p>
                <code>
                    driver=oracle.jdbc.pool.OracleDataSource
                    <br />
                    icatProperties=url="'"jdbc:oracle:thin:@//localhost:1521/XE"'":ImplicitCachingEnabled=true:MaxStatements=200:user=icat:password=secret
                    <br />
                </code>
                <p>
                    Note the
                    <tt>"'"</tt>
                    which is needed because the url contains colons which also separate individual properties.
                </p>
                <p>For MySQL:</p>
                <code>
                    driver=com.mysql.jdbc.jdbc2.optional.MysqlDataSource
                    <br />
                    icatProperties=user=icat:password=secret:databaseName=icat
                    <br />
                </code>
            </subsection>

            <subsection name="icat.properties and icat.log4j.properties">
                <p>
                    Rename icat.properties.example to icat.properties and edit it to meet requirements.

                    If you wish to modify the provided logging
                    levels then rename
                    icat.log4j.properties.example to icat.log4j.properties and update the icat.properties
                    file to reference it as
                    explained below. The icat.properties file may need
                    other changes:
                </p>
                <dl>
                    <dt>lifetimeMinutes</dt>
                    <dd>Defines the lifetime of an ICAT sessionid. You should avoid making it have a long duration as this increases the risk if it
                        is
                        intercepted, lost or stolen.
                    </dd>

                    <dt>rootUserNames</dt>
                    <dd>Is a space separated list of user identifiers having full access to the authorization tables: Rule, Group, User and UserGroup.
                        The format of the user identifier is determined by the chosen authentication plugin. The authn_db and authn_ldap plugins may
                        be configured to either return the simple user name or to prepend it with a name identifying the mechanism. For example if
                        there is a an entry "root" in the database then if the authn_db authenticator is configured without a mechanism then the user
                        name to consider will be just "root", however if it has been configured with a mechanism of "db" then the string "db/root"
                        must be specified.
                    </dd>

                    <dt>authn.list</dt>
                    <dd>
                        is a space separated set of mnemonics for user to select the plugin in the login call. This must not reference plugins which
                        are not installed as plugins are checked when ICAT performs its initialisation; if plugins are missing ICAT will not start.
                    </dd>
                    <dt>
                        authn.&lt;mnemonic&gt;.jndi
                    </dt>
                    <dd>is the jndi name to locate the plugin. When you installed the plugin a message would have appeared in the server.log stating
                        the JNDI names. For example for authn_db you would expect to see
                        java:global/authn_db.ear-1.0.0/authn_db.ejb-1.0.0/DB_Authenticator. There must be one such entry for each
                        plugin.
                    </dd>
                    <dt>log4j.properties</dt>
                    <dd>This is optional. If present it must specify the path to a log4j.properties file. The path may be absolute or relative to
                        the
                        config directory.
                    </dd>
                    <dt>notification.list</dt>
                    <dd>is a space separated set of Entity names for which you with to generate notifications. For each one there must be another line
                        saying under what conditions you wish to generate a notification for the entity.
                    </dd>
                    <dt>
                        notification.&lt;entity name&gt; </dt>
                    <dd>a string of letters taken from the set "C", "U" and "D" indicating for which operations (create, update and delete) you with
                        to be notified for that kind of operation on the entity.
                    </dd>
                    <dt>log.list</dt>
                    <dd>s a space separated set of call logging destinations - currently valid destinations are "table" and "file". For each one there
                        must
                        be another line
                        saying under what group of calls you wish to log.
                    </dd>
                    <dt>
                        log.&lt;destination&gt; </dt>
                    <dd>a string of letters taken from the set "S", "R" and "W" indicating for which group of calls you wish to generate a log entry.
                        "S" denotes session calls (login, refresh and logout); "R" is used for the various read calls and "W" is used for all write
                        calls (create, update and delete).
                    </dd>
                    <dt>lucene.directory</dt>
                    <dd>the path to a directory (whose parent must exist) in which to store the lucene index. If this is specified then
                        lucene.commitSeconds must also be specified. If it is omitted then lucene indices will not be created and the searchText()
                        call will return nothing.
                    </dd>
                    <dt>lucene.commitSeconds</dt>
                    <dd>the interval in seconds between committing lucene changes to disk and updating the index. If you set it to 300 then
                        searchText() calls will see what was available at some time in the past (up to 5 minutes ago) and which is also currently
                        present.
                    </dd>
                </dl>

            </subsection>

            <subsection name="Run setup.py install">
                <p>
                    Simply type
                    <tt>./setup install</tt>
                    . It has a few options for which some help is available with
                    <tt>./setup.py -h</tt>
                    . To uninstall you can use
                    <tt>./setup uninstall</tt>
                    however this is not necessary before doing an install as the install command will clear out any earlier version.
                </p>
            </subsection>
            <subsection name="Check that ICAT works">
                <p>
                    A small test program,
                    <tt>testicat, </tt>
                    will have been installed for you.
                    This is a python script which requires that the suds client is available. This connects as one of
                    the root users you defined as 'rootUserNames' in
                    the icat.properties file. Invoke the
                    script the url of the machine on which the
                    ICAT service is deployed
                    (something like
                    https://example.com:8181), the
                    mnemonic for the chosen authentication plugin followed by the
                    credentials for one of the root user names
                    supported
                    by that plugin.
                    These
                    credentials should be passed in as pairs of parameters with
                    key followed by value. For example,
                    assuming that your working
                    directory
                    is in the PATH:
                    <code>test.py https://example.com:8181 db username root password secret</code>
                </p>
                <p>It should report:
                </p>
                <code>Login, search, create, delete and logout operations were all successful.
                </code>
                <p>This script can be run at any time as it is almost harmless - it simply creates a "Group" with an unlikely name and removes it
                    again.
                </p>
                <p>In case of problems, first erase the directory /tmp/suds and try the test.py again. If it still fails, look at the log files:
                    server.log and icat.log which can both be found in the logs directory below your domain. Look also at the relevant authenticator
                    log.
                </p>
            </subsection>
            <subsection name="The admin interface">
                <p>
                    An admin interface is now available and will have been installed by the
                    <tt>setup.py</tt>
                    script. It should be invoked
                    as:
                </p>
                <blockquote>
                    <code>icatadmin &lt;username&gt; &lt;password&gt; &lt;command&gt; &lt;args&gt;...</code>
                </blockquote>
                <p>to run a single command or</p>
                <blockquote>
                    <code>icatadmin &lt;username&gt; &lt;password&gt; </code>
                </blockquote>
                <p>to be prompted for a series of commands as shown below.
                </p>
                <dl>
                    <dt>props</dt>
                    <dd>lists the active contents of the icat.properties file. It does this by examining the properties after they have been read in
                        so any superfluous defintions in the original properties file will not be seen.
                    </dd>
                    <dt>commit</dt>
                    <dd>instructs lucene to update indices. Normally this is not needed as it is will be done periodically according to the value of
                        lucene.commitSeconds
                    </dd>
                    <dt>clear</dt>
                    <dd>clears the lucene indices</dd>
                    <dt>populate &lt;entity name&gt;...</dt>
                    <dd>clears all lucene entries of the specified entity type and scans the corresponding icat entries to repopulate lucene. This is
                        useful if the database has been modified directly rather than by using the ICAT API. Note that because of caching, ICAT should
                        be reloaded after any direct database modifications are made.
                    </dd>
                    <dt>search &lt;query&gt; [&lt;maxCount&gt;] [&lt;entityName&gt;]</dt>
                    <dd>
                        searches lucene indices and returns a list of entity_name:entity_id values. Arguments are
                        <dl>
                            <dt>query</dt>
                            <dd>a lucene query which should be enclosed in quotes if it contains more than one word. Queries can contain AND and OR in
                                upper case as well as parentheses. The default operator is OR. Wildcards of * and ? are also supported. Other features
                                are described in the user documentation for the searchText call.
                            </dd>
                            <dt>maxCount</dt>
                            <dd>maximum number of values to return (defaults to 100)</dd>
                            <dt>entityName</dt>
                            <dd>if specified, this restrict results to entities with this name</dd>
                        </dl>
                    </dd>
                </dl>
            </subsection>

        </section>
    </body>
</document>
			
