<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>Authn DB Plugin Installation</title>
    </properties>

    <body>

        <section name="Installation">

            <p>To deploy an Authn DB Plugin you need:
            </p>
            <ol>
                <li> a suitable container to support EJBs,</li>
                <li> databases on a system supported by eclipselink,</li>
                <li> to configure glassfish,</li>
                <li> to install a copy of authn_db.properties in the correct place,</li>
                <li> to deploy the .ear file,</li>
                <li> and see if it works.</li>
            </ol>

            <subsection name="EJB Container">
                <p> In principle you can use any EJB container. Testing has been performed with
                    glassfish 3.1.2 and these notes refer to that version.
                </p>

                <p> You must already have a Java SE installed (i.e. the command "java" is known), then
                    you can get Java EE 6 SDK Update 4 with JDK
                    6
                    Update 31 or later from
                    http://www.oracle.com/technetwork/java/javaee/downloads/index.html and execute
                    the script.
                </p>

                <p> Request custom installation, install and configure, and enter proxy details if
                    necessary on your site. Request a server domain, set
                    the domain name and set the
                    admin password. For a secure deployment of glassfish you should obtain a trusted
                    certificate rather than
                    using the self-signed one in the distribution.
                </p>

            </subsection>


            <subsection name="Databases">
                <p>
                    The database system must be supported by eclipselink. This includes most
                    database systems you are likely to want as explained at
                    <a href="http://wiki.eclipse.org/EclipseLink/FAQ/JPA#What_databases_are_supported.3F">the
                        eclipselink web site.
                    </a>
                    It has been tested with: MySQL, Oracle and
                    Derby. You will need an
                    <em>empty</em>
                    schema/database with permission for data
                    definition
                    operations such as "CREATE TABLE ..." You must place a copy of the
                    "JDBC
                    Connector" for your database in the lib directory below
                    the domain where
                    you will install icat. You should get the connector from
                    the database supplier.
                    In the case of Oracle this is
                    ojdbc14.jar or ojdbc16.jar and for MySQL it is
                    something like
                    mysql-connector-java*.jar. MySQL must be installed with InnoDB
                    support. Eclipselink, which is used by ICAT, will ensure that MySQL
                    tables make use of the InnoDB
                    engine. In the case of Derby the
                    connector comes
                    pre-installed with Glassfish
                    however we do not
                    expect
                    Derby to be used for production work.
                </p>
            </subsection>

            <subsection name="Preparing glassfish.props">

                <p>
                    Obtain
                    <a href="${repoUrl}/org/icatproject/authn_db.ear/${project.version}/authn_db.ear-${project.version}-config.zip">authn_db.ear-${project.version}-config.zip</a>
                    and unzip it. You must first edit glassfish.props to match your system.
                </p>
                <dl>
                    <dt>driver</dt>
                    <dd>is the name of the jdbc driver and must match the jar file for your database that you stored in the previous step.</dd>
                    <dt>authn_dbProperties</dt>
                    <dd>identifies the password database and how to connect to it.</dd>
                    <dt>glassfish</dt>
                    <dd>is the top level of the glassfish installation. It must contain "glassfish/domains", and will be referred to here as
                        GLASSFISH_HOME as if an environment variable had been set.
                    </dd>
                    <dt>port</dt>
                    <dd>is the administration port of the chosen glassfish domain which is typically 4848.</dd>
                </dl>

                <p>For a local oracle-xe installation the following values of driver, authn_dbProperties should be good except for
                    the user and password values:
                </p>
                <code>
                    driver=oracle.jdbc.pool.OracleDataSource
                    <br />
                    authn_dbProperties=url="'"jdbc:oracle:thin:@//localhost:1521/XE"'":ImplicitCachingEnabled=true:MaxStatements=200:user=authn_db:password=anotherSecret
                    <br />
                </code>
                <p>
                    Note the
                    <tt>"'"</tt>
                    which is needed because the url contains colons which also separate individual properties.
                </p>
                <p>For MySQL:</p>
                <code>
                    driver=com.mysql.jdbc.jdbc2.optional.MysqlDataSource
                    <br />
                    icatuserProperties=user=icat:password=anotherSecret:databaseName=authn_db
                    <br />
                </code>
            </subsection>

            <subsection name="Using glassfish.props to configure Glassfish">
                <p>
                    Having prepared the glassfish.props file you should run the command:
                    <tt>asadmin login</tt>
                    to login as admin. This might prompt you for your glassfish admin password to avoid being prompted for it later. If you do not do
                    this the
                    next step will fail. You will find the asadmin executable in the bin directory below the directory you have identified in
                    glassfish.props as "glassfish" - i.e. $GLASSFISH_HOME/bin/asadmin. There is no logout command but you can delete
                    <tt>~/.asadminpass</tt>
                    if you wish
                    once you have run the
                    <tt>create.sh</tt>
                    script successfully. Now check that your domain is running with
                    <tt>asadmin list-domains</tt>
                    and try running
                    <tt>create.sh</tt>
                    . It expects to find glassfish.props in the current directory. Amongst other things the script will try to "ping" the database. If
                    you have problems, modify the glassfish.props, run
                    <tt>drop.sh</tt>
                    and then
                    <tt>create.sh</tt>
                    again.
                </p>



            </subsection>

            <subsection name="authn_db.properties">
                <p>
                    In the unpacked authn_db.ear-${project.version}-config.zip file you will find a property file, authn_db.properties, which should
                    both be copied to the
                    config
                    directory for your chosen glassfish domain. You will find your domain directory at
                    $GLASSFISH_HOME/glassfish/domains. The
                    authn_db.properties file may need changing:
                </p>

                <dl>
                    <dt>ip</dt>
                    <dd>If access to the DB authentication should only be allowed from certain
                        IP addresses then provide a space separated list of
                        allowed values. These
                        take the form of an IPV4 or IPV6 address followed by the number of bits
                        (starting from the most
                        significant) to consider.
                    </dd>

                    <dt>mechanism</dt>
                    <dd>if specified is a label to appear before the user name as it is made available to ICAT for authorization. For example if this
                        is set to 'db' then the user 'root' will be provided to ICAT as 'db/root', but of no mechanism is specified it will be
                        provided simply as 'root'.
                    </dd>
                </dl>

            </subsection>
            <subsection name="Installing the .ear file">
                <p>
                    If you already have an authn_db installed then you should first remove it with
                    <tt>asadmin --port 4848 undeploy &lt;ear&gt;</tt>
                    where the value of "ear" can be found by:
                    <tt>asadmin --port 4848 list-applications</tt>
                    Obtain
                    <a href="${repoUrl}/org/icatproject/authn_db.ear/${project.version}/authn_db.ear-${project.version}.ear">authn_db.ear-${project.version}.ear</a>
                    and install it with the command:
                    <tt>asadmin --port 4848 deploy authn_db.ear-${project.version}.ear</tt>
                    . If you have only one domain you may not need to specify the port and if the admin port is not 4848 then specify the correct
                    value.
                </p>
                <p>As the file is deployed the database is created. There is currently no mechanism to add entries to the password database so you
                    must use the a database utility to do this directly. Currently passwords are stored in plain text.
                </p>
            </subsection>
            <subsection name="Check that authn_db works">
                <p>
                    There is currently no stand alone mechanism to check that authn_db is working properly. Please use the test.py script that comes
                    with the ICAT
                    installation if one of your root users can be authorized with this plugin.
                </p>

                <p>In case of problems look at the log files: server.log and authn_db.log which can both be found in the logs directory below your
                    domain.
                </p>
            </subsection>


        </section>
    </body>
</document>
			
