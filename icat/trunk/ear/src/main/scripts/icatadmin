#!/usr/bin/env python

import os
import httplib
from urllib import urlencode
import sys
from optparse import OptionParser
from urlparse import urlparse
import ssl
import logging
import getpass
from suds.client import Client, WebFault
import subprocess
import shlex

def readServices(path):
    try:
        result = {}
        with open(path) as ss:
            for line in ss.readlines():
                i = line.index(" ")
                key = line[:i].strip()
                value = line[i + 1:].strip()
                result[key] = value
        return result
    except IOError:
        return None

def reportProblem(wf):
    fault = wf.fault
    try:
        exc = wf.fault.detail.IcatException
        fatal(exc.type + " exception: " + exc.message)
    except:
        fatal(fault.faultstring)

def getService(timeout=90):
    hurl = url
    suffix = "/ICATAdminService/ICATAdmin?wsdl"
    if not url.endswith(suffix): hurl = hurl + suffix
    client = Client(hurl, username=username, password=password, timeout=timeout)
    return client.service

def props(args):
    parser.set_usage(usagebase + "props")
    parser.set_description("Display icat properties") 
    options, args = parser.parse_args(args)

    if len(args) > 0:
        fatal("Must have no arguments after the operation 'props'")

    try:
        for prop in getService().props(): print prop
    except WebFault, wf:
        exc = wf.fault.detail.IcatException
        fatal(exc.type + " exception: " + exc.message)
    except Exception, e:
        fatal(e)
    
    
def search(args):
    parser.set_usage(usagebase + "search <query> [<maxCount> [<entityName>]]")
    parser.set_description("Perform a lucene search")
    options, args = parser.parse_args(args)
    
    query = None
    if len(args) >= 1:
        query = args[0]
        maxCount = 100
        entityName = None
    if len(args) >= 2:
        try:
            maxCount = int(args[1])
        except ValueError as e:
            fatal("'" + args[1] + "' is not an integer")
    if len(args) >= 3:
        entityName = args[2]
    if len(args) > 3 or not query:
        fatal("Must have one, two or three arguments after the operation 'search' - query, maxCount, entityName")

    try:
        print getService().luceneSearch(query, maxCount, entityName)
    except WebFault, wf:
        reportProblem(wf)
    except Exception, e:
        fatal(e)

def clear(args):
    parser.set_usage(usagebase + "clear")
    parser.set_description("Clear all lucene indices")
    options, args = parser.parse_args(args)

    if len(args) > 0:
        fatal("Must have no arguments after the operation 'clear'")

    try:
        getService().luceneClear()
    except WebFault, wf:
        exc = wf.fault.detail.IcatException
        fatal(exc.type + " exception: " + exc.message)
    except Exception, e:
        fatal(e)

def commit(args): 
    parser.set_usage(usagebase + "commit")
    parser.set_description("Commit all lucene indices")
    options, args = parser.parse_args(args)

    if len(args) > 0:
        fatal("Must have no arguments after the operation 'commit'")

    try:
        getService().luceneCommit()
    except WebFault, wf:
        exc = wf.fault.detail.IcatException
        fatal(exc.type + " exception: " + exc.message)
    except Exception, e:
        fatal(e)

def populate(args):
    parser.set_usage(usagebase + "populate [<name>]")
    parser.set_description("Populate lucene (for that entry name)")
    parser.add_option("--timeout", "-t", type='int', default=90, help="timeout in seconds [90]")
    options, args = parser.parse_args(args)

    if len(args) == 0: 
        hurl = url
        suffix = "/ICATService/ICAT?wsdl"
        if not url.endswith(suffix): hurl = hurl + suffix
        client = Client(hurl)
        service = client.service
        try:
            for entity in service.getEntityNames():
                print entity
                getService(options.timeout).lucenePopulate(entity)
        except WebFault, wf:
            exc = wf.fault.detail.IcatException
            fatal(exc.type + " exception: " + exc.message)
        except Exception, e:
            fatal(e)
        return    
        
    if len(args) != 1:
        fatal("Must have zero arguments after the operation 'populate' or one - the name of the entity")
 
    try:
        getService(options.timeout).lucenePopulate(args[0])
    except WebFault, wf:
        exc = wf.fault.detail.IcatException
        fatal(exc.type + " exception: " + exc.message)
    except Exception, e:
        fatal(e)

def help(args):
    parser.set_usage(usagebase + "[subcommand [parameters...] [options...]]")
    parser.set_description("Interact with the ICATAdmin interface. Subcommands are " + str(subcommands.keys()) + 
                            """ All subcommands accept a '-h' or '--help'. """) 
    parser.print_help()

logging.basicConfig(level=logging.CRITICAL)

usagebase = "usage: %prog <url> <username> <password> "
           
subcommands = {}
subcommands["search"] = search
subcommands["props"] = props
subcommands["populate"] = populate
subcommands["commit"] = commit
subcommands["clear"] = clear
subcommands["-h"] = help
subcommands["--help"] = help

def fatal(msg):
    print >> sys.stderr, msg
    sys.exit(1)

parser = OptionParser()

if len(sys.argv) >= 4:
    url, username, password = sys.argv[1:4]
    if password == "-":
        password = getpass.getpass()

if len(sys.argv) == 4:
    print "Use CTRL-D or 'exit' to exit"
    run = True
    try:
        getService().props()
    except WebFault, wf:
        reportProblem(wf)
    except AttributeError, e:
        fatal("Bad username/password")
    except Exception, e:
        fatal(e)
   
    while run:
        try:
            command = raw_input("icatadmin> ")
            if command:
                if command == "exit":
                    run = False
                    continue
                tokens = shlex.split(command)
                op = subcommands.get(tokens[0])
                if not op:
                    fatal("First argument must be one of " + str(subcommands.keys()))
                op(tokens[1:])
        except EOFError:
            print
            sys.exit()
        except:
            pass
    sys.exit()

op = None
if len(sys.argv) > 4:
    command = sys.argv[4]
    op = subcommands.get(command)

if not op:
    fatal("First arguments must be url, username and password (or '-' to be prompted) optionally followed by one of " + str(subcommands.keys()))

op(sys.argv[5:])
