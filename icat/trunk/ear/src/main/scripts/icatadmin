#!/usr/bin/env python

import os
import httplib
from urllib import urlencode
import sys
from optparse import OptionParser
from urlparse import urlparse
import ssl
import logging
import getpass
from suds.client import Client, WebFault
import subprocess
import shlex

logging.basicConfig(level=logging.CRITICAL)

hostUrl = None

def readServices(path):
    try:
        result = {}
        with open(path) as ss:
            for line in ss.readlines():
                i = line.index(" ")
                key = line[:i].strip()
                value = line[i + 1:].strip()
                result[key] = value
        return result
    except IOError:
        return None

def reportProblem(wf):
    fault = wf.fault
    try:
        exc = wf.fault.detail.IcatException
        fatal(exc.type + " exception: " + exc.message)
    except:
        fatal(fault.faultstring)

def getService():
    client = Client(hostUrl + "/ICATAdminService/ICATAdmin?wsdl", username=username, password=password)
    return client.service

def props(args):
    parser.set_usage("usage: %prog props")
    parser.set_description("Display icat properties")

    if len(args) > 0:
        fatal("Must have no arguments after the operation 'props'")

    try:
        for prop in getService().props(): print prop
    except WebFault as wf:
        exc = wf.fault.detail.IcatException
        fatal(exc.type + " exception: " + exc.message)
    except Exception as e:
        fatal("Probably bad password")
    
    
def search(args):
    parser.set_usage("usage: %prog search")
    parser.set_description("Perform a lucene search")

    query = None
    if len(args) >= 1:
        query = args[0]
        maxCount = 100
        entityName = None
    if len(args) >= 2:
        try:
            maxCount = int(args[1])
        except ValueError as e:
            fatal("'" + args[1] + "' is not an integer")
    if len(args) >= 3:
        entityName = args[2]
    if len(args) > 3 or not query:
        fatal("Must have two or three arguments after the operation 'search' - query, maxCount, entityName")

    try:
        print getService().luceneSearch(query, maxCount, entityName)
    except WebFault as wf:
        reportProblem(wf)
    except Exception as e:
        fatal("Probably bad password")

def clear(args):
    parser.set_usage("usage: %prog clear")
    parser.set_description("Clear all lucene indices")

    if len(args) > 0:
        fatal("Must have no arguments after the operation 'clear'")

    try:
        getService().luceneClear()
    except WebFault as wf:
        exc = wf.fault.detail.IcatException
        fatal(exc.type + " exception: " + exc.message)
    except Exception as e:
        fatal("Probably bad password")

def commit(args): 
    parser.set_usage("usage: %prog commit")
    parser.set_description("Commit all lucene indices")

    if len(args) > 0:
        fatal("Must have no arguments after the operation 'commit'")

    try:
        getService().luceneCommit()
    except WebFault as wf:
        exc = wf.fault.detail.IcatException
        fatal(exc.type + " exception: " + exc.message)
    except Exception as e:
        fatal("Probably bad password")

def populate(args):
    parser.set_usage("usage: %prog populate")
    parser.set_description("Populate lucene for that entry name")

    if len(args) != 1:
        fatal("Must have one arguments after the operation 'populate' - the name of the entity")
 
    try:
        getService().lucenePopulate(args[0])
    except WebFault as wf:
        exc = wf.fault.detail.IcatException
        fatal(exc.type + " exception: " + exc.message)
    except Exception as e:
        fatal("Probably bad password")

def help(args):
    parser.set_usage("usage: %prog subcommand [parameters...] [options...]")
    parser.set_description("Interact with the ICATAdmin interface. Subcommands are " + str(subcommands.keys()) + 
                            """ All subcommands accept a '-h' or '--help'. """) 
    parser.print_help()
   
services = None
fLocal = os.path.join(os.environ["HOME"], ".glassfish.services")
fSystem = "/usr/local/etc/glassfish.services"
if os.path.isfile(fLocal):
    services = readServices(fLocal)
elif os.path.isfile(fSystem):
    services = readServices(fSystem)
if not services and not hostUrl:
    hostUrl = raw_input("Please specify the url of the server you wish to use in the form https://example.com:8181 ")
    with open (fLocal, "w") as ss:
        print >> ss, "url", hostUrl
    print "This has been recorded in ~/.glassfish.services"
elif services:
        hostUrl = services["url"]
host = urlparse(hostUrl).netloc
        
subcommands = {}
subcommands["search"] = search
subcommands["props"] = props
subcommands["populate"] = populate
subcommands["commit"] = commit
subcommands["clear"] = clear
subcommands["-h"] = help
subcommands["--help"] = help

def fatal(msg):
    print >> sys.stderr, msg
    sys.exit(1)

parser = OptionParser()

if len(sys.argv) >= 3:
    username, password = sys.argv[1:3]
    if password == "-":
        password = getpass.getpass()

if len(sys.argv) == 3:
    print "Use CTRL-D or 'exit' to exit"
    run = True
    while run:
        try:
            command = raw_input("ica> ")
            if command:
                if command == "exit":
                    run = False
                    continue
                tokens = shlex.split(command)
                op = subcommands.get(tokens[0])
                if not op:
                    fatal("First argument must be one of " + str(subcommands.keys()))
                op(tokens[1:])
        except EOFError:
            print
            sys.exit()
        except:
            pass
    sys.exit()

op = None
if len(sys.argv) > 3:
    command = sys.argv[3]
    op = subcommands.get(command)

if not op:
    fatal("First arguments must be username and password followed by one of " + str(subcommands.keys()))

op(sys.argv[4:])
