#!/usr/bin/env python
from optparse import OptionParser
import shutil
import glob
from setup_utils import *
import stat
import os

root = os.getuid() == 0 

parser = OptionParser("usage: %prog [options] install | uninstall")

if root: default = '/usr/bin'
else: default = '~/bin'
parser.add_option("--binDir", "-b", help="location to store executables [" + default + "]", default=default)

parser.add_option("--verbose", "-v", help="produce more output - this may appear twice to get even more", action="count")
parser.add_option("--force", "-f", help="overwrite existing configuration files", action="store_true", default=False)

options, args = parser.parse_args()

if len(args) != 1:abort("Must have one argument: 'install' or 'uninstall'")

arg = args[0].upper()
if arg not in ["INSTALL", "UNINSTALL"]: abort("Must have one argument: 'install' or 'uninstall'")
verbosity = options.verbose
overwrite = options.force

binDir = os.path.expanduser(options.binDir)

if not os.path.exists ("setup"): abort ("This must be run from the unpacked distribution directory")

files = ["testicat", "icatadmin"]

actions = Actions(verbosity, overwrite) 

fileName = "icat-setup.properties"
props = actions.getProperties(fileName, ["icatProperties", "glassfish", "driver", "port", "admin.user", "admin.password"])
if os.stat(fileName).st_mode & stat.S_IROTH:
    abort("'" + fileName + "' must not be world readable")

icatProperties = actions.getProperties("icat.properties", ["lifetimeMinutes", "rootUserNames", "authn.list", "notification.list", "log.list"])
log4jProperties = icatProperties.get("log4j.properties")

asadminCommand = os.path.join(props["glassfish"], "bin", "asadmin") + " --port " + props["port"]
actions.setAsadminCommand(asadminCommand)

domain = actions.getAsadminProperty("property.administrative.domain.name")

domain_path = os.path.join(props["glassfish"], "glassfish", "domains", domain)
if not os.path.exists(domain_path): abort("Domain directory " + domain_path + " does not exist")
config_path = os.path.join(domain_path, "config")

if arg == "INSTALL":
       
    for v in icatProperties["authn.list"].split():
        if "authn." + v + ".jndi" not in icatProperties:
            abort ("authn.list included " + v + " but authn." + v + ".jndi is not defined") 
    
    for v in icatProperties["notification.list"].split():
        if "notification." + v not in icatProperties:
            abort ("notification.list included " + v + " but notification." + v + " is not defined") 
   
    for v in icatProperties["log.list"].split():
        if "log." + v not in icatProperties:
            abort ("log.list included " + v + " but log." + v + " is not defined")
     
    if  log4jProperties:
        dir, file = os.path.split(log4jProperties)
        if not os.path.exists(file): abort("log4j.properties file " + file + " not found")
        
    ld = icatProperties.get("lucene.Directory")
    if ld:
        parent = os.path.basename(os.path.normpath(ld))
        if not os.path.exists(parent):
            about("Parent deirectory " + parent + " of lucene directory specified in icat.properties does not exist")
            
        if not icatProperties.get("lucene.commitSeconds"):
            abort("'lucene.commitSeconds' not specified in icat.properties")
        
    actions.installFile("icat.properties", config_path)
    if log4jProperties:
        dir, file = os.path.split(log4jProperties)
        if dir:
            actions.installFile(file, dir)
        else:
            actions.installFile(file, config_path)
    
    try:
        
        if actions.getAsadminProperty("configs.config.server-config.security-service.activate-default-principal-to-role-mapping") == "false":
            actions.setAsadminProperty("configs.config.server-config.security-service.activate-default-principal-to-role-mapping", "true")
            actions.asadmin("stop-domain " + domain)
            actions.asadmin("start-domain " + domain)
            
        pw = props["admin.password"]
        digit = False
        lc = False
        uc = False
        for c in pw:
            if c.isdigit(): digit = True
            elif c.islower(): lc = True
            elif c.isupper(): uc = True
        if not (digit and lc and uc) : abort("admin.password must contain at least one digit, a lower case character and an upper case character")
            
        actions.asadmin("delete-file-user " + props["admin.user"], tolerant=True)
        f = open("pw", "w")
        print >> f, "AS_ADMIN_USERPASSWORD=" + pw
        f.close() 
        actions.asadmin("--passwordfile pw create-file-user --groups ICATAdmin " + props["admin.user"])
        os.remove("pw")
            
        app = actions.getAppName("icat.ear")
        if app: actions.asadmin("undeploy " + app)
        
        actions.asadmin("delete-jdbc-resource jdbc/icat", tolerant=True)
        actions.asadmin("delete-jdbc-connection-pool icat", tolerant=True)
        actions.asadmin("delete-jms-resource jms/ICATTopicConnectionFactory", tolerant=True)
        actions.asadmin("delete-jms-resource jms/ICATTopic", tolerant=True)
        
        actions.asadmin('create-jdbc-connection-pool --datasourceclassname ' + props["driver"] + 
                ' --restype javax.sql.DataSource --failconnection=true --steadypoolsize 2' + 
                ' --maxpoolsize 8 --ping --property ' + props["icatProperties"] + ' icat', printOutput=True)
        
        actions.asadmin("create-jdbc-resource --connectionpoolid icat jdbc/icat")
    
        actions.asadmin("create-jms-resource --restype javax.jms.TopicConnectionFactory jms/ICATTopicConnectionFactory")
    
        actions.asadmin("create-jms-resource --restype javax.jms.Topic jms/ICATTopic")
        
        cmd = asadminCommand + " " + "deploy " + glob.glob("icat.ear-*.ear")[0]
        if verbosity: print "\nexecute: " + cmd 
        out, err, rc = actions.execute(cmd)
        if verbosity > 1:
            if out: print out
        if err:
            for line in err.split("\n"):
                line = line.strip()
                if line:
                    if line.startswith("PER01"): continue
                    print line
     
        for file in files:   
            os.chmod(file, 0755)    
            shutil.copy(file , binDir)
            if verbosity:
                print "\n", file, "copied to", binDir
                
    except Exception, e:
        abort(str(e))
        
    if actions.clashes:
        print "*****************************************************************************************************************"
        print "There have been", actions.clashes, "instances of files not copied where one was already present and --force not specified"
        print "*****************************************************************************************************************"
        
else:  # UNINSTALL
    
    actions.removeFile("icat.properties", config_path)
    if log4jProperties:
        dir, file = os.path.split(log4jProperties)
        if dir:
            actions.removeFile(file, dir)
        else:
            actions.removeFile(file, config_path)
    
    try:
        
        actions.asadmin("delete-file-user " + props["admin.user"], tolerant=True)
        app = actions.getAppName("icat.ear")
        if app: actions.asadmin("undeploy " + app)
        actions.asadmin("delete-jdbc-resource jdbc/icat", tolerant=True)
        actions.asadmin("delete-jdbc-connection-pool icat", tolerant=True)
        actions.asadmin("delete-jms-resource jms/ICATTopicConnectionFactory", tolerant=True)
        actions.asadmin("delete-jms-resource jms/ICATTopic", tolerant=True)
        
        for file in files:
            path = os.path.join(binDir, file)    
            if os.path.exists(path): 
                os.remove(path)
                if verbosity:
                    print file, "removed from", binDir
     
    except Exception, e:
        abort(str(e))       
    
            
    
