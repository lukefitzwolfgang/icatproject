<html>
<head>
<title>ICAT RESTful interface</title>
</head>
<body>
	<h1>ICAT RESTful interface</h1>

	<h2>Introduction</h2>
	<p>ICAT provides both a SOAP and a RESTful web service to
		communicate with the core ICAT code which makes calls to a relational
		DBMS. This document describes the RESTful interface but assumes some
		knowledge of ICAT as explained in the ICAT Java Client manual.</p>

	<p>For each call the Java annotations in the server code are shown
		as these indicate precisely what is expected. @POST, @PUT, @DELETE and
		@GET denote the method and @Path shows the relative url path. They are
		all relative to "icat". The @Consumes and @Produces shows the expected
		format of the body of the message.</p>

	<p>
		The @GET calls can be tried on a web browser and curl can be used to
		make any of the calls. For example a url of the form:
		<kbd> https://example.com:443/icat/version</kbd>
		will return some json such as
		<samp>{"version":"4.4.0"}</samp>
	</p>

	<p>
		In the case of an error from the ICAT code the returned json will be
		of the form:
		<samp>{"code":"BAD_PARAMETER", "message":"password too short",
			"offset":"0"}</samp>
		where the offset will be omitted when it is not useful. It is to show
		how many entities would have been succesfully processed if a
		subsequent error had not occured. The status code will correspond to
		the type of the ICAT exception as shown by the code value. In the case
		of any other error, the returned json will be of the form:
		<samp>{"code":"INTERNAL", "message":"null pointer exception"}</samp>
		and the status code will be 500 ("Internal Server Error"). Clients
		should check the status code and if status/100 is not 2 then an error
		has occured.
	<div>
		This document is divided into sections covering
		<ul>
			<li><a href="#session">Session management</a></li>
			<li><a href="#entity">Entity management</a></li>
			<li><a href="#port">Import and Export</a></li>
			<li><a href="#misc">Miscellaneous</a></li>
		</ul>
	</div>



	<h2>
		<a id="session">Session management</a>
	</h2>
	<h3>login</h3>
	<p>To obtain a new session.</p>
	@POST
	<br /> @Path("session")
	<br /> @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	<br /> @Produces(MediaType.APPLICATION_JSON)

	<p>The form parameter is:</p>

	<dl>
		<dt>jsonString</dt>
		<dd>
			which takes the form
			<code>{"plugin":"db", "credentials[{"username":"root"},
				{"password":"guess"}]}</code>
		</dd>
	</dl>

	The returned json is of the form
	<samp>{"sessionId","0d9a3706-80d4-4d29-9ff3-4d65d4308a24"}</samp>

	<h3>getSession</h3>
	<p>To obtain information about a session.</p>
	@GET
	<br /> @Path("session/{sessionId}")
	<br /> @Produces(MediaType.APPLICATION_JSON)

	<p>The path parameter is:</p>

	<dl>
		<dt>sessionId</dt>
		<dd>
			which takes the form
			<code>0d9a3706-80d4-4d29-9ff3-4d65d4308a24</code>
		</dd>
	</dl>

	The returned json is of the form
	<samp>{"userName":"db/root","remainingMinutes":117.87021666666666}</samp>

	<h3>refresh</h3>
	<p>To refresh a session.</p>
	@PUT
	<br /> @Path("session/{sessionId}")

	<p>The path parameter is:</p>

	<dl>
		<dt>sessionId</dt>
		<dd>
			which takes the form
			<code>0d9a3706-80d4-4d29-9ff3-4d65d4308a24</code>
		</dd>
	</dl>


	<h3>logout</h3>
	<p>To logout - i.e. delete a session.</p>
	@DELETE
	<br /> @Path("session/{sessionId}")

	<p>The path parameter is:</p>

	<dl>
		<dt>sessionId</dt>
		<dd>
			which takes the form
			<code>0d9a3706-80d4-4d29-9ff3-4d65d4308a24</code>
		</dd>
	</dl>

	<h2>
		<a id="entity">Entity management</a>
	</h2>
	<h3>create</h3>
	<p>To create one or more entities in ICAT</p>
	@POST
	<br /> @Path("entityManager")
	<br /> @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	<br /> @Produces(MediaType.APPLICATION_JSON) public String
	<br />

	<p>The form parameters are:</p>

	<dl>
		<dt>sessionId</dt>
		<dd>
			which takes the form
			<code>0d9a3706-80d4-4d29-9ff3-4d65d4308a24</code>
		</dd>
		<dt>entities</dt>
		<dd>
			which takes the form
			<code>[{"InvestigationType":{"facility":{"id":12042},"name":"ztype"}},{"Facility":{"name":"another
				fred"}}]</code>
			. It is a list of objects where each object has a name which is the
			type of the entity and a value which is an object with name value
			pairs where these names are the names of the attributes and the
			values are either simple or they may be objects themselves. In this
			case two entities are being created an InvestigationType and a
			Facility with a name of "another fred". The InvestigationType being
			created will reference an existing facility with an id of 12042 and
			will have a name of "ztype". For references to existing objects only
			the "id" value need be set otherwise if child objects are to be
			created at the same time then the "id" should not be set but the
			other desired attributes should.
		</dd>
	</dl>

	The returned json is of the form
	<samp>[125, 126]</samp>
	and is a list of the ids of the objects created.

	<h3>search</h3>
	<p>To search for information in ICAT. This includes the
		functionality of both search and get calls in the SOAP web service.</p>

	@GET @Produces(MediaType.APPLICATION_JSON)
	<br /> @Path("entityManager")

	<p>The query parameters are:</p>

	<dl>
		<dt>sessionId</dt>
		<dd>
			which takes the form
			<code>0d9a3706-80d4-4d29-9ff3-4d65d4308a24</code>
		</dd>
		<dt>query</dt>
		<dd>
			which takes the form
			<code>SELECT f FROM Facility f</code>
		</dd>
		<dt>id</dt>
		<dd>
			which takes the form
			<code>732</code>
			and is used when the functionality of get is required in which case
			the query must be as described in the ICAT Java Client manual.
		</dd>
	</dl>

	The returned json is of the form
	<samp>[{"Facility":{"id":126, "name":"another fred"}}]</samp>
	and is a list of the objects returned and takes the same form as the
	data passed in for create. If an id value is specified then only one
	object can be returned so the outer square brackets are omitted.


	<h2>
		<a id="port">Import and Export</a>
	</h2>

	<p>The import and export calls make use of a special format to
		represent ICAT data efficiently. The file may contain line starting
		with a # sign. The first non-comment line contains the version number
		of the file format with major and minor parts. Each entity type is
		preceded by a blank line line followed by a one line entity descriptor
		and then a line for each entity of that type. For example:</p>

	<pre>
 #  Version of file format
 1.0
 
 Facility ( name:0, daysUntilRelease:1, createId:2, createTime:3)
 "Test port facility", 90, "Zorro", 1920-05-16T16:58:26.12Z
 
 InvestigationType (facility(name:0), name:1)
 "Test port facility", "atype"
 "Test port facility", "btype"
 
 Investigation(facility(name:0), name:1, visitId:2, type(facility(name:0), name:3), title:4)
 "Test port facility", "expt1", "one", "atype", "a title"
</pre>

	<p>The entity descriptor starts with the name of the entity type
		followed by a comma separated list attribute of field names held
		inside parentheses. It is not necessary to include those which you
		don't wish to set as any that are not present and are allowed to be
		null will be set to null when importing. So we see that this file will
		create a Facility with fields: name, daysUntilRelease, createId and
		createTime. Following the field name is a colon and an integer showing
		the offset to the data field in each of the next set of rows. So a
		facility will be created with a name of "Test port facility" and with
		90 daysUntilRelease. All strings must be enclosed in double quotes and
		to represent a double quote within the string then two double quotes
		must be used. True, false and null literals are not case sensitive.
		The last two fields of the facility are createId and createTime. If
		you specify that you want all attributes and you are a "root user"
		then the values of createId and createTime will be respected otherwise
		the current time is used and the id is that of the user doing the
		import. Timestamps literals follow ISO 8601 and support fractional
		seconds and time zones. If the time zone is omitted it is interpreted
		as local time.</p>
	<p>Now consider the InvestigationType for which we need to specify
		the facility to which it belongs and its name. The facility cannot be
		descibed by its id because we don't know what it is. So instead we
		list in parentheses the field names that define it. So name:0 is the
		name of the facility and name:1 is the name of the InvestigationType.</p>

	<p>The next line shows the convenience of this syntax. The
		investigation has a facility (identified by its name:0) and the name:1
		of the investigation and the visitId but it also has a type which is
		identified a facility (identified by its name:0) and by the name:3 of
		the type. Finally it has a title:4 field. Note that name:0 is used
		twice as in this case the inverstigation belongs to the same facility
		as its type. This works fine as long as we deal with entity types
		which have key fields. This is shown in the next snippet from an
		import file:</p>
	<pre>
 DataCollection(?:0)
 "a"
 "b"
 "c"
 
 DataCollectionDatafile(datafile(dataset(investigation(facility(name:0), name:1, visitId:2), name:3), name:4), dataCollection(?:5))
 "Test port facility", "expt1", "one", "ds1", "df1",  "a"
 "Test port facility", "expt1", "one", "ds1", "df2",  "b"
 
 Job(application(facility(name:0), name:1, version:2), inputDataCollection(?:3), outputDataCollection(?:4))
 "Test port facility", "aprog", "1.2.3", "a", "b"
</pre>

	Here we have the DataCollection which we imagine to be indentified by
	the anonymous variable "?". This section of the file will create three
	DataCollection entries which we shall remember for the duration of the
	import process as "a", "b" and "c". DataCollectionDatafiles are then
	associated with DataCollections "a" and "b" and a job is created with
	one DataCollection as input and one as output. When performing export
	the same format is used however some values will be repeated - for
	example the facility name will appear many times in most rows.


	<h3>import</h3>
	<p>Import data into ICAT</p>

	@Path("port")
	<br /> @POST
	<br />@Consumes(MediaType.MULTIPART_FORM_DATA)

	<p>The multipart form data starts with a form parameter with a
		ContentType of TEXT_PLAIN and a name of "json" and is followed by the
		data to be imported with a ContentType of APPLICATION_OCTET_STREAM.</p>

	<p>
		The json takes the form:
		<code>"{sessionId", "0d9a3706-80d4-4d29-9ff3-4d65d4308a24",
			"duplicate", "THROW", "attributes", "USER"}</code>
		. The value "duplicate" if not specified defaults to "THROW". It is
		not case sensitive and it defines the action to be taken if a
		duplicate is found:
	</p>
	<dl>
		<dt>THROW</dt>
		<dd>throw an exception</dd>

		<dt>IGNORE</dt>
		<dd>go to the next row</dd>

		<dt>CHECK</dt>
		<dd>check that new data matches the old - and throw exception if
			it does not.</dd>

		<dt>OVERWRITE</dt>
		<dd>replace old data with new</dd>
	</dl>

	The value "attributes" if not specified defaults to "USER". It is not
	case sensitive and it defines which attributes to consider:

	<dl>
		<dt>USER</dt>
		<dd>values for modId, createId, modDate and createDate provided
			in the input will be ignored.</dd>

		<dt>ALL</dt>
		<dd>all field values specified will be respected. This option is
			only available to those specified in the rootUserNames in the
			icat.properties file.</dd>
	</dl>

	<h3>export</h3>
	<p>Export data from ICAT</p>
	@Path("port")
	<br /> @GET @Path("port")
	<br /> @Produces(MediaType.TEXT_PLAIN)

	<p>The query parameter is:</p>

	<dl>
		<dt>json</dt>
		<dd>
			which takes the form
			<code>{"sessionId":"0d9a3706-80d4-4d29-9ff3-4d65d4308a24","query":"Facility",
				, "attributes":"ALL"</code>
			where query if specified is a normal ICAT query which may have an
			INCLUDE clause. This is used to define the metadata to export. If not
			present then the whole ICAT will be exported.
			<p>The value "attributes" if not specified defaults to "USER". It
				is not case sensitive and it defines which attributes to consider:</p>
			<dl>
				<dt>USER</dt>
				<dd>values for modId, createId, modDate and createDate will not
					appear in the output.</dd>

				<dt>ALL</dt>
				<dd>all field values will be output.</dd>
			</dl>

		</dd>
	</dl>

	<p>The response is the requested export data.</p>
	<h2>
		<a id="misc">Miscellaneous</a>
	</h2>

	<h3>version</h3>
	<p>Return the version of the ICAT server</p>
	@Path("version")
	<br /> @GET @Produces(MediaType.APPLICATION_JSON)
	<p>
		The returned json is of the form:
		<samp>{"version":"4.4.0"}</samp>
	</p>
</body>
</html>