<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>ICAT Server Installation</title>
    </properties>

    <body>

        <section name="Overview">
            <p>
                This document is made up of three sections, describing
                <a href="#installation">installation</a>
                ,
                <a href="#post">post-installation work</a>
                ,
                <a href="#performance">performance</a>
                and the
                <a href="#icatadmin">admin interface</a>
            </p>
        </section>

        <a name="installation" />
        <section name="Installation">

            <subsection name="Prerequisites">

                <ul>
                    <li>
                        The icat distribution:
                        <a href="${repoUrl}/org/icatproject/icat.war/${project.version}/icat.war-${project.version}-distro.zip">icat.ear-${project.version}-distro.zip</a>
                    </li>
                    <li>
                        A suitable deployed container. The installation scripts only support Glassfish.
                        Testing has been carried out with Glassfish
                        4.0.
                        <a href="http://icatproject.org/installation/glassfish/">Glassfish installation instructions</a>
                        are available.
                    </li>
                    <li>
                        A database as described in
                        <a href="http://icatproject.org/installation/database/">Database installation instructions</a>
                        installed on the server
                    </li>
                    <li>
                        Deployed ICAT authenticators.
                    </li>
                    <li>
                        Python (version 2.4 to 2.7) and the python-suds package installed on the server.
                    </li>
                    <li>MySQL-python must be installed if you have an MySQL 4.2.x schema you need to upgrade.</li>
                    <li>cx_Oracle must be installed (in addition to an Oracle client) if you have an Oracle 4.2.x schema you need to upgrade.</li>
                    <li>
                        <a href="http://www.icatproject.org/mvn/site/tools/icat-setup/">icat-setup</a>
                        version 1.1.x or higher
                        must be installed if you have a 4.2.x schema you need to upgrade and you wish to preserve existing
                        rules but is also generally
                        a useful component to install.
                    </li>
                    <li>
                        <a href="http://www.icatproject.org/mvn/site/tools/ice/">ice</a>
                        , the ICAT editor will make it easier to configure your ICAT.
                    </li>
                </ul>
            </subsection>

            <subsection name="Summary of steps">

                <ol>
                    <li>Upgrade the database schema if you already have a 4.2.x version which you wish to use with ICAT 4.3.3. If you have already
                        upgraded to ICAT 4.3.x then no changes to the database are required.
                    </li>
                    <li>
                        If you wish to install multiple servers each running an ICAT connected to the same database please see
                        <a href="#cluster">Installing a group of ICATs</a>
                    </li>
                    <li>
                        Please follow
                        <a href="http://icatproject.org/installation/component/"> the generic installation instructions</a>
                    </li>
                    <li> See if it works.</li>
                </ol>

            </subsection>

            <a name="cluster" />
            <subsection name="Installing a group of ICATs">
                <p>If your facility depends upon a single ICAT instance then ingestion of data can be held up by a user making an expensive query.</p>

                <p>To avoid this it is suggested that you install multiple servers each running a Glassfish with an ICAT but all sharing one database.
                    However there are a number of opportunities to get things wrong in the setup so it is recommended that you install the central
                    machine first and make sure that it works before adding in the satellites. Ingestion can be directed to one node and the other
                    nodes can be load balanced for user access by, for example, an Apache web server. In this documentation one machine is referred to
                    as the central one and the others are referred to as satellites.
                </p>

                <p>
                    All machines must use the same database. If the central machine is running the database then ports must be opened to the satellite
                    machines. By default this is 3306 for MySQL and 1521 for Oracle. Ports must also be opened on the central machine for JMS and IIOP
                    which are by default 7676 and 3700 and respectively. In addition it seems that the ORB (IIOP) makes unusual use of the ephemeral
                    ports which require that they are also open on the central machine. The set of ephemeral ports is large - and for unix may be
                    found at /proc/sys/net/ipv4/ip_local_port_range. Security is not enabled for either JMS or IIOP communication so the firewalls
                    should normally be configured to only allow traffic from the set of satellite machines.
                </p>

                <p>Authentication can either be carried out on the central machine - which has the advantage that you only have authenticator logs
                    building up on that machine or it can be handled by the satellites so distributing the load better. Even if you choose to use
                    central authentication the authenticators must, unfortunately still be installed on the satellites. Glassfish seems to get
                    confused if the JNDI resources are not recognised locally on the satellites. To enable central authentication you need a line in
                    the icat.properties file on each satellite machine for each authenticator of the form: authn.XXX.hostPort = &lt;central
                    machine&gt;:3700 where XXX is one of the values listed in the authn.list property.
                </p>

                <p>Lucene calls must also be directed to the central machine with a line in each satellite's icat.properties file of the form:
                    lucene.hostPort = &lt;central machine&gt;:3700. This is the only lucene property that should be set on the satellites. It is
                    essential that this property is set otherwise each node will only see changes made via that machine.
                </p>

                <p>JMS messages must all be sent to the central machine. This is important otherwise cache refresh messages may be missed. All
                    machines may produce these messages and all machines are listening for them. To configure this an entry is added to the
                    icat-setup.properties file (not the icat.properties file) of the satellite machines of the form jmsHostPort = &lt;central
                    machine&gt;:7676
                </p>

                <p>
                    You could then set up an Apache front end to do load balancing. This will probably just connect to the satellites leaving the
                    central machine to handle ingestion of data. See
                    <a href="http://icatproject.org/installation/apache-front-end/">Apache front end</a>
                    for one way of doing this.
                </p>

            </subsection>

            <subsection name="Schema upgrade">

                <p>This is for upgrading a 4.2.5 schema to 4.3.2. If you have already upgraded to 4.3.x skip this step as the database structures for
                    4.3.0, 4.3.1 and 4.3.2 are identical. Do not attempt to use this procedure on a 4.3.x schema!
                </p>

                <ol>
                    <li>Back up the database in case it should get into a state from which recovery is impractical.</li>
                    <li>
                        Run the get_rules program to save the rules in the format accepted by icat-setup. This must be run as somebody who has read
                        access to the rules. For example:
                        <code>./get_rules.py https://example.com:8181 db username root password password</code>
                        The program should report how many rules it has saved and where.
                    </li>
                    <li>Ensure that nobody tries to use ICAT while it is being upgraded - the simplest approach is to undeploy the old one which can
                        be done from the command line or by using a web browser and connecting on the admin port (typically 4848) and undeploying from
                        there.
                    </li>
                    <li>
                        For MySQL edit username, password, schema and dbhost at the top of the file
                        <tt>./upgrade_mysql_4_2_5.py</tt>
                        and run it or
                        or for Oracle, edit username , password and db at the top of the file
                        <tt>./upgrade_oracle_4_2_5.py</tt>
                        and run that.
                        Note that the procedure has been tested on ICAT 4.2.5 but should work for earlier 4.2 versions. The script
                        will
                        first check that everything should go work. If it reports problems fix them and try again. Once it gets past the checking
                        stage it starts the conversion which can take a long time (many hours for a production system). At the end you should have a
                        4.3.2 database. Any indices which had
                        been created manually will have been removed.
                    </li>

                </ol>

            </subsection>

            <subsection name="The icat-setup.properties file">

                <dl>
                    <dt>driver</dt>
                    <dd>is the name of the jdbc driver and must match the jar file for your database that you stored in the previous step.</dd>
                    <dt>dbProperties</dt>
                    <dd>identifies the icat database and how to connect to it.</dd>
                    <dt>glassfish</dt>
                    <dd>is the top level of the glassfish installation. It must contain "glassfish/domains", and will be referred to here as
                        GLASSFISH_HOME as if an environment variable had been set.
                    </dd>
                    <dt>port</dt>
                    <dd>is the administration port of the chosen glassfish domain which is typically 4848.</dd>
                    <dt>jmsHostPort</dt>
                    <dd>
                        This is optional. It should only be specified on satellite machines when you have a group of machines working together as
                        described at
                        <a href="#cluster">Installing a group of ICATs</a>
                        . It takes the form machine:port where the port will normally be 7676.
                    </dd>
                </dl>

                <p>For a local oracle-xe installation the following values of driver and dbProperties should be good except for
                    the user and password
                    values:
                </p>
                <code>
                    driver=oracle.jdbc.pool.OracleDataSource
                    <br />
                    dbProperties=url="'"jdbc:oracle:thin:@//localhost:1521/XE"'":ImplicitCachingEnabled=true:MaxStatements=200:user=icat:password=secret
                    <br />
                </code>
                <p>
                    Note the
                    <tt>"'"</tt>
                    which is needed because the url contains colons which also separate individual properties.
                </p>
                <p>For MySQL:</p>
                <code>
                    driver=com.mysql.jdbc.jdbc2.optional.MysqlDataSource
                    <br />
                    dbProperties=user=icat:password=secret:databaseName=icat
                    <br />
                </code>
            </subsection>

            <subsection name="The icat.properties and icat.log4j.properties files">
                <p>
                    If you wish to modify the provided logging
                    levels then rename
                    icat.log4j.properties.example to icat.log4j.properties and update the
                    icat.properties
                    file to reference it as
                    explained below. The icat.properties file may need
                    other changes:
                </p>
                <dl>
                    <dt>lifetimeMinutes</dt>
                    <dd>Defines the lifetime of an ICAT sessionid. You should avoid making it have a long duration as this increases the risk if it
                        is
                        intercepted, lost or stolen.
                    </dd>

                    <dt>rootUserNames</dt>
                    <dd>Is a space separated list of user identifiers having full access to the authorization tables: Rule, Group, User and UserGroup.
                        The format of the user identifier is determined by the chosen authentication plugin. The authn_db and authn_ldap plugins may
                        be configured to either return the simple user name or to prepend it with a name identifying the mechanism. For example if
                        there is a an entry "root" in the database then if the authn_db authenticator is configured without a mechanism then the user
                        name to consider will be just "root", however if it has been configured with a mechanism of "db" then the string "db/root"
                        must be specified.
                    </dd>

                    <dt>maxEntities</dt>
                    <dd>Restrict total number of entities to return in a search or get call. This should be set as small as possible to protect the
                        server from running out of memory. However if you set it too small it may prevent users from doing reasonable things.
                    </dd>

                    <dt>maxIdsInQuery</dt>
                    <dd>For handling INCLUDEs, ICAT may generate queries which are not acceptable to the database system. To avoid this problem such
                        queries are broken down. This is the maximum size of each chunk which must not exceed 1000 for Oracle.
                    </dd>

                    <dt>importCacheSize</dt>
                    <dd>the size of a cache used during import to avoid an excessive number of calls to the database. The cache is dropped after each
                        call to import to ensure that authorization rules are enforced. As the cache is short-lived, modifications to ICAT are
                        unlikely to result in stale information being used from the cache.
                    </dd>

                    <dt>exportCacheSize</dt>
                    <dd>the size of a cache used during export to avoid an excessive number of calls to the database. The cache is dropped after each
                        call to export to ensure that authorization rules are enforced. As the cache is short-lived, modifications to ICAT are
                        unlikely to result in stale information being used from the cache.
                    </dd>

                    <dt>authn.list</dt>
                    <dd>
                        is a space separated set of mnemonics for user to select the plugin in the login call. This must not reference plugins which
                        are not installed as plugins are checked when ICAT performs its initialisation; if plugins are missing ICAT will not start.
                    </dd>
                    <dt>
                        authn.&lt;mnemonic&gt;.jndi
                    </dt>
                    <dd>is the jndi name to locate the plugin. When you installed the plugin a message would have appeared in the server.log stating
                        the JNDI names. For example for authn_db you would expect to see
                        java:global/authn_db.ear-1.0.0/authn_db.ejb-1.0.0/DB_Authenticator. There must be one such entry for each
                        plugin.
                    </dd>
                    <dt>
                        authn.&lt;mnemonic&gt;.hostPort
                    </dt>
                    <dd>
                        is optional. It should only be specified on satellite machines when
                        you have a group of machines working together as
                        described
                        at
                        <a href="#cluster">Installing a group of ICATs</a>
                        and when you want to perform authentication on the central machine.
                        The value takes the form machine:port where the port
                        will
                        normally be 3700.
                    </dd>
                    <dt>notification.list</dt>
                    <dd>is a space separated set of Entity names for which you with to generate notifications. For each one there must be another line
                        saying under what conditions you wish to generate a notification for the entity.
                    </dd>
                    <dt>
                        notification.&lt;entity name&gt; </dt>
                    <dd>a string of letters taken from the set "C", "U" and "D" indicating for which operations (create, update and delete) you wish
                        to be notified for that kind of operation on the entity.
                    </dd>
                    <dt>log.list</dt>
                    <dd>is a space separated set of call logging destinations - currently valid destinations are "table" and "file". For each one
                        there
                        must
                        be another line
                        saying what group of calls you wish to log to that destination.
                    </dd>

                    <dt>log.&lt;destination&gt; </dt>
                    <dd>a string of letters taken from the set "S", "R" and "W" indicating for which group of calls you wish to generate a log entry.
                        "S" denotes session calls (login, refresh and logout); "R" is used for the various read calls and "W" is used for all write
                        calls (create, update and delete).
                    </dd>

                    <dt>log4j.properties</dt>
                    <dd>This is optional. If present it must specify the path to a log4j.properties file. The path may be absolute or relative to
                        the
                        config directory.
                    </dd>

                    <dt>lucene.directory</dt>
                    <dd>This is optional. It is the path to a directory (whose parent must exist) in which to store the lucene index. If this is
                        specified then
                        lucene.commitSeconds and lucene.commitCount must both be specified. If it is omitted and lucene.hostPort is also
                        omitted then lucene indices will not be created and the
                        searchText()
                        call will return nothing.
                    </dd>

                    <dt>lucene.commitSeconds</dt>
                    <dd>the interval in seconds between committing lucene changes to disk and updating the index. If you set it to 300 then
                        searchText() calls will see what was available at some time in the past (up to 5 minutes ago) and which is also currently
                        present.
                    </dd>

                    <dt>lucene.commitCount</dt>
                    <dd>the number of changes to accumulate before committing them to disk. If the number is too high there can be memory
                        problems.
                        Currently this is only used by the call to lucenePopulate.
                    </dd>

                    <dt>lucene.hostPort</dt>
                    <dd>
                        This is optional and if set any other lucene settings will be ignored. It should only be specified on satellite machines when
                        you have a group of machines working together as
                        described at
                        <a href="#cluster">Installing a group of ICATs</a>
                        The value takes the form machine:port where the port
                        will normally be 3700.
                    </dd>
                </dl>

            </subsection>

            <subsection name="Check that ICAT works">
                <p>
                    A small test program,
                    <tt>testicat, </tt>
                    will have been installed for you.
                    This is a python script which requires that the suds client is available. This connects as one of
                    the root users you defined as 'rootUserNames' in
                    the icat.properties file. Invoke the
                    script specifying the url of the machine on
                    which the
                    ICAT service is deployed
                    (something like
                    https://example.com:8181), the
                    mnemonic for the chosen authentication plugin
                    followed by the
                    credentials for one of the root user names
                    supported
                    by that plugin.
                    These
                    credentials should be passed in as pairs of
                    parameters with
                    key followed by value. For example:
                    <code>testicat https://example.com:8181 db username root password secret</code>
                </p>
                <p>It should report:
                </p>
                <blockquote>
                    <code>
                        Logged in as ... with 119.9... minutes to go
                        <br />
                        Login, search, create, delete and logout operations were all successful.
                    </code>
                </blockquote>
                <p>This script can be run at any time as it is almost harmless - it simply creates a "Group" with an unlikely name and removes it
                    again.
                </p>
                <p>In case of problems, first erase the directory /tmp/suds and try the testicat again. If it still fails, look at the log files:
                    server.log and icat.log which can both be found in the logs directory below your domain. Look also at the relevant authenticator
                    log.
                </p>
            </subsection>
        </section>

        <a name="post" />
        <section name="Post-installation work">
            <subsection name="Fresh Install">
                <p>
                    If this is a fresh install then you can use
                    <tt>icat-setup</tt>
                    to add rules to ICAT, then use ice to create a Facility and other high level
                    entities.
                </p>

                <p>
                    If you are using Oracle the type NUMBER(38, 19) will have been used for all floating point numbers. This constrains the values
                    that can be stored - they may be truncated or rejected. To fix this please execute the SQL statements in
                    <tt>fix_floats_oracle.sql</tt>
                </p>
            </subsection>
            <subsection name="Upgrade">
                <p>
                    If you have performed a schema upgrade then you should restore the rules using the
                    <tt>icat-setup</tt>
                    tool. For example:
                </p>

                <blockquote>
                    <code>
                        icat-setup -f rules.authz https://example.com:8181 db username root password secret
                    </code>
                </blockquote>
                <p>This assumes that you are in the directory where ran get_rules.py which will created a file rules.authz. The credentials (keyword
                    value
                    pairs following the authenticator mnemonic) should be those
                    of one of the users specified in the rootUserNames of the
                    icat.properties file.
                </p>
                <p>Please check the rules.authz first as it will not work if it references entities that no longer exist. For example "Group" must be
                    replaced by "Grouping" and InputDatafile is no longer part of ICAT. Also because some problems have been found with conditions
                    containing dots (such as "InvestigationUser [user.name='fred']") in rules these must now be re-expressed without dots.
                </p>
                <p>Finally you should run the icatadmin populate command to populate lucene for all existing data as in the example below:</p>
                <blockquote>
                    <code>
                        icatadmin https://example.com:8181 db username root password secret -- populate --timeout 3600
                    </code>
                </blockquote>
            </subsection>
        </section>

        <a name="performance" />
        <section name="Performance">
            To improve performance:
            <ul>
                <li>Consider creating the indices defined in indices.sql. Indices can make a huge difference to the database performance but there
                    is
                    also a small cost for each index.
                </li>
                <li>Make entities readable by anyone if they contain no sensitive information. This is generally the case for those entities that
                    implement an many-to-many relationship. For example InvestigationUser relates Investigation to User but has no attributes. By
                    making it world readable no access to Investigation or User is granted. An in memory cache of world readable entities is
                    maintained by ICAT.
                </li>
                <li>Add entries to PublicStep to allow the INCLUDE mechanism to be less costly. PublicStep is
                    explained in the ICAT Java
                    Client User
                    Manual. Its contents are also held in an in-memory cache for performance.
                </li>
            </ul>
        </section>

        <a name="icatadmin" />
        <section name="The icatadmin tool">
            <p>
                Administration operations have been added to the ICAT API and are accessible via the icatadmin tool which will have been installed by
                the
                <tt>setup.py</tt>
                script. It should be invoked as:
            </p>
            <blockquote>
                <code>icatadmin &lt;url&gt; &lt;plugin&gt; &lt;credentials&gt;... -- &lt;command&gt; &lt;args&gt;...</code>
            </blockquote>
            <p>to run a single command or</p>
            <blockquote>
                <code>icatadmin &lt;url&gt; &lt;plugin&gt; &lt;credentials&gt;... </code>
            </blockquote>
            <p>
                to be prompted for a series of commands as shown below. In either case if you specify '-' as the password you will be prompted for
                it.
                Note that in the single command case the "--" marker is needed to terminate the list of credentials. For example:
                <blockquote>
                    <code>icatadmin https://example.com:8181 db username root password secret -- properties</code>
                </blockquote>
                . Only users mentioned in the rootUserNames of the icat.properties file are authorized to use this command.
            </p>
            <dl>
                <dt>properties</dt>
                <dd>lists the active contents of the icat.properties file. It does this by examining the properties after they have been read in
                    so any
                    superfluous definitions in the original properties file will not be seen.
                </dd>

                <dt>populate [&lt;entity name&gt;]</dt>
                <dd>
                    re-populates lucene for the specified entity name. This is
                    useful if the database has been modified directly rather than by using
                    the ICAT API. Note that because of caching, ICAT should
                    be
                    reloaded after any direct database modifications are made. This call is
                    asynchronous and simply places the request in a set of
                    entity types to be populated. When the request is processed all lucene
                    entries of the specified entity type are first cleared
                    then the corresponding icat entries are scanned to re-populate lucene. To
                    find what it is doing please use the "populating" operation desribed below.
                    It may also be run without an entity name in which case
                    it will process all entities.
                </dd>

                <dt>populating</dt>
                <dd>returns a list of entity types to be processed for populating lucene. Normally the first
                    item returned
                    will be being processed
                    currently.
                </dd>

                <dt>commit</dt>
                <dd>instructs lucene to update indices. Normally this is not needed as it is will be done periodically according to the value of
                    lucene.commitSeconds
                </dd>

                <dt>clear</dt>
                <dd>clears all the lucene indices - but does not commit.</dd>

                <dt>search &lt;query&gt; [&lt;maxCount&gt; [&lt;entityName&gt;]]</dt>
                <dd>
                    searches lucene indices and returns a list of entity_name:entity_id values. Arguments are
                    <dl>
                        <dt>query</dt>
                        <dd>a lucene query which should be enclosed in quotes if it contains more than one word. Queries can contain AND and OR in
                            upper case as well as parentheses. The default operator is OR. Wildcards of * and ? are also supported. Other features
                            are
                            described in the user documentation for the searchText call.
                        </dd>
                        <dt>maxCount</dt>
                        <dd>maximum number of values to return (defaults to 100)</dd>
                        <dt>entityName</dt>
                        <dd>if specified, this restrict results to entities with this name</dd>
                    </dl>
                </dd>
            </dl>


        </section>
    </body>
</document>
			
