################################################## 
# ICATService_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# client.icat3.uk
##############################

class ns0:
    targetNamespace = "client.icat3.uk"

    class deleteDataSet_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "deleteDataSet")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.deleteDataSet_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="dataSetId", aname="_dataSetId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._dataSetId = None
                    return
            Holder.__name__ = "deleteDataSet_Holder"
            self.pyclass = Holder

    class deleteDataSetResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "deleteDataSetResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.deleteDataSetResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "deleteDataSetResponse_Holder"
            self.pyclass = Holder

    class SessionException_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "SessionException")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SessionException_Def.schema
            TClist = [ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="stackTraceAsString", aname="_stackTraceAsString", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="uniqueId", aname="_uniqueId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    self._stackTraceAsString = None
                    self._uniqueId = None
                    return
            Holder.__name__ = "SessionException_Holder"
            self.pyclass = Holder

    class InsufficientPrivilegesException_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "InsufficientPrivilegesException")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.InsufficientPrivilegesException_Def.schema
            TClist = [ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="stackTraceAsString", aname="_stackTraceAsString", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="uniqueId", aname="_uniqueId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    self._stackTraceAsString = None
                    self._uniqueId = None
                    return
            Holder.__name__ = "InsufficientPrivilegesException_Holder"
            self.pyclass = Holder

    class NoSuchObjectFoundException_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "NoSuchObjectFoundException")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.NoSuchObjectFoundException_Def.schema
            TClist = [ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="stackTraceAsString", aname="_stackTraceAsString", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="uniqueId", aname="_uniqueId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    self._stackTraceAsString = None
                    self._uniqueId = None
                    return
            Holder.__name__ = "NoSuchObjectFoundException_Holder"
            self.pyclass = Holder

    class listDatasetTypes_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "listDatasetTypes")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.listDatasetTypes_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    return
            Holder.__name__ = "listDatasetTypes_Holder"
            self.pyclass = Holder

    class listDatasetTypesResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "listDatasetTypesResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.listDatasetTypesResponse_Def.schema
            TClist = [ZSI.TC.String(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "listDatasetTypesResponse_Holder"
            self.pyclass = Holder

    class getDatafiles_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getDatafiles")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getDatafiles_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="datafileIds", aname="_datafileIds", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._datafileIds = []
                    return
            Holder.__name__ = "getDatafiles_Holder"
            self.pyclass = Holder

    class getDatafilesResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getDatafilesResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getDatafilesResponse_Def.schema
            TClist = [GTD("client.icat3.uk","datafile",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getDatafilesResponse_Holder"
            self.pyclass = Holder

    class datafile_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "client.icat3.uk"
        type = (schema, "datafile")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.datafile_Def.schema
            TClist = [ZSI.TC.String(pname="checksum", aname="_checksum", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="command", aname="_command", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="datafileCreateTime", aname="_datafileCreateTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","datafileFormat",lazy=False)(pname="datafileFormat", aname="_datafileFormat", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","datafileInclude",lazy=False)(pname="datafileInclude", aname="_datafileInclude", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="datafileModifyTime", aname="_datafileModifyTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","datafileParameter",lazy=False)(pname="datafileParameterCollection", aname="_datafileParameterCollection", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="datafileVersion", aname="_datafileVersion", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="datafileVersionComment", aname="_datafileVersionComment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="datasetId", aname="_datasetId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="fileSize", aname="_fileSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="id", aname="_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="location", aname="_location", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","relatedDatafiles",lazy=False)(pname="relatedDatafilesCollection1", aname="_relatedDatafilesCollection1", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","relatedDatafiles",lazy=False)(pname="relatedDatafilesCollection", aname="_relatedDatafilesCollection", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="signature", aname="_signature", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.entityBaseBean_Def not in ns0.datafile_Def.__bases__:
                bases = list(ns0.datafile_Def.__bases__)
                bases.insert(0, ns0.entityBaseBean_Def)
                ns0.datafile_Def.__bases__ = tuple(bases)

            ns0.entityBaseBean_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class entityBaseBean_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "entityBaseBean")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.entityBaseBean_Def.schema
            TClist = [ZSI.TC.Boolean(pname="facilityAcquiredData", aname="_facilityAcquiredData", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","icatRole",lazy=False)(pname="icatRole", aname="_icatRole", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="selected", aname="_selected", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="uniqueId", aname="_uniqueId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._facilityAcquiredData = None
                    self._icatRole = None
                    self._selected = None
                    self._uniqueId = None
                    return
            Holder.__name__ = "entityBaseBean_Holder"
            self.pyclass = Holder

    class datafileFormat_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "client.icat3.uk"
        type = (schema, "datafileFormat")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.datafileFormat_Def.schema
            TClist = [GTD("client.icat3.uk","datafileFormatPK",lazy=False)(pname="datafileFormatPK", aname="_datafileFormatPK", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="formatType", aname="_formatType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.entityBaseBean_Def not in ns0.datafileFormat_Def.__bases__:
                bases = list(ns0.datafileFormat_Def.__bases__)
                bases.insert(0, ns0.entityBaseBean_Def)
                ns0.datafileFormat_Def.__bases__ = tuple(bases)

            ns0.entityBaseBean_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class datafileFormatPK_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "client.icat3.uk"
        type = (schema, "datafileFormatPK")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.datafileFormatPK_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="version", aname="_version", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.entityPrimaryKeyBaseBean_Def not in ns0.datafileFormatPK_Def.__bases__:
                bases = list(ns0.datafileFormatPK_Def.__bases__)
                bases.insert(0, ns0.entityPrimaryKeyBaseBean_Def)
                ns0.datafileFormatPK_Def.__bases__ = tuple(bases)

            ns0.entityPrimaryKeyBaseBean_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class entityPrimaryKeyBaseBean_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "entityPrimaryKeyBaseBean")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.entityPrimaryKeyBaseBean_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "entityPrimaryKeyBaseBean_Holder"
            self.pyclass = Holder

    class icatRole_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "client.icat3.uk"
        type = (schema, "icatRole")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.icatRole_Def.schema
            TClist = [ZSI.TC.Boolean(pname="actionDelete", aname="_actionDelete", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="actionDownload", aname="_actionDownload", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="actionFacilityAcquired", aname="_actionFacilityAcquired", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="actionInsert", aname="_actionInsert", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="actionManageUsers", aname="_actionManageUsers", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="actionRemove", aname="_actionRemove", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="actionRootInsert", aname="_actionRootInsert", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="actionRootRemove", aname="_actionRootRemove", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="actionSelect", aname="_actionSelect", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="actionUpdate", aname="_actionUpdate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="role", aname="_role", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.entityBaseBean_Def not in ns0.icatRole_Def.__bases__:
                bases = list(ns0.icatRole_Def.__bases__)
                bases.insert(0, ns0.entityBaseBean_Def)
                ns0.icatRole_Def.__bases__ = tuple(bases)

            ns0.entityBaseBean_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class datafileParameter_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "client.icat3.uk"
        type = (schema, "datafileParameter")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.datafileParameter_Def.schema
            TClist = [GTD("client.icat3.uk","datafileParameterPK",lazy=False)(pname="datafileParameterPK", aname="_datafileParameterPK", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="error", aname="_error", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="numeric", aname="_numeric", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="numericValue", aname="_numericValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rangeBottom", aname="_rangeBottom", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rangeTop", aname="_rangeTop", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="stringValue", aname="_stringValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.entityBaseBean_Def not in ns0.datafileParameter_Def.__bases__:
                bases = list(ns0.datafileParameter_Def.__bases__)
                bases.insert(0, ns0.entityBaseBean_Def)
                ns0.datafileParameter_Def.__bases__ = tuple(bases)

            ns0.entityBaseBean_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class datafileParameterPK_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "client.icat3.uk"
        type = (schema, "datafileParameterPK")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.datafileParameterPK_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="datafileId", aname="_datafileId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="units", aname="_units", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.entityPrimaryKeyBaseBean_Def not in ns0.datafileParameterPK_Def.__bases__:
                bases = list(ns0.datafileParameterPK_Def.__bases__)
                bases.insert(0, ns0.entityPrimaryKeyBaseBean_Def)
                ns0.datafileParameterPK_Def.__bases__ = tuple(bases)

            ns0.entityPrimaryKeyBaseBean_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class relatedDatafiles_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "client.icat3.uk"
        type = (schema, "relatedDatafiles")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.relatedDatafiles_Def.schema
            TClist = [GTD("client.icat3.uk","relatedDatafilesPK",lazy=False)(pname="relatedDatafilesPK", aname="_relatedDatafilesPK", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="relation", aname="_relation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.entityBaseBean_Def not in ns0.relatedDatafiles_Def.__bases__:
                bases = list(ns0.relatedDatafiles_Def.__bases__)
                bases.insert(0, ns0.entityBaseBean_Def)
                ns0.relatedDatafiles_Def.__bases__ = tuple(bases)

            ns0.entityBaseBean_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class relatedDatafilesPK_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "client.icat3.uk"
        type = (schema, "relatedDatafilesPK")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.relatedDatafilesPK_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="destDatafileId", aname="_destDatafileId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="sourceDatafileId", aname="_sourceDatafileId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.entityPrimaryKeyBaseBean_Def not in ns0.relatedDatafilesPK_Def.__bases__:
                bases = list(ns0.relatedDatafilesPK_Def.__bases__)
                bases.insert(0, ns0.entityPrimaryKeyBaseBean_Def)
                ns0.relatedDatafilesPK_Def.__bases__ = tuple(bases)

            ns0.entityPrimaryKeyBaseBean_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class searchSamplesBySampleName_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "searchSamplesBySampleName")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.searchSamplesBySampleName_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sampleName", aname="_sampleName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._sampleName = None
                    return
            Holder.__name__ = "searchSamplesBySampleName_Holder"
            self.pyclass = Holder

    class searchSamplesBySampleNameResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "searchSamplesBySampleNameResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.searchSamplesBySampleNameResponse_Def.schema
            TClist = [GTD("client.icat3.uk","sample",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "searchSamplesBySampleNameResponse_Holder"
            self.pyclass = Holder

    class sample_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "client.icat3.uk"
        type = (schema, "sample")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.sample_Def.schema
            TClist = [ZSI.TC.String(pname="chemicalFormula", aname="_chemicalFormula", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="id", aname="_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="instance", aname="_instance", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="proposalSampleId", aname="_proposalSampleId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="safetyInformation", aname="_safetyInformation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","sampleParameter",lazy=False)(pname="sampleParameterCollection", aname="_sampleParameterCollection", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.entityBaseBean_Def not in ns0.sample_Def.__bases__:
                bases = list(ns0.sample_Def.__bases__)
                bases.insert(0, ns0.entityBaseBean_Def)
                ns0.sample_Def.__bases__ = tuple(bases)

            ns0.entityBaseBean_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class sampleParameter_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "client.icat3.uk"
        type = (schema, "sampleParameter")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.sampleParameter_Def.schema
            TClist = [ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="error", aname="_error", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="numeric", aname="_numeric", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="numericValue", aname="_numericValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rangeBottom", aname="_rangeBottom", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rangeTop", aname="_rangeTop", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","sampleParameterPK",lazy=False)(pname="sampleParameterPK", aname="_sampleParameterPK", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="stringValue", aname="_stringValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.entityBaseBean_Def not in ns0.sampleParameter_Def.__bases__:
                bases = list(ns0.sampleParameter_Def.__bases__)
                bases.insert(0, ns0.entityBaseBean_Def)
                ns0.sampleParameter_Def.__bases__ = tuple(bases)

            ns0.entityBaseBean_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class sampleParameterPK_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "client.icat3.uk"
        type = (schema, "sampleParameterPK")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.sampleParameterPK_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="sampleId", aname="_sampleId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="units", aname="_units", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.entityPrimaryKeyBaseBean_Def not in ns0.sampleParameterPK_Def.__bases__:
                bases = list(ns0.sampleParameterPK_Def.__bases__)
                bases.insert(0, ns0.entityPrimaryKeyBaseBean_Def)
                ns0.sampleParameterPK_Def.__bases__ = tuple(bases)

            ns0.entityPrimaryKeyBaseBean_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class deleteInvestigator_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "deleteInvestigator")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.deleteInvestigator_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","investigatorPK",lazy=False)(pname="investigatorPK", aname="_investigatorPK", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._investigatorPK = None
                    return
            Holder.__name__ = "deleteInvestigator_Holder"
            self.pyclass = Holder

    class investigatorPK_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "client.icat3.uk"
        type = (schema, "investigatorPK")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.investigatorPK_Def.schema
            TClist = [ZSI.TC.String(pname="facilityUserId", aname="_facilityUserId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="investigationId", aname="_investigationId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.entityPrimaryKeyBaseBean_Def not in ns0.investigatorPK_Def.__bases__:
                bases = list(ns0.investigatorPK_Def.__bases__)
                bases.insert(0, ns0.entityPrimaryKeyBaseBean_Def)
                ns0.investigatorPK_Def.__bases__ = tuple(bases)

            ns0.entityPrimaryKeyBaseBean_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class deleteInvestigatorResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "deleteInvestigatorResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.deleteInvestigatorResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "deleteInvestigatorResponse_Holder"
            self.pyclass = Holder

    class removeSample_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "removeSample")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removeSample_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="sampleId", aname="_sampleId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._sampleId = None
                    return
            Holder.__name__ = "removeSample_Holder"
            self.pyclass = Holder

    class removeSampleResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "removeSampleResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removeSampleResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "removeSampleResponse_Holder"
            self.pyclass = Holder

    class listInstruments_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "listInstruments")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.listInstruments_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    return
            Holder.__name__ = "listInstruments_Holder"
            self.pyclass = Holder

    class listInstrumentsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "listInstrumentsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.listInstrumentsResponse_Def.schema
            TClist = [ZSI.TC.String(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "listInstrumentsResponse_Holder"
            self.pyclass = Holder

    class addInvestigator_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "addInvestigator")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.addInvestigator_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","investigator",lazy=False)(pname="investigator", aname="_investigator", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="investigationId", aname="_investigationId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._investigator = None
                    self._investigationId = None
                    return
            Holder.__name__ = "addInvestigator_Holder"
            self.pyclass = Holder

    class investigator_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "client.icat3.uk"
        type = (schema, "investigator")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.investigator_Def.schema
            TClist = [GTD("client.icat3.uk","facilityUser",lazy=False)(pname="facilityUser", aname="_facilityUser", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","investigatorPK",lazy=False)(pname="investigatorPK", aname="_investigatorPK", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="role", aname="_role", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.entityBaseBean_Def not in ns0.investigator_Def.__bases__:
                bases = list(ns0.investigator_Def.__bases__)
                bases.insert(0, ns0.entityBaseBean_Def)
                ns0.investigator_Def.__bases__ = tuple(bases)

            ns0.entityBaseBean_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class facilityUser_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "client.icat3.uk"
        type = (schema, "facilityUser")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.facilityUser_Def.schema
            TClist = [ZSI.TC.String(pname="facilityUserId", aname="_facilityUserId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="federalId", aname="_federalId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="firstName", aname="_firstName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="initials", aname="_initials", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lastName", aname="_lastName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="middleName", aname="_middleName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="title", aname="_title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.entityBaseBean_Def not in ns0.facilityUser_Def.__bases__:
                bases = list(ns0.facilityUser_Def.__bases__)
                bases.insert(0, ns0.entityBaseBean_Def)
                ns0.facilityUser_Def.__bases__ = tuple(bases)

            ns0.entityBaseBean_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class addInvestigatorResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "addInvestigatorResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.addInvestigatorResponse_Def.schema
            TClist = [GTD("client.icat3.uk","investigator",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "addInvestigatorResponse_Holder"
            self.pyclass = Holder

    class ValidationException_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "ValidationException")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ValidationException_Def.schema
            TClist = [ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="stackTraceAsString", aname="_stackTraceAsString", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="uniqueId", aname="_uniqueId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    self._stackTraceAsString = None
                    self._uniqueId = None
                    return
            Holder.__name__ = "ValidationException_Holder"
            self.pyclass = Holder

    class createDataSet_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "createDataSet")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.createDataSet_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","dataset",lazy=False)(pname="dataSet", aname="_dataSet", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="investigationId", aname="_investigationId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._dataSet = None
                    self._investigationId = None
                    return
            Holder.__name__ = "createDataSet_Holder"
            self.pyclass = Holder

    class dataset_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "client.icat3.uk"
        type = (schema, "dataset")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.dataset_Def.schema
            TClist = [GTD("client.icat3.uk","datafile",lazy=False)(pname="datafileCollection", aname="_datafileCollection", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","datasetParameter",lazy=False)(pname="datasetParameterCollection", aname="_datasetParameterCollection", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="datasetStatus", aname="_datasetStatus", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="datasetType", aname="_datasetType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="id", aname="_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="investigationId", aname="_investigationId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="sampleId", aname="_sampleId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.entityBaseBean_Def not in ns0.dataset_Def.__bases__:
                bases = list(ns0.dataset_Def.__bases__)
                bases.insert(0, ns0.entityBaseBean_Def)
                ns0.dataset_Def.__bases__ = tuple(bases)

            ns0.entityBaseBean_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class datasetParameter_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "client.icat3.uk"
        type = (schema, "datasetParameter")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.datasetParameter_Def.schema
            TClist = [GTD("client.icat3.uk","datasetParameterPK",lazy=False)(pname="datasetParameterPK", aname="_datasetParameterPK", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="error", aname="_error", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="numeric", aname="_numeric", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="numericValue", aname="_numericValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","parameter",lazy=False)(pname="parameter", aname="_parameter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rangeBottom", aname="_rangeBottom", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rangeTop", aname="_rangeTop", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="stringValue", aname="_stringValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.entityBaseBean_Def not in ns0.datasetParameter_Def.__bases__:
                bases = list(ns0.datasetParameter_Def.__bases__)
                bases.insert(0, ns0.entityBaseBean_Def)
                ns0.datasetParameter_Def.__bases__ = tuple(bases)

            ns0.entityBaseBean_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class datasetParameterPK_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "client.icat3.uk"
        type = (schema, "datasetParameterPK")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.datasetParameterPK_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="datasetId", aname="_datasetId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="units", aname="_units", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.entityPrimaryKeyBaseBean_Def not in ns0.datasetParameterPK_Def.__bases__:
                bases = list(ns0.datasetParameterPK_Def.__bases__)
                bases.insert(0, ns0.entityPrimaryKeyBaseBean_Def)
                ns0.datasetParameterPK_Def.__bases__ = tuple(bases)

            ns0.entityPrimaryKeyBaseBean_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class parameter_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "client.icat3.uk"
        type = (schema, "parameter")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.parameter_Def.schema
            TClist = [ZSI.TC.Boolean(pname="datafileParameter", aname="_datafileParameter", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nonNumericValueFormat", aname="_nonNumericValueFormat", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="numeric", aname="_numeric", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="numericValue", aname="_numericValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","parameterPK",lazy=False)(pname="parameterPK", aname="_parameterPK", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="sampleParameter", aname="_sampleParameter", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="searchable", aname="_searchable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="unitsLongVersion", aname="_unitsLongVersion", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="verified", aname="_verified", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.entityBaseBean_Def not in ns0.parameter_Def.__bases__:
                bases = list(ns0.parameter_Def.__bases__)
                bases.insert(0, ns0.entityBaseBean_Def)
                ns0.parameter_Def.__bases__ = tuple(bases)

            ns0.entityBaseBean_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class parameterPK_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "client.icat3.uk"
        type = (schema, "parameterPK")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.parameterPK_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="units", aname="_units", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.entityPrimaryKeyBaseBean_Def not in ns0.parameterPK_Def.__bases__:
                bases = list(ns0.parameterPK_Def.__bases__)
                bases.insert(0, ns0.entityPrimaryKeyBaseBean_Def)
                ns0.parameterPK_Def.__bases__ = tuple(bases)

            ns0.entityPrimaryKeyBaseBean_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class createDataSetResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "createDataSetResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.createDataSetResponse_Def.schema
            TClist = [GTD("client.icat3.uk","dataset",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "createDataSetResponse_Holder"
            self.pyclass = Holder

    class createDataFile_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "createDataFile")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.createDataFile_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","datafile",lazy=False)(pname="dataFile", aname="_dataFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="datasetId", aname="_datasetId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._dataFile = None
                    self._datasetId = None
                    return
            Holder.__name__ = "createDataFile_Holder"
            self.pyclass = Holder

    class createDataFileResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "createDataFileResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.createDataFileResponse_Def.schema
            TClist = [GTD("client.icat3.uk","datafile",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "createDataFileResponse_Holder"
            self.pyclass = Holder

    class modifySample_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "modifySample")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.modifySample_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","sample",lazy=False)(pname="sample", aname="_sample", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._sample = None
                    return
            Holder.__name__ = "modifySample_Holder"
            self.pyclass = Holder

    class modifySampleResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "modifySampleResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.modifySampleResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "modifySampleResponse_Holder"
            self.pyclass = Holder

    class setDataSetSample_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "setDataSetSample")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.setDataSetSample_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="sampleId", aname="_sampleId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="datafileId", aname="_datafileId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._sampleId = None
                    self._datafileId = None
                    return
            Holder.__name__ = "setDataSetSample_Holder"
            self.pyclass = Holder

    class setDataSetSampleResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "setDataSetSampleResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.setDataSetSampleResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "setDataSetSampleResponse_Holder"
            self.pyclass = Holder

    class deleteDataSetParameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "deleteDataSetParameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.deleteDataSetParameter_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","datasetParameterPK",lazy=False)(pname="datasetParameterPK", aname="_datasetParameterPK", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._datasetParameterPK = None
                    return
            Holder.__name__ = "deleteDataSetParameter_Holder"
            self.pyclass = Holder

    class deleteDataSetParameterResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "deleteDataSetParameterResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.deleteDataSetParameterResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "deleteDataSetParameterResponse_Holder"
            self.pyclass = Holder

    class removeSampleParameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "removeSampleParameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removeSampleParameter_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","sampleParameterPK",lazy=False)(pname="sampleParameterPK", aname="_sampleParameterPK", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._sampleParameterPK = None
                    return
            Holder.__name__ = "removeSampleParameter_Holder"
            self.pyclass = Holder

    class removeSampleParameterResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "removeSampleParameterResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removeSampleParameterResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "removeSampleParameterResponse_Holder"
            self.pyclass = Holder

    class downloadDatafile_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "downloadDatafile")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.downloadDatafile_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="datafileId", aname="_datafileId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._datafileId = None
                    return
            Holder.__name__ = "downloadDatafile_Holder"
            self.pyclass = Holder

    class downloadDatafileResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "downloadDatafileResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.downloadDatafileResponse_Def.schema
            TClist = [ZSI.TC.String(pname="URL", aname="_URL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._URL = None
                    return
            Holder.__name__ = "downloadDatafileResponse_Holder"
            self.pyclass = Holder

    class getKeywordsForUserType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getKeywordsForUserType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getKeywordsForUserType_Def.schema
            TClist = [ZSI.TC.String(pname="arg0", aname="_arg0", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","keywordType",lazy=False)(pname="arg1", aname="_arg1", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._arg0 = None
                    self._arg1 = None
                    return
            Holder.__name__ = "getKeywordsForUserType_Holder"
            self.pyclass = Holder

    class getKeywordsForUserTypeResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getKeywordsForUserTypeResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getKeywordsForUserTypeResponse_Def.schema
            TClist = [ZSI.TC.String(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getKeywordsForUserTypeResponse_Holder"
            self.pyclass = Holder

    class getKeywordsForUserMax_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getKeywordsForUserMax")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getKeywordsForUserMax_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="numberReturned", aname="_numberReturned", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._numberReturned = None
                    return
            Holder.__name__ = "getKeywordsForUserMax_Holder"
            self.pyclass = Holder

    class getKeywordsForUserMaxResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getKeywordsForUserMaxResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getKeywordsForUserMaxResponse_Def.schema
            TClist = [ZSI.TC.String(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getKeywordsForUserMaxResponse_Holder"
            self.pyclass = Holder

    class getKeywordsForUserStartWithMax_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getKeywordsForUserStartWithMax")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getKeywordsForUserStartWithMax_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="startKeyword", aname="_startKeyword", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="numberReturned", aname="_numberReturned", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._startKeyword = None
                    self._numberReturned = None
                    return
            Holder.__name__ = "getKeywordsForUserStartWithMax_Holder"
            self.pyclass = Holder

    class getKeywordsForUserStartWithMaxResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getKeywordsForUserStartWithMaxResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getKeywordsForUserStartWithMaxResponse_Def.schema
            TClist = [ZSI.TC.String(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getKeywordsForUserStartWithMaxResponse_Holder"
            self.pyclass = Holder

    class getKeywordsForUser_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getKeywordsForUser")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getKeywordsForUser_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    return
            Holder.__name__ = "getKeywordsForUser_Holder"
            self.pyclass = Holder

    class getKeywordsForUserResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getKeywordsForUserResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getKeywordsForUserResponse_Def.schema
            TClist = [ZSI.TC.String(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getKeywordsForUserResponse_Holder"
            self.pyclass = Holder

    class removeDataFile_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "removeDataFile")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removeDataFile_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="datafileId", aname="_datafileId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._datafileId = None
                    return
            Holder.__name__ = "removeDataFile_Holder"
            self.pyclass = Holder

    class removeDataFileResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "removeDataFileResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removeDataFileResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "removeDataFileResponse_Holder"
            self.pyclass = Holder

    class listInvestigationTypes_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "listInvestigationTypes")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.listInvestigationTypes_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    return
            Holder.__name__ = "listInvestigationTypes_Holder"
            self.pyclass = Holder

    class listInvestigationTypesResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "listInvestigationTypesResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.listInvestigationTypesResponse_Def.schema
            TClist = [ZSI.TC.String(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "listInvestigationTypesResponse_Holder"
            self.pyclass = Holder

    class modifyDataSetParameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "modifyDataSetParameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.modifyDataSetParameter_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","datasetParameter",lazy=False)(pname="dataSetParameter", aname="_dataSetParameter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._dataSetParameter = None
                    return
            Holder.__name__ = "modifyDataSetParameter_Holder"
            self.pyclass = Holder

    class modifyDataSetParameterResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "modifyDataSetParameterResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.modifyDataSetParameterResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "modifyDataSetParameterResponse_Holder"
            self.pyclass = Holder

    class removeDataSet_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "removeDataSet")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removeDataSet_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="dataSetId", aname="_dataSetId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._dataSetId = None
                    return
            Holder.__name__ = "removeDataSet_Holder"
            self.pyclass = Holder

    class removeDataSetResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "removeDataSetResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removeDataSetResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "removeDataSetResponse_Holder"
            self.pyclass = Holder

    class removeAuthorisation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "removeAuthorisation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removeAuthorisation_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="authorisationId", aname="_authorisationId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._authorisationId = None
                    return
            Holder.__name__ = "removeAuthorisation_Holder"
            self.pyclass = Holder

    class removeAuthorisationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "removeAuthorisationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removeAuthorisationResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "removeAuthorisationResponse_Holder"
            self.pyclass = Holder

    class addDataFileParameters_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "addDataFileParameters")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.addDataFileParameters_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","datafileParameter",lazy=False)(pname="dataFileParameters", aname="_dataFileParameters", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="datafileId", aname="_datafileId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._dataFileParameters = []
                    self._datafileId = None
                    return
            Holder.__name__ = "addDataFileParameters_Holder"
            self.pyclass = Holder

    class addDataFileParametersResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "addDataFileParametersResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.addDataFileParametersResponse_Def.schema
            TClist = [GTD("client.icat3.uk","datafileParameter",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "addDataFileParametersResponse_Holder"
            self.pyclass = Holder

    class addKeyword_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "addKeyword")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.addKeyword_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","keyword",lazy=False)(pname="keyword", aname="_keyword", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="investigationId", aname="_investigationId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._keyword = None
                    self._investigationId = None
                    return
            Holder.__name__ = "addKeyword_Holder"
            self.pyclass = Holder

    class keyword_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "client.icat3.uk"
        type = (schema, "keyword")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.keyword_Def.schema
            TClist = [GTD("client.icat3.uk","keywordPK",lazy=False)(pname="keywordPK", aname="_keywordPK", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.entityBaseBean_Def not in ns0.keyword_Def.__bases__:
                bases = list(ns0.keyword_Def.__bases__)
                bases.insert(0, ns0.entityBaseBean_Def)
                ns0.keyword_Def.__bases__ = tuple(bases)

            ns0.entityBaseBean_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class keywordPK_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "client.icat3.uk"
        type = (schema, "keywordPK")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.keywordPK_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="investigationId", aname="_investigationId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.entityPrimaryKeyBaseBean_Def not in ns0.keywordPK_Def.__bases__:
                bases = list(ns0.keywordPK_Def.__bases__)
                bases.insert(0, ns0.entityPrimaryKeyBaseBean_Def)
                ns0.keywordPK_Def.__bases__ = tuple(bases)

            ns0.entityPrimaryKeyBaseBean_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class addKeywordResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "addKeywordResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.addKeywordResponse_Def.schema
            TClist = [GTD("client.icat3.uk","keyword",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "addKeywordResponse_Holder"
            self.pyclass = Holder

    class getAuthorisations_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getAuthorisations")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getAuthorisations_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="elementId", aname="_elementId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","elementType",lazy=False)(pname="elementType", aname="_elementType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._elementId = None
                    self._elementType = None
                    return
            Holder.__name__ = "getAuthorisations_Holder"
            self.pyclass = Holder

    class getAuthorisationsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getAuthorisationsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getAuthorisationsResponse_Def.schema
            TClist = [GTD("client.icat3.uk","icatAuthorisation",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getAuthorisationsResponse_Holder"
            self.pyclass = Holder

    class icatAuthorisation_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "client.icat3.uk"
        type = (schema, "icatAuthorisation")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.icatAuthorisation_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="elementId", aname="_elementId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","elementType",lazy=False)(pname="elementType", aname="_elementType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="id", aname="_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","icatRole",lazy=False)(pname="role", aname="_role", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="userChildRecord", aname="_userChildRecord", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="userId", aname="_userId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.entityBaseBean_Def not in ns0.icatAuthorisation_Def.__bases__:
                bases = list(ns0.icatAuthorisation_Def.__bases__)
                bases.insert(0, ns0.entityBaseBean_Def)
                ns0.icatAuthorisation_Def.__bases__ = tuple(bases)

            ns0.entityBaseBean_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class logout_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "logout")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.logout_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    return
            Holder.__name__ = "logout_Holder"
            self.pyclass = Holder

    class logoutResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "logoutResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.logoutResponse_Def.schema
            TClist = [ZSI.TC.Boolean(pname="return", aname="_return", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "logoutResponse_Holder"
            self.pyclass = Holder

    class modifyInvestigation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "modifyInvestigation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.modifyInvestigation_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","investigation",lazy=False)(pname="investigaion", aname="_investigaion", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._investigaion = None
                    return
            Holder.__name__ = "modifyInvestigation_Holder"
            self.pyclass = Holder

    class investigation_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "client.icat3.uk"
        type = (schema, "investigation")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.investigation_Def.schema
            TClist = [ZSI.TC.String(pname="bcatInvStr", aname="_bcatInvStr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","dataset",lazy=False)(pname="datasetCollection", aname="_datasetCollection", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="facility", aname="_facility", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","facilityCycle",lazy=False)(pname="facilityCycle", aname="_facilityCycle", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="grantId", aname="_grantId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="id", aname="_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="instrument", aname="_instrument", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="invAbstract", aname="_invAbstract", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="invEndDate", aname="_invEndDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="invNumber", aname="_invNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="invParamName", aname="_invParamName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="invParamValue", aname="_invParamValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="invStartDate", aname="_invStartDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="invType", aname="_invType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","investigator",lazy=False)(pname="investigatorCollection", aname="_investigatorCollection", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","keyword",lazy=False)(pname="keywordCollection", aname="_keywordCollection", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="prevInvNumber", aname="_prevInvNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","publication",lazy=False)(pname="publicationCollection", aname="_publicationCollection", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="releaseDate", aname="_releaseDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","sample",lazy=False)(pname="sampleCollection", aname="_sampleCollection", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","shift",lazy=False)(pname="shiftCollection", aname="_shiftCollection", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="title", aname="_title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="visitId", aname="_visitId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.entityBaseBean_Def not in ns0.investigation_Def.__bases__:
                bases = list(ns0.investigation_Def.__bases__)
                bases.insert(0, ns0.entityBaseBean_Def)
                ns0.investigation_Def.__bases__ = tuple(bases)

            ns0.entityBaseBean_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class facilityCycle_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "client.icat3.uk"
        type = (schema, "facilityCycle")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.facilityCycle_Def.schema
            TClist = [ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="finishDate", aname="_finishDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="startDate", aname="_startDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.entityBaseBean_Def not in ns0.facilityCycle_Def.__bases__:
                bases = list(ns0.facilityCycle_Def.__bases__)
                bases.insert(0, ns0.entityBaseBean_Def)
                ns0.facilityCycle_Def.__bases__ = tuple(bases)

            ns0.entityBaseBean_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class publication_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "client.icat3.uk"
        type = (schema, "publication")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.publication_Def.schema
            TClist = [ZSI.TC.String(pname="fullReference", aname="_fullReference", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="id", aname="_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="repository", aname="_repository", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="repositoryId", aname="_repositoryId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="url", aname="_url", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.entityBaseBean_Def not in ns0.publication_Def.__bases__:
                bases = list(ns0.publication_Def.__bases__)
                bases.insert(0, ns0.entityBaseBean_Def)
                ns0.publication_Def.__bases__ = tuple(bases)

            ns0.entityBaseBean_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class shift_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "client.icat3.uk"
        type = (schema, "shift")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.shift_Def.schema
            TClist = [ZSI.TC.String(pname="shiftComment", aname="_shiftComment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","shiftPK",lazy=False)(pname="shiftPK", aname="_shiftPK", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.entityBaseBean_Def not in ns0.shift_Def.__bases__:
                bases = list(ns0.shift_Def.__bases__)
                bases.insert(0, ns0.entityBaseBean_Def)
                ns0.shift_Def.__bases__ = tuple(bases)

            ns0.entityBaseBean_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class shiftPK_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "client.icat3.uk"
        type = (schema, "shiftPK")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.shiftPK_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname="endDate", aname="_endDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="investigationId", aname="_investigationId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="startDate", aname="_startDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.entityPrimaryKeyBaseBean_Def not in ns0.shiftPK_Def.__bases__:
                bases = list(ns0.shiftPK_Def.__bases__)
                bases.insert(0, ns0.entityPrimaryKeyBaseBean_Def)
                ns0.shiftPK_Def.__bases__ = tuple(bases)

            ns0.entityPrimaryKeyBaseBean_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class modifyInvestigationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "modifyInvestigationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.modifyInvestigationResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "modifyInvestigationResponse_Holder"
            self.pyclass = Holder

    class listDatasetStatus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "listDatasetStatus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.listDatasetStatus_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    return
            Holder.__name__ = "listDatasetStatus_Holder"
            self.pyclass = Holder

    class listDatasetStatusResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "listDatasetStatusResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.listDatasetStatusResponse_Def.schema
            TClist = [ZSI.TC.String(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "listDatasetStatusResponse_Holder"
            self.pyclass = Holder

    class downloadDataset_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "downloadDataset")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.downloadDataset_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="datasetId", aname="_datasetId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._datasetId = None
                    return
            Holder.__name__ = "downloadDataset_Holder"
            self.pyclass = Holder

    class downloadDatasetResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "downloadDatasetResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.downloadDatasetResponse_Def.schema
            TClist = [ZSI.TC.String(pname="URL", aname="_URL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._URL = None
                    return
            Holder.__name__ = "downloadDatasetResponse_Holder"
            self.pyclass = Holder

    class deleteSample_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "deleteSample")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.deleteSample_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="sampleId", aname="_sampleId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._sampleId = None
                    return
            Holder.__name__ = "deleteSample_Holder"
            self.pyclass = Holder

    class deleteSampleResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "deleteSampleResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.deleteSampleResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "deleteSampleResponse_Holder"
            self.pyclass = Holder

    class removeInvestigator_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "removeInvestigator")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removeInvestigator_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","investigatorPK",lazy=False)(pname="investigatorPK", aname="_investigatorPK", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._investigatorPK = None
                    return
            Holder.__name__ = "removeInvestigator_Holder"
            self.pyclass = Holder

    class removeInvestigatorResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "removeInvestigatorResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removeInvestigatorResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "removeInvestigatorResponse_Holder"
            self.pyclass = Holder

    class removeInvestigation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "removeInvestigation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removeInvestigation_Def.schema
            TClist = [ZSI.TC.String(pname="arg0", aname="_arg0", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="arg1", aname="_arg1", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._arg0 = None
                    self._arg1 = None
                    return
            Holder.__name__ = "removeInvestigation_Holder"
            self.pyclass = Holder

    class removeInvestigationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "removeInvestigationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removeInvestigationResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "removeInvestigationResponse_Holder"
            self.pyclass = Holder

    class addDataSetParameters_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "addDataSetParameters")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.addDataSetParameters_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","datasetParameter",lazy=False)(pname="dataSetParameters", aname="_dataSetParameters", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="datasetId", aname="_datasetId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._dataSetParameters = []
                    self._datasetId = None
                    return
            Holder.__name__ = "addDataSetParameters_Holder"
            self.pyclass = Holder

    class addDataSetParametersResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "addDataSetParametersResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.addDataSetParametersResponse_Def.schema
            TClist = [GTD("client.icat3.uk","datasetParameter",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "addDataSetParametersResponse_Holder"
            self.pyclass = Holder

    class removeKeyword_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "removeKeyword")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removeKeyword_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","keywordPK",lazy=False)(pname="keywordPK", aname="_keywordPK", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._keywordPK = None
                    return
            Holder.__name__ = "removeKeyword_Holder"
            self.pyclass = Holder

    class removeKeywordResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "removeKeywordResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removeKeywordResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "removeKeywordResponse_Holder"
            self.pyclass = Holder

    class deleteKeyword_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "deleteKeyword")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.deleteKeyword_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","keywordPK",lazy=False)(pname="keywordPK", aname="_keywordPK", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._keywordPK = None
                    return
            Holder.__name__ = "deleteKeyword_Holder"
            self.pyclass = Holder

    class deleteKeywordResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "deleteKeywordResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.deleteKeywordResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "deleteKeywordResponse_Holder"
            self.pyclass = Holder

    class searchByRunNumberPagination_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "searchByRunNumberPagination")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.searchByRunNumberPagination_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="instruments", aname="_instruments", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname="startRun", aname="_startRun", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname="endRun", aname="_endRun", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="startIndex", aname="_startIndex", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="number_results", aname="_number_results", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._instruments = []
                    self._startRun = None
                    self._endRun = None
                    self._startIndex = None
                    self._number_results = None
                    return
            Holder.__name__ = "searchByRunNumberPagination_Holder"
            self.pyclass = Holder

    class searchByRunNumberPaginationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "searchByRunNumberPaginationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.searchByRunNumberPaginationResponse_Def.schema
            TClist = [GTD("client.icat3.uk","datafile",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "searchByRunNumberPaginationResponse_Holder"
            self.pyclass = Holder

    class searchByRunNumber_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "searchByRunNumber")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.searchByRunNumber_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="instruments", aname="_instruments", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname="startRun", aname="_startRun", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname="endRun", aname="_endRun", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._instruments = []
                    self._startRun = None
                    self._endRun = None
                    return
            Holder.__name__ = "searchByRunNumber_Holder"
            self.pyclass = Holder

    class searchByRunNumberResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "searchByRunNumberResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.searchByRunNumberResponse_Def.schema
            TClist = [GTD("client.icat3.uk","datafile",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "searchByRunNumberResponse_Holder"
            self.pyclass = Holder

    class deleteInvestigation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "deleteInvestigation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.deleteInvestigation_Def.schema
            TClist = [ZSI.TC.String(pname="arg0", aname="_arg0", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="arg1", aname="_arg1", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._arg0 = None
                    self._arg1 = None
                    return
            Holder.__name__ = "deleteInvestigation_Holder"
            self.pyclass = Holder

    class deleteInvestigationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "deleteInvestigationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.deleteInvestigationResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "deleteInvestigationResponse_Holder"
            self.pyclass = Holder

    class createDataSets_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "createDataSets")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.createDataSets_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","dataset",lazy=False)(pname="dataSets", aname="_dataSets", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="investigationId", aname="_investigationId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._dataSets = []
                    self._investigationId = None
                    return
            Holder.__name__ = "createDataSets_Holder"
            self.pyclass = Holder

    class createDataSetsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "createDataSetsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.createDataSetsResponse_Def.schema
            TClist = [GTD("client.icat3.uk","dataset",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "createDataSetsResponse_Holder"
            self.pyclass = Holder

    class removePublication_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "removePublication")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removePublication_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="publicationId", aname="_publicationId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._publicationId = None
                    return
            Holder.__name__ = "removePublication_Holder"
            self.pyclass = Holder

    class removePublicationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "removePublicationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removePublicationResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "removePublicationResponse_Holder"
            self.pyclass = Holder

    class getAllKeywords_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getAllKeywords")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getAllKeywords_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","keywordType",lazy=False)(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._type = None
                    return
            Holder.__name__ = "getAllKeywords_Holder"
            self.pyclass = Holder

    class getAllKeywordsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getAllKeywordsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getAllKeywordsResponse_Def.schema
            TClist = [ZSI.TC.String(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getAllKeywordsResponse_Holder"
            self.pyclass = Holder

    class searchByAdvanced_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "searchByAdvanced")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.searchByAdvanced_Def.schema
            TClist = [ZSI.TC.String(pname="arg0", aname="_arg0", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","advancedSearchDetails",lazy=False)(pname="arg1", aname="_arg1", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._arg0 = None
                    self._arg1 = None
                    return
            Holder.__name__ = "searchByAdvanced_Holder"
            self.pyclass = Holder

    class advancedSearchDetails_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "advancedSearchDetails")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.advancedSearchDetails_Def.schema
            TClist = [ZSI.TC.String(pname="backCatalogueInvestigatorString", aname="_backCatalogueInvestigatorString", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="caseSensitive", aname="_caseSensitive", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="datafileName", aname="_datafileName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="dateRangeEnd", aname="_dateRangeEnd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="dateRangeStart", aname="_dateRangeStart", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="experimentNumber", aname="_experimentNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="grantId", aname="_grantId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="instruments", aname="_instruments", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="investigationAbstract", aname="_investigationAbstract", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","investigationInclude",lazy=False)(pname="investigationInclude", aname="_investigationInclude", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="investigationName", aname="_investigationName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="investigationType", aname="_investigationType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="investigators", aname="_investigators", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="keywords", aname="_keywords", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="runEnd", aname="_runEnd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname="runStart", aname="_runStart", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sampleName", aname="_sampleName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="visitId", aname="_visitId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._backCatalogueInvestigatorString = None
                    self._caseSensitive = None
                    self._datafileName = None
                    self._dateRangeEnd = None
                    self._dateRangeStart = None
                    self._experimentNumber = None
                    self._grantId = None
                    self._instruments = []
                    self._investigationAbstract = None
                    self._investigationInclude = None
                    self._investigationName = None
                    self._investigationType = None
                    self._investigators = []
                    self._keywords = []
                    self._runEnd = None
                    self._runStart = None
                    self._sampleName = None
                    self._visitId = None
                    return
            Holder.__name__ = "advancedSearchDetails_Holder"
            self.pyclass = Holder

    class searchByAdvancedResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "searchByAdvancedResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.searchByAdvancedResponse_Def.schema
            TClist = [GTD("client.icat3.uk","investigation",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "searchByAdvancedResponse_Holder"
            self.pyclass = Holder

    class searchByAdvancedPagination_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "searchByAdvancedPagination")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.searchByAdvancedPagination_Def.schema
            TClist = [ZSI.TC.String(pname="arg0", aname="_arg0", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","advancedSearchDetails",lazy=False)(pname="arg1", aname="_arg1", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="startIndex", aname="_startIndex", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="numberOfResults", aname="_numberOfResults", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._arg0 = None
                    self._arg1 = None
                    self._startIndex = None
                    self._numberOfResults = None
                    return
            Holder.__name__ = "searchByAdvancedPagination_Holder"
            self.pyclass = Holder

    class searchByAdvancedPaginationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "searchByAdvancedPaginationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.searchByAdvancedPaginationResponse_Def.schema
            TClist = [GTD("client.icat3.uk","investigation",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "searchByAdvancedPaginationResponse_Holder"
            self.pyclass = Holder

    class downloadDatafiles_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "downloadDatafiles")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.downloadDatafiles_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="datafileIds", aname="_datafileIds", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._datafileIds = []
                    return
            Holder.__name__ = "downloadDatafiles_Holder"
            self.pyclass = Holder

    class downloadDatafilesResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "downloadDatafilesResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.downloadDatafilesResponse_Def.schema
            TClist = [ZSI.TC.String(pname="URL", aname="_URL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._URL = None
                    return
            Holder.__name__ = "downloadDatafilesResponse_Holder"
            self.pyclass = Holder

    class listDatafileFormats_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "listDatafileFormats")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.listDatafileFormats_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    return
            Holder.__name__ = "listDatafileFormats_Holder"
            self.pyclass = Holder

    class listDatafileFormatsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "listDatafileFormatsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.listDatafileFormatsResponse_Def.schema
            TClist = [GTD("client.icat3.uk","datafileFormat",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "listDatafileFormatsResponse_Holder"
            self.pyclass = Holder

    class modifyDataSet_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "modifyDataSet")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.modifyDataSet_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","dataset",lazy=False)(pname="dataSet", aname="_dataSet", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._dataSet = None
                    return
            Holder.__name__ = "modifyDataSet_Holder"
            self.pyclass = Holder

    class modifyDataSetResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "modifyDataSetResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.modifyDataSetResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "modifyDataSetResponse_Holder"
            self.pyclass = Holder

    class modifySampleParameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "modifySampleParameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.modifySampleParameter_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","sampleParameter",lazy=False)(pname="sampleParameter", aname="_sampleParameter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._sampleParameter = None
                    return
            Holder.__name__ = "modifySampleParameter_Holder"
            self.pyclass = Holder

    class modifySampleParameterResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "modifySampleParameterResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.modifySampleParameterResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "modifySampleParameterResponse_Holder"
            self.pyclass = Holder

    class modifyInvestigator_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "modifyInvestigator")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.modifyInvestigator_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","investigator",lazy=False)(pname="investigator", aname="_investigator", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._investigator = None
                    return
            Holder.__name__ = "modifyInvestigator_Holder"
            self.pyclass = Holder

    class modifyInvestigatorResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "modifyInvestigatorResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.modifyInvestigatorResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "modifyInvestigatorResponse_Holder"
            self.pyclass = Holder

    class addSampleParameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "addSampleParameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.addSampleParameter_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","sampleParameter",lazy=False)(pname="sampleParameter", aname="_sampleParameter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="investigationId", aname="_investigationId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._sampleParameter = None
                    self._investigationId = None
                    return
            Holder.__name__ = "addSampleParameter_Holder"
            self.pyclass = Holder

    class addSampleParameterResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "addSampleParameterResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.addSampleParameterResponse_Def.schema
            TClist = [GTD("client.icat3.uk","sampleParameter",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "addSampleParameterResponse_Holder"
            self.pyclass = Holder

    class addDataSetParameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "addDataSetParameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.addDataSetParameter_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","datasetParameter",lazy=False)(pname="dataSetParameter", aname="_dataSetParameter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="datasetId", aname="_datasetId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._dataSetParameter = None
                    self._datasetId = None
                    return
            Holder.__name__ = "addDataSetParameter_Holder"
            self.pyclass = Holder

    class addDataSetParameterResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "addDataSetParameterResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.addDataSetParameterResponse_Def.schema
            TClist = [GTD("client.icat3.uk","datasetParameter",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "addDataSetParameterResponse_Holder"
            self.pyclass = Holder

    class createDataFiles_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "createDataFiles")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.createDataFiles_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","datafile",lazy=False)(pname="dataFiles", aname="_dataFiles", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="datasetId", aname="_datasetId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._dataFiles = []
                    self._datasetId = None
                    return
            Holder.__name__ = "createDataFiles_Holder"
            self.pyclass = Holder

    class createDataFilesResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "createDataFilesResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.createDataFilesResponse_Def.schema
            TClist = [GTD("client.icat3.uk","datafile",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "createDataFilesResponse_Holder"
            self.pyclass = Holder

    class addAuthorisation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "addAuthorisation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.addAuthorisation_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="toAddFedId", aname="_toAddFedId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="toAddRole", aname="_toAddRole", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="elementId", aname="_elementId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","elementType",lazy=False)(pname="elementType", aname="_elementType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._toAddFedId = None
                    self._toAddRole = None
                    self._elementId = None
                    self._elementType = None
                    return
            Holder.__name__ = "addAuthorisation_Holder"
            self.pyclass = Holder

    class addAuthorisationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "addAuthorisationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.addAuthorisationResponse_Def.schema
            TClist = [GTD("client.icat3.uk","icatAuthorisation",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "addAuthorisationResponse_Holder"
            self.pyclass = Holder

    class checkDatafileDownloadAccess_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "checkDatafileDownloadAccess")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.checkDatafileDownloadAccess_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="datafileIds", aname="_datafileIds", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._datafileIds = []
                    return
            Holder.__name__ = "checkDatafileDownloadAccess_Holder"
            self.pyclass = Holder

    class checkDatafileDownloadAccessResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "checkDatafileDownloadAccessResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.checkDatafileDownloadAccessResponse_Def.schema
            TClist = [GTD("client.icat3.uk","downloadInfo",lazy=False)(pname="downloadInfo", aname="_downloadInfo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._downloadInfo = None
                    return
            Holder.__name__ = "checkDatafileDownloadAccessResponse_Holder"
            self.pyclass = Holder

    class downloadInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "downloadInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.downloadInfo_Def.schema
            TClist = [ZSI.TC.AnyType(pname="datafileNames", aname="_datafileNames", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="userId", aname="_userId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._datafileNames = []
                    self._userId = None
                    return
            Holder.__name__ = "downloadInfo_Holder"
            self.pyclass = Holder

    class addSample_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "addSample")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.addSample_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","sample",lazy=False)(pname="sample", aname="_sample", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="investigationId", aname="_investigationId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._sample = None
                    self._investigationId = None
                    return
            Holder.__name__ = "addSample_Holder"
            self.pyclass = Holder

    class addSampleResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "addSampleResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.addSampleResponse_Def.schema
            TClist = [GTD("client.icat3.uk","sample",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "addSampleResponse_Holder"
            self.pyclass = Holder

    class deletePublication_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "deletePublication")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.deletePublication_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="publicationId", aname="_publicationId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._publicationId = None
                    return
            Holder.__name__ = "deletePublication_Holder"
            self.pyclass = Holder

    class deletePublicationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "deletePublicationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.deletePublicationResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "deletePublicationResponse_Holder"
            self.pyclass = Holder

    class login_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "login")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.login_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    return
            Holder.__name__ = "login_Holder"
            self.pyclass = Holder

    class loginResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "loginResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.loginResponse_Def.schema
            TClist = [ZSI.TC.String(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "loginResponse_Holder"
            self.pyclass = Holder

    class loginLifetime_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "loginLifetime")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.loginLifetime_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="lifetime", aname="_lifetime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    self._lifetime = None
                    return
            Holder.__name__ = "loginLifetime_Holder"
            self.pyclass = Holder

    class loginLifetimeResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "loginLifetimeResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.loginLifetimeResponse_Def.schema
            TClist = [ZSI.TC.String(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "loginLifetimeResponse_Holder"
            self.pyclass = Holder

    class deleteDataFile_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "deleteDataFile")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.deleteDataFile_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="datafileId", aname="_datafileId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._datafileId = None
                    return
            Holder.__name__ = "deleteDataFile_Holder"
            self.pyclass = Holder

    class deleteDataFileResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "deleteDataFileResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.deleteDataFileResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "deleteDataFileResponse_Holder"
            self.pyclass = Holder

    class searchByUserSurname_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "searchByUserSurname")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.searchByUserSurname_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="surname", aname="_surname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._surname = None
                    return
            Holder.__name__ = "searchByUserSurname_Holder"
            self.pyclass = Holder

    class searchByUserSurnameResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "searchByUserSurnameResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.searchByUserSurnameResponse_Def.schema
            TClist = [GTD("client.icat3.uk","investigation",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "searchByUserSurnameResponse_Holder"
            self.pyclass = Holder

    class searchByUserSurnamePagination_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "searchByUserSurnamePagination")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.searchByUserSurnamePagination_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="surname", aname="_surname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="startIndex", aname="_startIndex", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="number_results", aname="_number_results", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._surname = None
                    self._startIndex = None
                    self._number_results = None
                    return
            Holder.__name__ = "searchByUserSurnamePagination_Holder"
            self.pyclass = Holder

    class searchByUserSurnamePaginationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "searchByUserSurnamePaginationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.searchByUserSurnamePaginationResponse_Def.schema
            TClist = [GTD("client.icat3.uk","investigation",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "searchByUserSurnamePaginationResponse_Holder"
            self.pyclass = Holder

    class deleteAuthorisation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "deleteAuthorisation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.deleteAuthorisation_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="authorisationId", aname="_authorisationId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._authorisationId = None
                    return
            Holder.__name__ = "deleteAuthorisation_Holder"
            self.pyclass = Holder

    class deleteAuthorisationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "deleteAuthorisationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.deleteAuthorisationResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "deleteAuthorisationResponse_Holder"
            self.pyclass = Holder

    class checkDatasetDownloadAccess_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "checkDatasetDownloadAccess")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.checkDatasetDownloadAccess_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="datasetId", aname="_datasetId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._datasetId = None
                    return
            Holder.__name__ = "checkDatasetDownloadAccess_Holder"
            self.pyclass = Holder

    class checkDatasetDownloadAccessResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "checkDatasetDownloadAccessResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.checkDatasetDownloadAccessResponse_Def.schema
            TClist = [GTD("client.icat3.uk","downloadInfo",lazy=False)(pname="downloadInfo", aname="_downloadInfo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._downloadInfo = None
                    return
            Holder.__name__ = "checkDatasetDownloadAccessResponse_Holder"
            self.pyclass = Holder

    class getDataset_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getDataset")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getDataset_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="datasetId", aname="_datasetId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._datasetId = None
                    return
            Holder.__name__ = "getDataset_Holder"
            self.pyclass = Holder

    class getDatasetResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getDatasetResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getDatasetResponse_Def.schema
            TClist = [GTD("client.icat3.uk","dataset",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "getDatasetResponse_Holder"
            self.pyclass = Holder

    class getDatasetIncludes_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getDatasetIncludes")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getDatasetIncludes_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="datasetId", aname="_datasetId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","datasetInclude",lazy=False)(pname="includes", aname="_includes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._datasetId = None
                    self._includes = None
                    return
            Holder.__name__ = "getDatasetIncludes_Holder"
            self.pyclass = Holder

    class getDatasetIncludesResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getDatasetIncludesResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getDatasetIncludesResponse_Def.schema
            TClist = [GTD("client.icat3.uk","dataset",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "getDatasetIncludesResponse_Holder"
            self.pyclass = Holder

    class updateAuthorisation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "updateAuthorisation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.updateAuthorisation_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="toChangetoRole", aname="_toChangetoRole", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="authorisationId", aname="_authorisationId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._toChangetoRole = None
                    self._authorisationId = None
                    return
            Holder.__name__ = "updateAuthorisation_Holder"
            self.pyclass = Holder

    class updateAuthorisationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "updateAuthorisationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.updateAuthorisationResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "updateAuthorisationResponse_Holder"
            self.pyclass = Holder

    class listRoles_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "listRoles")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.listRoles_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    return
            Holder.__name__ = "listRoles_Holder"
            self.pyclass = Holder

    class listRolesResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "listRolesResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.listRolesResponse_Def.schema
            TClist = [GTD("client.icat3.uk","icatRole",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "listRolesResponse_Holder"
            self.pyclass = Holder

    class searchByKeywords_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "searchByKeywords")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.searchByKeywords_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="keywords", aname="_keywords", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._keywords = []
                    return
            Holder.__name__ = "searchByKeywords_Holder"
            self.pyclass = Holder

    class searchByKeywordsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "searchByKeywordsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.searchByKeywordsResponse_Def.schema
            TClist = [GTD("client.icat3.uk","investigation",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "searchByKeywordsResponse_Holder"
            self.pyclass = Holder

    class searchByKeywordsAll_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "searchByKeywordsAll")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.searchByKeywordsAll_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","keywordDetails",lazy=False)(pname="keywordDetails", aname="_keywordDetails", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="startIndex", aname="_startIndex", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="numberOfResults", aname="_numberOfResults", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._keywordDetails = None
                    self._startIndex = None
                    self._numberOfResults = None
                    return
            Holder.__name__ = "searchByKeywordsAll_Holder"
            self.pyclass = Holder

    class keywordDetails_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "keywordDetails")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.keywordDetails_Def.schema
            TClist = [ZSI.TC.Boolean(pname="caseSensitve", aname="_caseSensitve", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","investigationInclude",lazy=False)(pname="investigationIncludes", aname="_investigationIncludes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="keywords", aname="_keywords", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","logicalOperator",lazy=False)(pname="operator", aname="_operator", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._caseSensitve = None
                    self._investigationIncludes = None
                    self._keywords = []
                    self._operator = None
                    return
            Holder.__name__ = "keywordDetails_Holder"
            self.pyclass = Holder

    class searchByKeywordsAllResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "searchByKeywordsAllResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.searchByKeywordsAllResponse_Def.schema
            TClist = [GTD("client.icat3.uk","investigation",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "searchByKeywordsAllResponse_Holder"
            self.pyclass = Holder

    class ingestMetadata_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "ingestMetadata")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ingestMetadata_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xml", aname="_xml", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._xml = None
                    return
            Holder.__name__ = "ingestMetadata_Holder"
            self.pyclass = Holder

    class ingestMetadataResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "ingestMetadataResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ingestMetadataResponse_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "ingestMetadataResponse_Holder"
            self.pyclass = Holder

    class ICATAPIException_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "ICATAPIException")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ICATAPIException_Def.schema
            TClist = [ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="stackTraceAsString", aname="_stackTraceAsString", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="uniqueId", aname="_uniqueId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    self._stackTraceAsString = None
                    self._uniqueId = None
                    return
            Holder.__name__ = "ICATAPIException_Holder"
            self.pyclass = Holder

    class getDatafile_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getDatafile")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getDatafile_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="datafileId", aname="_datafileId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._datafileId = None
                    return
            Holder.__name__ = "getDatafile_Holder"
            self.pyclass = Holder

    class getDatafileResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getDatafileResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getDatafileResponse_Def.schema
            TClist = [GTD("client.icat3.uk","datafile",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "getDatafileResponse_Holder"
            self.pyclass = Holder

    class getMyInvestigations_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getMyInvestigations")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getMyInvestigations_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    return
            Holder.__name__ = "getMyInvestigations_Holder"
            self.pyclass = Holder

    class getMyInvestigationsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getMyInvestigationsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getMyInvestigationsResponse_Def.schema
            TClist = [GTD("client.icat3.uk","investigation",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getMyInvestigationsResponse_Holder"
            self.pyclass = Holder

    class getMyInvestigationsIncludes_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getMyInvestigationsIncludes")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getMyInvestigationsIncludes_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","investigationInclude",lazy=False)(pname="include", aname="_include", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._include = None
                    return
            Holder.__name__ = "getMyInvestigationsIncludes_Holder"
            self.pyclass = Holder

    class getMyInvestigationsIncludesResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getMyInvestigationsIncludesResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getMyInvestigationsIncludesResponse_Def.schema
            TClist = [GTD("client.icat3.uk","investigation",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getMyInvestigationsIncludesResponse_Holder"
            self.pyclass = Holder

    class getMyInvestigationsIncludesPagination_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getMyInvestigationsIncludesPagination")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getMyInvestigationsIncludesPagination_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","investigationInclude",lazy=False)(pname="include", aname="_include", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="startIndex", aname="_startIndex", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="number_results", aname="_number_results", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._include = None
                    self._startIndex = None
                    self._number_results = None
                    return
            Holder.__name__ = "getMyInvestigationsIncludesPagination_Holder"
            self.pyclass = Holder

    class getMyInvestigationsIncludesPaginationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getMyInvestigationsIncludesPaginationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getMyInvestigationsIncludesPaginationResponse_Def.schema
            TClist = [GTD("client.icat3.uk","investigation",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getMyInvestigationsIncludesPaginationResponse_Holder"
            self.pyclass = Holder

    class modifyDataFile_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "modifyDataFile")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.modifyDataFile_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","datafile",lazy=False)(pname="dataFile", aname="_dataFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._dataFile = None
                    return
            Holder.__name__ = "modifyDataFile_Holder"
            self.pyclass = Holder

    class modifyDataFileResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "modifyDataFileResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.modifyDataFileResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "modifyDataFileResponse_Holder"
            self.pyclass = Holder

    class getInvestigation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getInvestigation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getInvestigation_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="investigationId", aname="_investigationId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._investigationId = None
                    return
            Holder.__name__ = "getInvestigation_Holder"
            self.pyclass = Holder

    class getInvestigationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getInvestigationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getInvestigationResponse_Def.schema
            TClist = [GTD("client.icat3.uk","investigation",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "getInvestigationResponse_Holder"
            self.pyclass = Holder

    class getInvestigationIncludes_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getInvestigationIncludes")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getInvestigationIncludes_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="investigationId", aname="_investigationId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","investigationInclude",lazy=False)(pname="includes", aname="_includes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._investigationId = None
                    self._includes = None
                    return
            Holder.__name__ = "getInvestigationIncludes_Holder"
            self.pyclass = Holder

    class getInvestigationIncludesResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getInvestigationIncludesResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getInvestigationIncludesResponse_Def.schema
            TClist = [GTD("client.icat3.uk","investigation",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "getInvestigationIncludesResponse_Holder"
            self.pyclass = Holder

    class removeDataSetParameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "removeDataSetParameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removeDataSetParameter_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","datasetParameterPK",lazy=False)(pname="datasetParameterPK", aname="_datasetParameterPK", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._datasetParameterPK = None
                    return
            Holder.__name__ = "removeDataSetParameter_Holder"
            self.pyclass = Holder

    class removeDataSetParameterResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "removeDataSetParameterResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removeDataSetParameterResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "removeDataSetParameterResponse_Holder"
            self.pyclass = Holder

    class deleteDataFileParameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "deleteDataFileParameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.deleteDataFileParameter_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","datafileParameterPK",lazy=False)(pname="datafileParameterPK", aname="_datafileParameterPK", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._datafileParameterPK = None
                    return
            Holder.__name__ = "deleteDataFileParameter_Holder"
            self.pyclass = Holder

    class deleteDataFileParameterResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "deleteDataFileParameterResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.deleteDataFileParameterResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "deleteDataFileParameterResponse_Holder"
            self.pyclass = Holder

    class createInvestigation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "createInvestigation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.createInvestigation_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","investigation",lazy=False)(pname="investigation", aname="_investigation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._investigation = None
                    return
            Holder.__name__ = "createInvestigation_Holder"
            self.pyclass = Holder

    class createInvestigationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "createInvestigationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.createInvestigationResponse_Def.schema
            TClist = [GTD("client.icat3.uk","investigation",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "createInvestigationResponse_Holder"
            self.pyclass = Holder

    class searchDatasetsBySample_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "searchDatasetsBySample")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.searchDatasetsBySample_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","sample",lazy=False)(pname="sample", aname="_sample", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._sample = None
                    return
            Holder.__name__ = "searchDatasetsBySample_Holder"
            self.pyclass = Holder

    class searchDatasetsBySampleResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "searchDatasetsBySampleResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.searchDatasetsBySampleResponse_Def.schema
            TClist = [GTD("client.icat3.uk","dataset",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "searchDatasetsBySampleResponse_Holder"
            self.pyclass = Holder

    class addPublication_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "addPublication")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.addPublication_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","publication",lazy=False)(pname="publication", aname="_publication", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="investigationId", aname="_investigationId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._publication = None
                    self._investigationId = None
                    return
            Holder.__name__ = "addPublication_Holder"
            self.pyclass = Holder

    class addPublicationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "addPublicationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.addPublicationResponse_Def.schema
            TClist = [GTD("client.icat3.uk","publication",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "addPublicationResponse_Holder"
            self.pyclass = Holder

    class modifyPublication_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "modifyPublication")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.modifyPublication_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","publication",lazy=False)(pname="publication", aname="_publication", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._publication = None
                    return
            Holder.__name__ = "modifyPublication_Holder"
            self.pyclass = Holder

    class modifyPublicationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "modifyPublicationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.modifyPublicationResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "modifyPublicationResponse_Holder"
            self.pyclass = Holder

    class searchByUserID_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "searchByUserID")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.searchByUserID_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="userSearch", aname="_userSearch", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._userSearch = None
                    return
            Holder.__name__ = "searchByUserID_Holder"
            self.pyclass = Holder

    class searchByUserIDResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "searchByUserIDResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.searchByUserIDResponse_Def.schema
            TClist = [GTD("client.icat3.uk","investigation",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "searchByUserIDResponse_Holder"
            self.pyclass = Holder

    class searchByUserIDPagination_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "searchByUserIDPagination")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.searchByUserIDPagination_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="userSearch", aname="_userSearch", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="startIndex", aname="_startIndex", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="number_results", aname="_number_results", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._userSearch = None
                    self._startIndex = None
                    self._number_results = None
                    return
            Holder.__name__ = "searchByUserIDPagination_Holder"
            self.pyclass = Holder

    class searchByUserIDPaginationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "searchByUserIDPaginationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.searchByUserIDPaginationResponse_Def.schema
            TClist = [GTD("client.icat3.uk","investigation",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "searchByUserIDPaginationResponse_Holder"
            self.pyclass = Holder

    class addDataFileParameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "addDataFileParameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.addDataFileParameter_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","datafileParameter",lazy=False)(pname="dataFileParameter", aname="_dataFileParameter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="datafileId", aname="_datafileId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._dataFileParameter = None
                    self._datafileId = None
                    return
            Holder.__name__ = "addDataFileParameter_Holder"
            self.pyclass = Holder

    class addDataFileParameterResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "addDataFileParameterResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.addDataFileParameterResponse_Def.schema
            TClist = [GTD("client.icat3.uk","datafileParameter",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "addDataFileParameterResponse_Holder"
            self.pyclass = Holder

    class removeDataFileParameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "removeDataFileParameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removeDataFileParameter_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","datafileParameterPK",lazy=False)(pname="datafileParameterPK", aname="_datafileParameterPK", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._datafileParameterPK = None
                    return
            Holder.__name__ = "removeDataFileParameter_Holder"
            self.pyclass = Holder

    class removeDataFileParameterResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "removeDataFileParameterResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.removeDataFileParameterResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "removeDataFileParameterResponse_Holder"
            self.pyclass = Holder

    class deleteSampleParameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "deleteSampleParameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.deleteSampleParameter_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","sampleParameterPK",lazy=False)(pname="sampleParameterPK", aname="_sampleParameterPK", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._sampleParameterPK = None
                    return
            Holder.__name__ = "deleteSampleParameter_Holder"
            self.pyclass = Holder

    class deleteSampleParameterResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "deleteSampleParameterResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.deleteSampleParameterResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "deleteSampleParameterResponse_Holder"
            self.pyclass = Holder

    class listParameters_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "listParameters")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.listParameters_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    return
            Holder.__name__ = "listParameters_Holder"
            self.pyclass = Holder

    class listParametersResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "listParametersResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.listParametersResponse_Def.schema
            TClist = [GTD("client.icat3.uk","parameter",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "listParametersResponse_Holder"
            self.pyclass = Holder

    class modifyDataFileParameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "modifyDataFileParameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.modifyDataFileParameter_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","datafileParameter",lazy=False)(pname="dataFileParameter", aname="_dataFileParameter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._dataFileParameter = None
                    return
            Holder.__name__ = "modifyDataFileParameter_Holder"
            self.pyclass = Holder

    class modifyDataFileParameterResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "modifyDataFileParameterResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.modifyDataFileParameterResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "modifyDataFileParameterResponse_Holder"
            self.pyclass = Holder

    class getDatasets_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getDatasets")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getDatasets_Def.schema
            TClist = [ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="datasetIds", aname="_datasetIds", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionId = None
                    self._datasetIds = []
                    return
            Holder.__name__ = "getDatasets_Holder"
            self.pyclass = Holder

    class getDatasetsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getDatasetsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getDatasetsResponse_Def.schema
            TClist = [GTD("client.icat3.uk","dataset",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getDatasetsResponse_Holder"
            self.pyclass = Holder

    class getInvestigationsIncludes_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getInvestigationsIncludes")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getInvestigationsIncludes_Def.schema
            TClist = [ZSI.TC.String(pname="arg0", aname="_arg0", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="arg1", aname="_arg1", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("client.icat3.uk","investigationInclude",lazy=False)(pname="arg2", aname="_arg2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._arg0 = None
                    self._arg1 = []
                    self._arg2 = None
                    return
            Holder.__name__ = "getInvestigationsIncludes_Holder"
            self.pyclass = Holder

    class getInvestigationsIncludesResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "getInvestigationsIncludesResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getInvestigationsIncludesResponse_Def.schema
            TClist = [GTD("client.icat3.uk","investigation",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getInvestigationsIncludesResponse_Holder"
            self.pyclass = Holder

    class datafileInclude_Def(ZSI.TC.String, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "datafileInclude")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class keywordType_Def(ZSI.TC.String, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "keywordType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class elementType_Def(ZSI.TC.String, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "elementType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class investigationInclude_Def(ZSI.TC.String, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "investigationInclude")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class datasetInclude_Def(ZSI.TC.String, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "datasetInclude")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class logicalOperator_Def(ZSI.TC.String, TypeDefinition):
        schema = "client.icat3.uk"
        type = (schema, "logicalOperator")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ICATAPIException_Dec(ElementDeclaration):
        literal = "ICATAPIException"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","ICATAPIException")
            kw["aname"] = "_ICATAPIException"
            if ns0.ICATAPIException_Def not in ns0.ICATAPIException_Dec.__bases__:
                bases = list(ns0.ICATAPIException_Dec.__bases__)
                bases.insert(0, ns0.ICATAPIException_Def)
                ns0.ICATAPIException_Dec.__bases__ = tuple(bases)

            ns0.ICATAPIException_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ICATAPIException_Dec_Holder"

    class InsufficientPrivilegesException_Dec(ElementDeclaration):
        literal = "InsufficientPrivilegesException"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","InsufficientPrivilegesException")
            kw["aname"] = "_InsufficientPrivilegesException"
            if ns0.InsufficientPrivilegesException_Def not in ns0.InsufficientPrivilegesException_Dec.__bases__:
                bases = list(ns0.InsufficientPrivilegesException_Dec.__bases__)
                bases.insert(0, ns0.InsufficientPrivilegesException_Def)
                ns0.InsufficientPrivilegesException_Dec.__bases__ = tuple(bases)

            ns0.InsufficientPrivilegesException_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "InsufficientPrivilegesException_Dec_Holder"

    class NoSuchObjectFoundException_Dec(ElementDeclaration):
        literal = "NoSuchObjectFoundException"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","NoSuchObjectFoundException")
            kw["aname"] = "_NoSuchObjectFoundException"
            if ns0.NoSuchObjectFoundException_Def not in ns0.NoSuchObjectFoundException_Dec.__bases__:
                bases = list(ns0.NoSuchObjectFoundException_Dec.__bases__)
                bases.insert(0, ns0.NoSuchObjectFoundException_Def)
                ns0.NoSuchObjectFoundException_Dec.__bases__ = tuple(bases)

            ns0.NoSuchObjectFoundException_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "NoSuchObjectFoundException_Dec_Holder"

    class SessionException_Dec(ElementDeclaration):
        literal = "SessionException"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","SessionException")
            kw["aname"] = "_SessionException"
            if ns0.SessionException_Def not in ns0.SessionException_Dec.__bases__:
                bases = list(ns0.SessionException_Dec.__bases__)
                bases.insert(0, ns0.SessionException_Def)
                ns0.SessionException_Dec.__bases__ = tuple(bases)

            ns0.SessionException_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "SessionException_Dec_Holder"

    class ValidationException_Dec(ElementDeclaration):
        literal = "ValidationException"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","ValidationException")
            kw["aname"] = "_ValidationException"
            if ns0.ValidationException_Def not in ns0.ValidationException_Dec.__bases__:
                bases = list(ns0.ValidationException_Dec.__bases__)
                bases.insert(0, ns0.ValidationException_Def)
                ns0.ValidationException_Dec.__bases__ = tuple(bases)

            ns0.ValidationException_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ValidationException_Dec_Holder"

    class addAuthorisation_Dec(ElementDeclaration):
        literal = "addAuthorisation"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","addAuthorisation")
            kw["aname"] = "_addAuthorisation"
            if ns0.addAuthorisation_Def not in ns0.addAuthorisation_Dec.__bases__:
                bases = list(ns0.addAuthorisation_Dec.__bases__)
                bases.insert(0, ns0.addAuthorisation_Def)
                ns0.addAuthorisation_Dec.__bases__ = tuple(bases)

            ns0.addAuthorisation_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "addAuthorisation_Dec_Holder"

    class addAuthorisationResponse_Dec(ElementDeclaration):
        literal = "addAuthorisationResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","addAuthorisationResponse")
            kw["aname"] = "_addAuthorisationResponse"
            if ns0.addAuthorisationResponse_Def not in ns0.addAuthorisationResponse_Dec.__bases__:
                bases = list(ns0.addAuthorisationResponse_Dec.__bases__)
                bases.insert(0, ns0.addAuthorisationResponse_Def)
                ns0.addAuthorisationResponse_Dec.__bases__ = tuple(bases)

            ns0.addAuthorisationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "addAuthorisationResponse_Dec_Holder"

    class addDataFileParameter_Dec(ElementDeclaration):
        literal = "addDataFileParameter"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","addDataFileParameter")
            kw["aname"] = "_addDataFileParameter"
            if ns0.addDataFileParameter_Def not in ns0.addDataFileParameter_Dec.__bases__:
                bases = list(ns0.addDataFileParameter_Dec.__bases__)
                bases.insert(0, ns0.addDataFileParameter_Def)
                ns0.addDataFileParameter_Dec.__bases__ = tuple(bases)

            ns0.addDataFileParameter_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "addDataFileParameter_Dec_Holder"

    class addDataFileParameterResponse_Dec(ElementDeclaration):
        literal = "addDataFileParameterResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","addDataFileParameterResponse")
            kw["aname"] = "_addDataFileParameterResponse"
            if ns0.addDataFileParameterResponse_Def not in ns0.addDataFileParameterResponse_Dec.__bases__:
                bases = list(ns0.addDataFileParameterResponse_Dec.__bases__)
                bases.insert(0, ns0.addDataFileParameterResponse_Def)
                ns0.addDataFileParameterResponse_Dec.__bases__ = tuple(bases)

            ns0.addDataFileParameterResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "addDataFileParameterResponse_Dec_Holder"

    class addDataFileParameters_Dec(ElementDeclaration):
        literal = "addDataFileParameters"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","addDataFileParameters")
            kw["aname"] = "_addDataFileParameters"
            if ns0.addDataFileParameters_Def not in ns0.addDataFileParameters_Dec.__bases__:
                bases = list(ns0.addDataFileParameters_Dec.__bases__)
                bases.insert(0, ns0.addDataFileParameters_Def)
                ns0.addDataFileParameters_Dec.__bases__ = tuple(bases)

            ns0.addDataFileParameters_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "addDataFileParameters_Dec_Holder"

    class addDataFileParametersResponse_Dec(ElementDeclaration):
        literal = "addDataFileParametersResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","addDataFileParametersResponse")
            kw["aname"] = "_addDataFileParametersResponse"
            if ns0.addDataFileParametersResponse_Def not in ns0.addDataFileParametersResponse_Dec.__bases__:
                bases = list(ns0.addDataFileParametersResponse_Dec.__bases__)
                bases.insert(0, ns0.addDataFileParametersResponse_Def)
                ns0.addDataFileParametersResponse_Dec.__bases__ = tuple(bases)

            ns0.addDataFileParametersResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "addDataFileParametersResponse_Dec_Holder"

    class addDataSetParameter_Dec(ElementDeclaration):
        literal = "addDataSetParameter"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","addDataSetParameter")
            kw["aname"] = "_addDataSetParameter"
            if ns0.addDataSetParameter_Def not in ns0.addDataSetParameter_Dec.__bases__:
                bases = list(ns0.addDataSetParameter_Dec.__bases__)
                bases.insert(0, ns0.addDataSetParameter_Def)
                ns0.addDataSetParameter_Dec.__bases__ = tuple(bases)

            ns0.addDataSetParameter_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "addDataSetParameter_Dec_Holder"

    class addDataSetParameterResponse_Dec(ElementDeclaration):
        literal = "addDataSetParameterResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","addDataSetParameterResponse")
            kw["aname"] = "_addDataSetParameterResponse"
            if ns0.addDataSetParameterResponse_Def not in ns0.addDataSetParameterResponse_Dec.__bases__:
                bases = list(ns0.addDataSetParameterResponse_Dec.__bases__)
                bases.insert(0, ns0.addDataSetParameterResponse_Def)
                ns0.addDataSetParameterResponse_Dec.__bases__ = tuple(bases)

            ns0.addDataSetParameterResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "addDataSetParameterResponse_Dec_Holder"

    class addDataSetParameters_Dec(ElementDeclaration):
        literal = "addDataSetParameters"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","addDataSetParameters")
            kw["aname"] = "_addDataSetParameters"
            if ns0.addDataSetParameters_Def not in ns0.addDataSetParameters_Dec.__bases__:
                bases = list(ns0.addDataSetParameters_Dec.__bases__)
                bases.insert(0, ns0.addDataSetParameters_Def)
                ns0.addDataSetParameters_Dec.__bases__ = tuple(bases)

            ns0.addDataSetParameters_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "addDataSetParameters_Dec_Holder"

    class addDataSetParametersResponse_Dec(ElementDeclaration):
        literal = "addDataSetParametersResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","addDataSetParametersResponse")
            kw["aname"] = "_addDataSetParametersResponse"
            if ns0.addDataSetParametersResponse_Def not in ns0.addDataSetParametersResponse_Dec.__bases__:
                bases = list(ns0.addDataSetParametersResponse_Dec.__bases__)
                bases.insert(0, ns0.addDataSetParametersResponse_Def)
                ns0.addDataSetParametersResponse_Dec.__bases__ = tuple(bases)

            ns0.addDataSetParametersResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "addDataSetParametersResponse_Dec_Holder"

    class addInvestigator_Dec(ElementDeclaration):
        literal = "addInvestigator"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","addInvestigator")
            kw["aname"] = "_addInvestigator"
            if ns0.addInvestigator_Def not in ns0.addInvestigator_Dec.__bases__:
                bases = list(ns0.addInvestigator_Dec.__bases__)
                bases.insert(0, ns0.addInvestigator_Def)
                ns0.addInvestigator_Dec.__bases__ = tuple(bases)

            ns0.addInvestigator_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "addInvestigator_Dec_Holder"

    class addInvestigatorResponse_Dec(ElementDeclaration):
        literal = "addInvestigatorResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","addInvestigatorResponse")
            kw["aname"] = "_addInvestigatorResponse"
            if ns0.addInvestigatorResponse_Def not in ns0.addInvestigatorResponse_Dec.__bases__:
                bases = list(ns0.addInvestigatorResponse_Dec.__bases__)
                bases.insert(0, ns0.addInvestigatorResponse_Def)
                ns0.addInvestigatorResponse_Dec.__bases__ = tuple(bases)

            ns0.addInvestigatorResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "addInvestigatorResponse_Dec_Holder"

    class addKeyword_Dec(ElementDeclaration):
        literal = "addKeyword"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","addKeyword")
            kw["aname"] = "_addKeyword"
            if ns0.addKeyword_Def not in ns0.addKeyword_Dec.__bases__:
                bases = list(ns0.addKeyword_Dec.__bases__)
                bases.insert(0, ns0.addKeyword_Def)
                ns0.addKeyword_Dec.__bases__ = tuple(bases)

            ns0.addKeyword_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "addKeyword_Dec_Holder"

    class addKeywordResponse_Dec(ElementDeclaration):
        literal = "addKeywordResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","addKeywordResponse")
            kw["aname"] = "_addKeywordResponse"
            if ns0.addKeywordResponse_Def not in ns0.addKeywordResponse_Dec.__bases__:
                bases = list(ns0.addKeywordResponse_Dec.__bases__)
                bases.insert(0, ns0.addKeywordResponse_Def)
                ns0.addKeywordResponse_Dec.__bases__ = tuple(bases)

            ns0.addKeywordResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "addKeywordResponse_Dec_Holder"

    class addPublication_Dec(ElementDeclaration):
        literal = "addPublication"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","addPublication")
            kw["aname"] = "_addPublication"
            if ns0.addPublication_Def not in ns0.addPublication_Dec.__bases__:
                bases = list(ns0.addPublication_Dec.__bases__)
                bases.insert(0, ns0.addPublication_Def)
                ns0.addPublication_Dec.__bases__ = tuple(bases)

            ns0.addPublication_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "addPublication_Dec_Holder"

    class addPublicationResponse_Dec(ElementDeclaration):
        literal = "addPublicationResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","addPublicationResponse")
            kw["aname"] = "_addPublicationResponse"
            if ns0.addPublicationResponse_Def not in ns0.addPublicationResponse_Dec.__bases__:
                bases = list(ns0.addPublicationResponse_Dec.__bases__)
                bases.insert(0, ns0.addPublicationResponse_Def)
                ns0.addPublicationResponse_Dec.__bases__ = tuple(bases)

            ns0.addPublicationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "addPublicationResponse_Dec_Holder"

    class addSample_Dec(ElementDeclaration):
        literal = "addSample"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","addSample")
            kw["aname"] = "_addSample"
            if ns0.addSample_Def not in ns0.addSample_Dec.__bases__:
                bases = list(ns0.addSample_Dec.__bases__)
                bases.insert(0, ns0.addSample_Def)
                ns0.addSample_Dec.__bases__ = tuple(bases)

            ns0.addSample_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "addSample_Dec_Holder"

    class addSampleParameter_Dec(ElementDeclaration):
        literal = "addSampleParameter"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","addSampleParameter")
            kw["aname"] = "_addSampleParameter"
            if ns0.addSampleParameter_Def not in ns0.addSampleParameter_Dec.__bases__:
                bases = list(ns0.addSampleParameter_Dec.__bases__)
                bases.insert(0, ns0.addSampleParameter_Def)
                ns0.addSampleParameter_Dec.__bases__ = tuple(bases)

            ns0.addSampleParameter_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "addSampleParameter_Dec_Holder"

    class addSampleParameterResponse_Dec(ElementDeclaration):
        literal = "addSampleParameterResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","addSampleParameterResponse")
            kw["aname"] = "_addSampleParameterResponse"
            if ns0.addSampleParameterResponse_Def not in ns0.addSampleParameterResponse_Dec.__bases__:
                bases = list(ns0.addSampleParameterResponse_Dec.__bases__)
                bases.insert(0, ns0.addSampleParameterResponse_Def)
                ns0.addSampleParameterResponse_Dec.__bases__ = tuple(bases)

            ns0.addSampleParameterResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "addSampleParameterResponse_Dec_Holder"

    class addSampleResponse_Dec(ElementDeclaration):
        literal = "addSampleResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","addSampleResponse")
            kw["aname"] = "_addSampleResponse"
            if ns0.addSampleResponse_Def not in ns0.addSampleResponse_Dec.__bases__:
                bases = list(ns0.addSampleResponse_Dec.__bases__)
                bases.insert(0, ns0.addSampleResponse_Def)
                ns0.addSampleResponse_Dec.__bases__ = tuple(bases)

            ns0.addSampleResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "addSampleResponse_Dec_Holder"

    class checkDatafileDownloadAccess_Dec(ElementDeclaration):
        literal = "checkDatafileDownloadAccess"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","checkDatafileDownloadAccess")
            kw["aname"] = "_checkDatafileDownloadAccess"
            if ns0.checkDatafileDownloadAccess_Def not in ns0.checkDatafileDownloadAccess_Dec.__bases__:
                bases = list(ns0.checkDatafileDownloadAccess_Dec.__bases__)
                bases.insert(0, ns0.checkDatafileDownloadAccess_Def)
                ns0.checkDatafileDownloadAccess_Dec.__bases__ = tuple(bases)

            ns0.checkDatafileDownloadAccess_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "checkDatafileDownloadAccess_Dec_Holder"

    class checkDatafileDownloadAccessResponse_Dec(ElementDeclaration):
        literal = "checkDatafileDownloadAccessResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","checkDatafileDownloadAccessResponse")
            kw["aname"] = "_checkDatafileDownloadAccessResponse"
            if ns0.checkDatafileDownloadAccessResponse_Def not in ns0.checkDatafileDownloadAccessResponse_Dec.__bases__:
                bases = list(ns0.checkDatafileDownloadAccessResponse_Dec.__bases__)
                bases.insert(0, ns0.checkDatafileDownloadAccessResponse_Def)
                ns0.checkDatafileDownloadAccessResponse_Dec.__bases__ = tuple(bases)

            ns0.checkDatafileDownloadAccessResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "checkDatafileDownloadAccessResponse_Dec_Holder"

    class checkDatasetDownloadAccess_Dec(ElementDeclaration):
        literal = "checkDatasetDownloadAccess"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","checkDatasetDownloadAccess")
            kw["aname"] = "_checkDatasetDownloadAccess"
            if ns0.checkDatasetDownloadAccess_Def not in ns0.checkDatasetDownloadAccess_Dec.__bases__:
                bases = list(ns0.checkDatasetDownloadAccess_Dec.__bases__)
                bases.insert(0, ns0.checkDatasetDownloadAccess_Def)
                ns0.checkDatasetDownloadAccess_Dec.__bases__ = tuple(bases)

            ns0.checkDatasetDownloadAccess_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "checkDatasetDownloadAccess_Dec_Holder"

    class checkDatasetDownloadAccessResponse_Dec(ElementDeclaration):
        literal = "checkDatasetDownloadAccessResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","checkDatasetDownloadAccessResponse")
            kw["aname"] = "_checkDatasetDownloadAccessResponse"
            if ns0.checkDatasetDownloadAccessResponse_Def not in ns0.checkDatasetDownloadAccessResponse_Dec.__bases__:
                bases = list(ns0.checkDatasetDownloadAccessResponse_Dec.__bases__)
                bases.insert(0, ns0.checkDatasetDownloadAccessResponse_Def)
                ns0.checkDatasetDownloadAccessResponse_Dec.__bases__ = tuple(bases)

            ns0.checkDatasetDownloadAccessResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "checkDatasetDownloadAccessResponse_Dec_Holder"

    class createDataFile_Dec(ElementDeclaration):
        literal = "createDataFile"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","createDataFile")
            kw["aname"] = "_createDataFile"
            if ns0.createDataFile_Def not in ns0.createDataFile_Dec.__bases__:
                bases = list(ns0.createDataFile_Dec.__bases__)
                bases.insert(0, ns0.createDataFile_Def)
                ns0.createDataFile_Dec.__bases__ = tuple(bases)

            ns0.createDataFile_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "createDataFile_Dec_Holder"

    class createDataFileResponse_Dec(ElementDeclaration):
        literal = "createDataFileResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","createDataFileResponse")
            kw["aname"] = "_createDataFileResponse"
            if ns0.createDataFileResponse_Def not in ns0.createDataFileResponse_Dec.__bases__:
                bases = list(ns0.createDataFileResponse_Dec.__bases__)
                bases.insert(0, ns0.createDataFileResponse_Def)
                ns0.createDataFileResponse_Dec.__bases__ = tuple(bases)

            ns0.createDataFileResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "createDataFileResponse_Dec_Holder"

    class createDataFiles_Dec(ElementDeclaration):
        literal = "createDataFiles"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","createDataFiles")
            kw["aname"] = "_createDataFiles"
            if ns0.createDataFiles_Def not in ns0.createDataFiles_Dec.__bases__:
                bases = list(ns0.createDataFiles_Dec.__bases__)
                bases.insert(0, ns0.createDataFiles_Def)
                ns0.createDataFiles_Dec.__bases__ = tuple(bases)

            ns0.createDataFiles_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "createDataFiles_Dec_Holder"

    class createDataFilesResponse_Dec(ElementDeclaration):
        literal = "createDataFilesResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","createDataFilesResponse")
            kw["aname"] = "_createDataFilesResponse"
            if ns0.createDataFilesResponse_Def not in ns0.createDataFilesResponse_Dec.__bases__:
                bases = list(ns0.createDataFilesResponse_Dec.__bases__)
                bases.insert(0, ns0.createDataFilesResponse_Def)
                ns0.createDataFilesResponse_Dec.__bases__ = tuple(bases)

            ns0.createDataFilesResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "createDataFilesResponse_Dec_Holder"

    class createDataSet_Dec(ElementDeclaration):
        literal = "createDataSet"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","createDataSet")
            kw["aname"] = "_createDataSet"
            if ns0.createDataSet_Def not in ns0.createDataSet_Dec.__bases__:
                bases = list(ns0.createDataSet_Dec.__bases__)
                bases.insert(0, ns0.createDataSet_Def)
                ns0.createDataSet_Dec.__bases__ = tuple(bases)

            ns0.createDataSet_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "createDataSet_Dec_Holder"

    class createDataSetResponse_Dec(ElementDeclaration):
        literal = "createDataSetResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","createDataSetResponse")
            kw["aname"] = "_createDataSetResponse"
            if ns0.createDataSetResponse_Def not in ns0.createDataSetResponse_Dec.__bases__:
                bases = list(ns0.createDataSetResponse_Dec.__bases__)
                bases.insert(0, ns0.createDataSetResponse_Def)
                ns0.createDataSetResponse_Dec.__bases__ = tuple(bases)

            ns0.createDataSetResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "createDataSetResponse_Dec_Holder"

    class createDataSets_Dec(ElementDeclaration):
        literal = "createDataSets"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","createDataSets")
            kw["aname"] = "_createDataSets"
            if ns0.createDataSets_Def not in ns0.createDataSets_Dec.__bases__:
                bases = list(ns0.createDataSets_Dec.__bases__)
                bases.insert(0, ns0.createDataSets_Def)
                ns0.createDataSets_Dec.__bases__ = tuple(bases)

            ns0.createDataSets_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "createDataSets_Dec_Holder"

    class createDataSetsResponse_Dec(ElementDeclaration):
        literal = "createDataSetsResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","createDataSetsResponse")
            kw["aname"] = "_createDataSetsResponse"
            if ns0.createDataSetsResponse_Def not in ns0.createDataSetsResponse_Dec.__bases__:
                bases = list(ns0.createDataSetsResponse_Dec.__bases__)
                bases.insert(0, ns0.createDataSetsResponse_Def)
                ns0.createDataSetsResponse_Dec.__bases__ = tuple(bases)

            ns0.createDataSetsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "createDataSetsResponse_Dec_Holder"

    class createInvestigation_Dec(ElementDeclaration):
        literal = "createInvestigation"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","createInvestigation")
            kw["aname"] = "_createInvestigation"
            if ns0.createInvestigation_Def not in ns0.createInvestigation_Dec.__bases__:
                bases = list(ns0.createInvestigation_Dec.__bases__)
                bases.insert(0, ns0.createInvestigation_Def)
                ns0.createInvestigation_Dec.__bases__ = tuple(bases)

            ns0.createInvestigation_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "createInvestigation_Dec_Holder"

    class createInvestigationResponse_Dec(ElementDeclaration):
        literal = "createInvestigationResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","createInvestigationResponse")
            kw["aname"] = "_createInvestigationResponse"
            if ns0.createInvestigationResponse_Def not in ns0.createInvestigationResponse_Dec.__bases__:
                bases = list(ns0.createInvestigationResponse_Dec.__bases__)
                bases.insert(0, ns0.createInvestigationResponse_Def)
                ns0.createInvestigationResponse_Dec.__bases__ = tuple(bases)

            ns0.createInvestigationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "createInvestigationResponse_Dec_Holder"

    class datafile_Dec(ElementDeclaration):
        literal = "datafile"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","datafile")
            kw["aname"] = "_datafile"
            if ns0.datafile_Def not in ns0.datafile_Dec.__bases__:
                bases = list(ns0.datafile_Dec.__bases__)
                bases.insert(0, ns0.datafile_Def)
                ns0.datafile_Dec.__bases__ = tuple(bases)

            ns0.datafile_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "datafile_Dec_Holder"

    class datafileParameter_Dec(ElementDeclaration):
        literal = "datafileParameter"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","datafileParameter")
            kw["aname"] = "_datafileParameter"
            if ns0.datafileParameter_Def not in ns0.datafileParameter_Dec.__bases__:
                bases = list(ns0.datafileParameter_Dec.__bases__)
                bases.insert(0, ns0.datafileParameter_Def)
                ns0.datafileParameter_Dec.__bases__ = tuple(bases)

            ns0.datafileParameter_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "datafileParameter_Dec_Holder"

    class dataset_Dec(ElementDeclaration):
        literal = "dataset"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","dataset")
            kw["aname"] = "_dataset"
            if ns0.dataset_Def not in ns0.dataset_Dec.__bases__:
                bases = list(ns0.dataset_Dec.__bases__)
                bases.insert(0, ns0.dataset_Def)
                ns0.dataset_Dec.__bases__ = tuple(bases)

            ns0.dataset_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "dataset_Dec_Holder"

    class deleteAuthorisation_Dec(ElementDeclaration):
        literal = "deleteAuthorisation"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","deleteAuthorisation")
            kw["aname"] = "_deleteAuthorisation"
            if ns0.deleteAuthorisation_Def not in ns0.deleteAuthorisation_Dec.__bases__:
                bases = list(ns0.deleteAuthorisation_Dec.__bases__)
                bases.insert(0, ns0.deleteAuthorisation_Def)
                ns0.deleteAuthorisation_Dec.__bases__ = tuple(bases)

            ns0.deleteAuthorisation_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "deleteAuthorisation_Dec_Holder"

    class deleteAuthorisationResponse_Dec(ElementDeclaration):
        literal = "deleteAuthorisationResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","deleteAuthorisationResponse")
            kw["aname"] = "_deleteAuthorisationResponse"
            if ns0.deleteAuthorisationResponse_Def not in ns0.deleteAuthorisationResponse_Dec.__bases__:
                bases = list(ns0.deleteAuthorisationResponse_Dec.__bases__)
                bases.insert(0, ns0.deleteAuthorisationResponse_Def)
                ns0.deleteAuthorisationResponse_Dec.__bases__ = tuple(bases)

            ns0.deleteAuthorisationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "deleteAuthorisationResponse_Dec_Holder"

    class deleteDataFile_Dec(ElementDeclaration):
        literal = "deleteDataFile"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","deleteDataFile")
            kw["aname"] = "_deleteDataFile"
            if ns0.deleteDataFile_Def not in ns0.deleteDataFile_Dec.__bases__:
                bases = list(ns0.deleteDataFile_Dec.__bases__)
                bases.insert(0, ns0.deleteDataFile_Def)
                ns0.deleteDataFile_Dec.__bases__ = tuple(bases)

            ns0.deleteDataFile_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "deleteDataFile_Dec_Holder"

    class deleteDataFileParameter_Dec(ElementDeclaration):
        literal = "deleteDataFileParameter"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","deleteDataFileParameter")
            kw["aname"] = "_deleteDataFileParameter"
            if ns0.deleteDataFileParameter_Def not in ns0.deleteDataFileParameter_Dec.__bases__:
                bases = list(ns0.deleteDataFileParameter_Dec.__bases__)
                bases.insert(0, ns0.deleteDataFileParameter_Def)
                ns0.deleteDataFileParameter_Dec.__bases__ = tuple(bases)

            ns0.deleteDataFileParameter_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "deleteDataFileParameter_Dec_Holder"

    class deleteDataFileParameterResponse_Dec(ElementDeclaration):
        literal = "deleteDataFileParameterResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","deleteDataFileParameterResponse")
            kw["aname"] = "_deleteDataFileParameterResponse"
            if ns0.deleteDataFileParameterResponse_Def not in ns0.deleteDataFileParameterResponse_Dec.__bases__:
                bases = list(ns0.deleteDataFileParameterResponse_Dec.__bases__)
                bases.insert(0, ns0.deleteDataFileParameterResponse_Def)
                ns0.deleteDataFileParameterResponse_Dec.__bases__ = tuple(bases)

            ns0.deleteDataFileParameterResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "deleteDataFileParameterResponse_Dec_Holder"

    class deleteDataFileResponse_Dec(ElementDeclaration):
        literal = "deleteDataFileResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","deleteDataFileResponse")
            kw["aname"] = "_deleteDataFileResponse"
            if ns0.deleteDataFileResponse_Def not in ns0.deleteDataFileResponse_Dec.__bases__:
                bases = list(ns0.deleteDataFileResponse_Dec.__bases__)
                bases.insert(0, ns0.deleteDataFileResponse_Def)
                ns0.deleteDataFileResponse_Dec.__bases__ = tuple(bases)

            ns0.deleteDataFileResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "deleteDataFileResponse_Dec_Holder"

    class deleteDataSet_Dec(ElementDeclaration):
        literal = "deleteDataSet"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","deleteDataSet")
            kw["aname"] = "_deleteDataSet"
            if ns0.deleteDataSet_Def not in ns0.deleteDataSet_Dec.__bases__:
                bases = list(ns0.deleteDataSet_Dec.__bases__)
                bases.insert(0, ns0.deleteDataSet_Def)
                ns0.deleteDataSet_Dec.__bases__ = tuple(bases)

            ns0.deleteDataSet_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "deleteDataSet_Dec_Holder"

    class deleteDataSetParameter_Dec(ElementDeclaration):
        literal = "deleteDataSetParameter"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","deleteDataSetParameter")
            kw["aname"] = "_deleteDataSetParameter"
            if ns0.deleteDataSetParameter_Def not in ns0.deleteDataSetParameter_Dec.__bases__:
                bases = list(ns0.deleteDataSetParameter_Dec.__bases__)
                bases.insert(0, ns0.deleteDataSetParameter_Def)
                ns0.deleteDataSetParameter_Dec.__bases__ = tuple(bases)

            ns0.deleteDataSetParameter_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "deleteDataSetParameter_Dec_Holder"

    class deleteDataSetParameterResponse_Dec(ElementDeclaration):
        literal = "deleteDataSetParameterResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","deleteDataSetParameterResponse")
            kw["aname"] = "_deleteDataSetParameterResponse"
            if ns0.deleteDataSetParameterResponse_Def not in ns0.deleteDataSetParameterResponse_Dec.__bases__:
                bases = list(ns0.deleteDataSetParameterResponse_Dec.__bases__)
                bases.insert(0, ns0.deleteDataSetParameterResponse_Def)
                ns0.deleteDataSetParameterResponse_Dec.__bases__ = tuple(bases)

            ns0.deleteDataSetParameterResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "deleteDataSetParameterResponse_Dec_Holder"

    class deleteDataSetResponse_Dec(ElementDeclaration):
        literal = "deleteDataSetResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","deleteDataSetResponse")
            kw["aname"] = "_deleteDataSetResponse"
            if ns0.deleteDataSetResponse_Def not in ns0.deleteDataSetResponse_Dec.__bases__:
                bases = list(ns0.deleteDataSetResponse_Dec.__bases__)
                bases.insert(0, ns0.deleteDataSetResponse_Def)
                ns0.deleteDataSetResponse_Dec.__bases__ = tuple(bases)

            ns0.deleteDataSetResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "deleteDataSetResponse_Dec_Holder"

    class deleteInvestigation_Dec(ElementDeclaration):
        literal = "deleteInvestigation"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","deleteInvestigation")
            kw["aname"] = "_deleteInvestigation"
            if ns0.deleteInvestigation_Def not in ns0.deleteInvestigation_Dec.__bases__:
                bases = list(ns0.deleteInvestigation_Dec.__bases__)
                bases.insert(0, ns0.deleteInvestigation_Def)
                ns0.deleteInvestigation_Dec.__bases__ = tuple(bases)

            ns0.deleteInvestigation_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "deleteInvestigation_Dec_Holder"

    class deleteInvestigationResponse_Dec(ElementDeclaration):
        literal = "deleteInvestigationResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","deleteInvestigationResponse")
            kw["aname"] = "_deleteInvestigationResponse"
            if ns0.deleteInvestigationResponse_Def not in ns0.deleteInvestigationResponse_Dec.__bases__:
                bases = list(ns0.deleteInvestigationResponse_Dec.__bases__)
                bases.insert(0, ns0.deleteInvestigationResponse_Def)
                ns0.deleteInvestigationResponse_Dec.__bases__ = tuple(bases)

            ns0.deleteInvestigationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "deleteInvestigationResponse_Dec_Holder"

    class deleteInvestigator_Dec(ElementDeclaration):
        literal = "deleteInvestigator"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","deleteInvestigator")
            kw["aname"] = "_deleteInvestigator"
            if ns0.deleteInvestigator_Def not in ns0.deleteInvestigator_Dec.__bases__:
                bases = list(ns0.deleteInvestigator_Dec.__bases__)
                bases.insert(0, ns0.deleteInvestigator_Def)
                ns0.deleteInvestigator_Dec.__bases__ = tuple(bases)

            ns0.deleteInvestigator_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "deleteInvestigator_Dec_Holder"

    class deleteInvestigatorResponse_Dec(ElementDeclaration):
        literal = "deleteInvestigatorResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","deleteInvestigatorResponse")
            kw["aname"] = "_deleteInvestigatorResponse"
            if ns0.deleteInvestigatorResponse_Def not in ns0.deleteInvestigatorResponse_Dec.__bases__:
                bases = list(ns0.deleteInvestigatorResponse_Dec.__bases__)
                bases.insert(0, ns0.deleteInvestigatorResponse_Def)
                ns0.deleteInvestigatorResponse_Dec.__bases__ = tuple(bases)

            ns0.deleteInvestigatorResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "deleteInvestigatorResponse_Dec_Holder"

    class deleteKeyword_Dec(ElementDeclaration):
        literal = "deleteKeyword"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","deleteKeyword")
            kw["aname"] = "_deleteKeyword"
            if ns0.deleteKeyword_Def not in ns0.deleteKeyword_Dec.__bases__:
                bases = list(ns0.deleteKeyword_Dec.__bases__)
                bases.insert(0, ns0.deleteKeyword_Def)
                ns0.deleteKeyword_Dec.__bases__ = tuple(bases)

            ns0.deleteKeyword_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "deleteKeyword_Dec_Holder"

    class deleteKeywordResponse_Dec(ElementDeclaration):
        literal = "deleteKeywordResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","deleteKeywordResponse")
            kw["aname"] = "_deleteKeywordResponse"
            if ns0.deleteKeywordResponse_Def not in ns0.deleteKeywordResponse_Dec.__bases__:
                bases = list(ns0.deleteKeywordResponse_Dec.__bases__)
                bases.insert(0, ns0.deleteKeywordResponse_Def)
                ns0.deleteKeywordResponse_Dec.__bases__ = tuple(bases)

            ns0.deleteKeywordResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "deleteKeywordResponse_Dec_Holder"

    class deletePublication_Dec(ElementDeclaration):
        literal = "deletePublication"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","deletePublication")
            kw["aname"] = "_deletePublication"
            if ns0.deletePublication_Def not in ns0.deletePublication_Dec.__bases__:
                bases = list(ns0.deletePublication_Dec.__bases__)
                bases.insert(0, ns0.deletePublication_Def)
                ns0.deletePublication_Dec.__bases__ = tuple(bases)

            ns0.deletePublication_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "deletePublication_Dec_Holder"

    class deletePublicationResponse_Dec(ElementDeclaration):
        literal = "deletePublicationResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","deletePublicationResponse")
            kw["aname"] = "_deletePublicationResponse"
            if ns0.deletePublicationResponse_Def not in ns0.deletePublicationResponse_Dec.__bases__:
                bases = list(ns0.deletePublicationResponse_Dec.__bases__)
                bases.insert(0, ns0.deletePublicationResponse_Def)
                ns0.deletePublicationResponse_Dec.__bases__ = tuple(bases)

            ns0.deletePublicationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "deletePublicationResponse_Dec_Holder"

    class deleteSample_Dec(ElementDeclaration):
        literal = "deleteSample"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","deleteSample")
            kw["aname"] = "_deleteSample"
            if ns0.deleteSample_Def not in ns0.deleteSample_Dec.__bases__:
                bases = list(ns0.deleteSample_Dec.__bases__)
                bases.insert(0, ns0.deleteSample_Def)
                ns0.deleteSample_Dec.__bases__ = tuple(bases)

            ns0.deleteSample_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "deleteSample_Dec_Holder"

    class deleteSampleParameter_Dec(ElementDeclaration):
        literal = "deleteSampleParameter"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","deleteSampleParameter")
            kw["aname"] = "_deleteSampleParameter"
            if ns0.deleteSampleParameter_Def not in ns0.deleteSampleParameter_Dec.__bases__:
                bases = list(ns0.deleteSampleParameter_Dec.__bases__)
                bases.insert(0, ns0.deleteSampleParameter_Def)
                ns0.deleteSampleParameter_Dec.__bases__ = tuple(bases)

            ns0.deleteSampleParameter_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "deleteSampleParameter_Dec_Holder"

    class deleteSampleParameterResponse_Dec(ElementDeclaration):
        literal = "deleteSampleParameterResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","deleteSampleParameterResponse")
            kw["aname"] = "_deleteSampleParameterResponse"
            if ns0.deleteSampleParameterResponse_Def not in ns0.deleteSampleParameterResponse_Dec.__bases__:
                bases = list(ns0.deleteSampleParameterResponse_Dec.__bases__)
                bases.insert(0, ns0.deleteSampleParameterResponse_Def)
                ns0.deleteSampleParameterResponse_Dec.__bases__ = tuple(bases)

            ns0.deleteSampleParameterResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "deleteSampleParameterResponse_Dec_Holder"

    class deleteSampleResponse_Dec(ElementDeclaration):
        literal = "deleteSampleResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","deleteSampleResponse")
            kw["aname"] = "_deleteSampleResponse"
            if ns0.deleteSampleResponse_Def not in ns0.deleteSampleResponse_Dec.__bases__:
                bases = list(ns0.deleteSampleResponse_Dec.__bases__)
                bases.insert(0, ns0.deleteSampleResponse_Def)
                ns0.deleteSampleResponse_Dec.__bases__ = tuple(bases)

            ns0.deleteSampleResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "deleteSampleResponse_Dec_Holder"

    class downloadDatafile_Dec(ElementDeclaration):
        literal = "downloadDatafile"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","downloadDatafile")
            kw["aname"] = "_downloadDatafile"
            if ns0.downloadDatafile_Def not in ns0.downloadDatafile_Dec.__bases__:
                bases = list(ns0.downloadDatafile_Dec.__bases__)
                bases.insert(0, ns0.downloadDatafile_Def)
                ns0.downloadDatafile_Dec.__bases__ = tuple(bases)

            ns0.downloadDatafile_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "downloadDatafile_Dec_Holder"

    class downloadDatafileResponse_Dec(ElementDeclaration):
        literal = "downloadDatafileResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","downloadDatafileResponse")
            kw["aname"] = "_downloadDatafileResponse"
            if ns0.downloadDatafileResponse_Def not in ns0.downloadDatafileResponse_Dec.__bases__:
                bases = list(ns0.downloadDatafileResponse_Dec.__bases__)
                bases.insert(0, ns0.downloadDatafileResponse_Def)
                ns0.downloadDatafileResponse_Dec.__bases__ = tuple(bases)

            ns0.downloadDatafileResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "downloadDatafileResponse_Dec_Holder"

    class downloadDatafiles_Dec(ElementDeclaration):
        literal = "downloadDatafiles"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","downloadDatafiles")
            kw["aname"] = "_downloadDatafiles"
            if ns0.downloadDatafiles_Def not in ns0.downloadDatafiles_Dec.__bases__:
                bases = list(ns0.downloadDatafiles_Dec.__bases__)
                bases.insert(0, ns0.downloadDatafiles_Def)
                ns0.downloadDatafiles_Dec.__bases__ = tuple(bases)

            ns0.downloadDatafiles_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "downloadDatafiles_Dec_Holder"

    class downloadDatafilesResponse_Dec(ElementDeclaration):
        literal = "downloadDatafilesResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","downloadDatafilesResponse")
            kw["aname"] = "_downloadDatafilesResponse"
            if ns0.downloadDatafilesResponse_Def not in ns0.downloadDatafilesResponse_Dec.__bases__:
                bases = list(ns0.downloadDatafilesResponse_Dec.__bases__)
                bases.insert(0, ns0.downloadDatafilesResponse_Def)
                ns0.downloadDatafilesResponse_Dec.__bases__ = tuple(bases)

            ns0.downloadDatafilesResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "downloadDatafilesResponse_Dec_Holder"

    class downloadDataset_Dec(ElementDeclaration):
        literal = "downloadDataset"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","downloadDataset")
            kw["aname"] = "_downloadDataset"
            if ns0.downloadDataset_Def not in ns0.downloadDataset_Dec.__bases__:
                bases = list(ns0.downloadDataset_Dec.__bases__)
                bases.insert(0, ns0.downloadDataset_Def)
                ns0.downloadDataset_Dec.__bases__ = tuple(bases)

            ns0.downloadDataset_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "downloadDataset_Dec_Holder"

    class downloadDatasetResponse_Dec(ElementDeclaration):
        literal = "downloadDatasetResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","downloadDatasetResponse")
            kw["aname"] = "_downloadDatasetResponse"
            if ns0.downloadDatasetResponse_Def not in ns0.downloadDatasetResponse_Dec.__bases__:
                bases = list(ns0.downloadDatasetResponse_Dec.__bases__)
                bases.insert(0, ns0.downloadDatasetResponse_Def)
                ns0.downloadDatasetResponse_Dec.__bases__ = tuple(bases)

            ns0.downloadDatasetResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "downloadDatasetResponse_Dec_Holder"

    class facilityUser_Dec(ElementDeclaration):
        literal = "facilityUser"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","facilityUser")
            kw["aname"] = "_facilityUser"
            if ns0.facilityUser_Def not in ns0.facilityUser_Dec.__bases__:
                bases = list(ns0.facilityUser_Dec.__bases__)
                bases.insert(0, ns0.facilityUser_Def)
                ns0.facilityUser_Dec.__bases__ = tuple(bases)

            ns0.facilityUser_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "facilityUser_Dec_Holder"

    class getAllKeywords_Dec(ElementDeclaration):
        literal = "getAllKeywords"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getAllKeywords")
            kw["aname"] = "_getAllKeywords"
            if ns0.getAllKeywords_Def not in ns0.getAllKeywords_Dec.__bases__:
                bases = list(ns0.getAllKeywords_Dec.__bases__)
                bases.insert(0, ns0.getAllKeywords_Def)
                ns0.getAllKeywords_Dec.__bases__ = tuple(bases)

            ns0.getAllKeywords_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getAllKeywords_Dec_Holder"

    class getAllKeywordsResponse_Dec(ElementDeclaration):
        literal = "getAllKeywordsResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getAllKeywordsResponse")
            kw["aname"] = "_getAllKeywordsResponse"
            if ns0.getAllKeywordsResponse_Def not in ns0.getAllKeywordsResponse_Dec.__bases__:
                bases = list(ns0.getAllKeywordsResponse_Dec.__bases__)
                bases.insert(0, ns0.getAllKeywordsResponse_Def)
                ns0.getAllKeywordsResponse_Dec.__bases__ = tuple(bases)

            ns0.getAllKeywordsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getAllKeywordsResponse_Dec_Holder"

    class getAuthorisations_Dec(ElementDeclaration):
        literal = "getAuthorisations"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getAuthorisations")
            kw["aname"] = "_getAuthorisations"
            if ns0.getAuthorisations_Def not in ns0.getAuthorisations_Dec.__bases__:
                bases = list(ns0.getAuthorisations_Dec.__bases__)
                bases.insert(0, ns0.getAuthorisations_Def)
                ns0.getAuthorisations_Dec.__bases__ = tuple(bases)

            ns0.getAuthorisations_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getAuthorisations_Dec_Holder"

    class getAuthorisationsResponse_Dec(ElementDeclaration):
        literal = "getAuthorisationsResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getAuthorisationsResponse")
            kw["aname"] = "_getAuthorisationsResponse"
            if ns0.getAuthorisationsResponse_Def not in ns0.getAuthorisationsResponse_Dec.__bases__:
                bases = list(ns0.getAuthorisationsResponse_Dec.__bases__)
                bases.insert(0, ns0.getAuthorisationsResponse_Def)
                ns0.getAuthorisationsResponse_Dec.__bases__ = tuple(bases)

            ns0.getAuthorisationsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getAuthorisationsResponse_Dec_Holder"

    class getDatafile_Dec(ElementDeclaration):
        literal = "getDatafile"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getDatafile")
            kw["aname"] = "_getDatafile"
            if ns0.getDatafile_Def not in ns0.getDatafile_Dec.__bases__:
                bases = list(ns0.getDatafile_Dec.__bases__)
                bases.insert(0, ns0.getDatafile_Def)
                ns0.getDatafile_Dec.__bases__ = tuple(bases)

            ns0.getDatafile_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getDatafile_Dec_Holder"

    class getDatafileResponse_Dec(ElementDeclaration):
        literal = "getDatafileResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getDatafileResponse")
            kw["aname"] = "_getDatafileResponse"
            if ns0.getDatafileResponse_Def not in ns0.getDatafileResponse_Dec.__bases__:
                bases = list(ns0.getDatafileResponse_Dec.__bases__)
                bases.insert(0, ns0.getDatafileResponse_Def)
                ns0.getDatafileResponse_Dec.__bases__ = tuple(bases)

            ns0.getDatafileResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getDatafileResponse_Dec_Holder"

    class getDatafiles_Dec(ElementDeclaration):
        literal = "getDatafiles"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getDatafiles")
            kw["aname"] = "_getDatafiles"
            if ns0.getDatafiles_Def not in ns0.getDatafiles_Dec.__bases__:
                bases = list(ns0.getDatafiles_Dec.__bases__)
                bases.insert(0, ns0.getDatafiles_Def)
                ns0.getDatafiles_Dec.__bases__ = tuple(bases)

            ns0.getDatafiles_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getDatafiles_Dec_Holder"

    class getDatafilesResponse_Dec(ElementDeclaration):
        literal = "getDatafilesResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getDatafilesResponse")
            kw["aname"] = "_getDatafilesResponse"
            if ns0.getDatafilesResponse_Def not in ns0.getDatafilesResponse_Dec.__bases__:
                bases = list(ns0.getDatafilesResponse_Dec.__bases__)
                bases.insert(0, ns0.getDatafilesResponse_Def)
                ns0.getDatafilesResponse_Dec.__bases__ = tuple(bases)

            ns0.getDatafilesResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getDatafilesResponse_Dec_Holder"

    class getDataset_Dec(ElementDeclaration):
        literal = "getDataset"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getDataset")
            kw["aname"] = "_getDataset"
            if ns0.getDataset_Def not in ns0.getDataset_Dec.__bases__:
                bases = list(ns0.getDataset_Dec.__bases__)
                bases.insert(0, ns0.getDataset_Def)
                ns0.getDataset_Dec.__bases__ = tuple(bases)

            ns0.getDataset_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getDataset_Dec_Holder"

    class getDatasetIncludes_Dec(ElementDeclaration):
        literal = "getDatasetIncludes"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getDatasetIncludes")
            kw["aname"] = "_getDatasetIncludes"
            if ns0.getDatasetIncludes_Def not in ns0.getDatasetIncludes_Dec.__bases__:
                bases = list(ns0.getDatasetIncludes_Dec.__bases__)
                bases.insert(0, ns0.getDatasetIncludes_Def)
                ns0.getDatasetIncludes_Dec.__bases__ = tuple(bases)

            ns0.getDatasetIncludes_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getDatasetIncludes_Dec_Holder"

    class getDatasetIncludesResponse_Dec(ElementDeclaration):
        literal = "getDatasetIncludesResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getDatasetIncludesResponse")
            kw["aname"] = "_getDatasetIncludesResponse"
            if ns0.getDatasetIncludesResponse_Def not in ns0.getDatasetIncludesResponse_Dec.__bases__:
                bases = list(ns0.getDatasetIncludesResponse_Dec.__bases__)
                bases.insert(0, ns0.getDatasetIncludesResponse_Def)
                ns0.getDatasetIncludesResponse_Dec.__bases__ = tuple(bases)

            ns0.getDatasetIncludesResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getDatasetIncludesResponse_Dec_Holder"

    class getDatasetResponse_Dec(ElementDeclaration):
        literal = "getDatasetResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getDatasetResponse")
            kw["aname"] = "_getDatasetResponse"
            if ns0.getDatasetResponse_Def not in ns0.getDatasetResponse_Dec.__bases__:
                bases = list(ns0.getDatasetResponse_Dec.__bases__)
                bases.insert(0, ns0.getDatasetResponse_Def)
                ns0.getDatasetResponse_Dec.__bases__ = tuple(bases)

            ns0.getDatasetResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getDatasetResponse_Dec_Holder"

    class getDatasets_Dec(ElementDeclaration):
        literal = "getDatasets"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getDatasets")
            kw["aname"] = "_getDatasets"
            if ns0.getDatasets_Def not in ns0.getDatasets_Dec.__bases__:
                bases = list(ns0.getDatasets_Dec.__bases__)
                bases.insert(0, ns0.getDatasets_Def)
                ns0.getDatasets_Dec.__bases__ = tuple(bases)

            ns0.getDatasets_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getDatasets_Dec_Holder"

    class getDatasetsResponse_Dec(ElementDeclaration):
        literal = "getDatasetsResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getDatasetsResponse")
            kw["aname"] = "_getDatasetsResponse"
            if ns0.getDatasetsResponse_Def not in ns0.getDatasetsResponse_Dec.__bases__:
                bases = list(ns0.getDatasetsResponse_Dec.__bases__)
                bases.insert(0, ns0.getDatasetsResponse_Def)
                ns0.getDatasetsResponse_Dec.__bases__ = tuple(bases)

            ns0.getDatasetsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getDatasetsResponse_Dec_Holder"

    class getInvestigation_Dec(ElementDeclaration):
        literal = "getInvestigation"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getInvestigation")
            kw["aname"] = "_getInvestigation"
            if ns0.getInvestigation_Def not in ns0.getInvestigation_Dec.__bases__:
                bases = list(ns0.getInvestigation_Dec.__bases__)
                bases.insert(0, ns0.getInvestigation_Def)
                ns0.getInvestigation_Dec.__bases__ = tuple(bases)

            ns0.getInvestigation_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getInvestigation_Dec_Holder"

    class getInvestigationIncludes_Dec(ElementDeclaration):
        literal = "getInvestigationIncludes"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getInvestigationIncludes")
            kw["aname"] = "_getInvestigationIncludes"
            if ns0.getInvestigationIncludes_Def not in ns0.getInvestigationIncludes_Dec.__bases__:
                bases = list(ns0.getInvestigationIncludes_Dec.__bases__)
                bases.insert(0, ns0.getInvestigationIncludes_Def)
                ns0.getInvestigationIncludes_Dec.__bases__ = tuple(bases)

            ns0.getInvestigationIncludes_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getInvestigationIncludes_Dec_Holder"

    class getInvestigationIncludesResponse_Dec(ElementDeclaration):
        literal = "getInvestigationIncludesResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getInvestigationIncludesResponse")
            kw["aname"] = "_getInvestigationIncludesResponse"
            if ns0.getInvestigationIncludesResponse_Def not in ns0.getInvestigationIncludesResponse_Dec.__bases__:
                bases = list(ns0.getInvestigationIncludesResponse_Dec.__bases__)
                bases.insert(0, ns0.getInvestigationIncludesResponse_Def)
                ns0.getInvestigationIncludesResponse_Dec.__bases__ = tuple(bases)

            ns0.getInvestigationIncludesResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getInvestigationIncludesResponse_Dec_Holder"

    class getInvestigationResponse_Dec(ElementDeclaration):
        literal = "getInvestigationResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getInvestigationResponse")
            kw["aname"] = "_getInvestigationResponse"
            if ns0.getInvestigationResponse_Def not in ns0.getInvestigationResponse_Dec.__bases__:
                bases = list(ns0.getInvestigationResponse_Dec.__bases__)
                bases.insert(0, ns0.getInvestigationResponse_Def)
                ns0.getInvestigationResponse_Dec.__bases__ = tuple(bases)

            ns0.getInvestigationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getInvestigationResponse_Dec_Holder"

    class getInvestigationsIncludes_Dec(ElementDeclaration):
        literal = "getInvestigationsIncludes"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getInvestigationsIncludes")
            kw["aname"] = "_getInvestigationsIncludes"
            if ns0.getInvestigationsIncludes_Def not in ns0.getInvestigationsIncludes_Dec.__bases__:
                bases = list(ns0.getInvestigationsIncludes_Dec.__bases__)
                bases.insert(0, ns0.getInvestigationsIncludes_Def)
                ns0.getInvestigationsIncludes_Dec.__bases__ = tuple(bases)

            ns0.getInvestigationsIncludes_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getInvestigationsIncludes_Dec_Holder"

    class getInvestigationsIncludesResponse_Dec(ElementDeclaration):
        literal = "getInvestigationsIncludesResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getInvestigationsIncludesResponse")
            kw["aname"] = "_getInvestigationsIncludesResponse"
            if ns0.getInvestigationsIncludesResponse_Def not in ns0.getInvestigationsIncludesResponse_Dec.__bases__:
                bases = list(ns0.getInvestigationsIncludesResponse_Dec.__bases__)
                bases.insert(0, ns0.getInvestigationsIncludesResponse_Def)
                ns0.getInvestigationsIncludesResponse_Dec.__bases__ = tuple(bases)

            ns0.getInvestigationsIncludesResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getInvestigationsIncludesResponse_Dec_Holder"

    class getKeywordsForUser_Dec(ElementDeclaration):
        literal = "getKeywordsForUser"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getKeywordsForUser")
            kw["aname"] = "_getKeywordsForUser"
            if ns0.getKeywordsForUser_Def not in ns0.getKeywordsForUser_Dec.__bases__:
                bases = list(ns0.getKeywordsForUser_Dec.__bases__)
                bases.insert(0, ns0.getKeywordsForUser_Def)
                ns0.getKeywordsForUser_Dec.__bases__ = tuple(bases)

            ns0.getKeywordsForUser_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getKeywordsForUser_Dec_Holder"

    class getKeywordsForUserMax_Dec(ElementDeclaration):
        literal = "getKeywordsForUserMax"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getKeywordsForUserMax")
            kw["aname"] = "_getKeywordsForUserMax"
            if ns0.getKeywordsForUserMax_Def not in ns0.getKeywordsForUserMax_Dec.__bases__:
                bases = list(ns0.getKeywordsForUserMax_Dec.__bases__)
                bases.insert(0, ns0.getKeywordsForUserMax_Def)
                ns0.getKeywordsForUserMax_Dec.__bases__ = tuple(bases)

            ns0.getKeywordsForUserMax_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getKeywordsForUserMax_Dec_Holder"

    class getKeywordsForUserMaxResponse_Dec(ElementDeclaration):
        literal = "getKeywordsForUserMaxResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getKeywordsForUserMaxResponse")
            kw["aname"] = "_getKeywordsForUserMaxResponse"
            if ns0.getKeywordsForUserMaxResponse_Def not in ns0.getKeywordsForUserMaxResponse_Dec.__bases__:
                bases = list(ns0.getKeywordsForUserMaxResponse_Dec.__bases__)
                bases.insert(0, ns0.getKeywordsForUserMaxResponse_Def)
                ns0.getKeywordsForUserMaxResponse_Dec.__bases__ = tuple(bases)

            ns0.getKeywordsForUserMaxResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getKeywordsForUserMaxResponse_Dec_Holder"

    class getKeywordsForUserResponse_Dec(ElementDeclaration):
        literal = "getKeywordsForUserResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getKeywordsForUserResponse")
            kw["aname"] = "_getKeywordsForUserResponse"
            if ns0.getKeywordsForUserResponse_Def not in ns0.getKeywordsForUserResponse_Dec.__bases__:
                bases = list(ns0.getKeywordsForUserResponse_Dec.__bases__)
                bases.insert(0, ns0.getKeywordsForUserResponse_Def)
                ns0.getKeywordsForUserResponse_Dec.__bases__ = tuple(bases)

            ns0.getKeywordsForUserResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getKeywordsForUserResponse_Dec_Holder"

    class getKeywordsForUserStartWithMax_Dec(ElementDeclaration):
        literal = "getKeywordsForUserStartWithMax"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getKeywordsForUserStartWithMax")
            kw["aname"] = "_getKeywordsForUserStartWithMax"
            if ns0.getKeywordsForUserStartWithMax_Def not in ns0.getKeywordsForUserStartWithMax_Dec.__bases__:
                bases = list(ns0.getKeywordsForUserStartWithMax_Dec.__bases__)
                bases.insert(0, ns0.getKeywordsForUserStartWithMax_Def)
                ns0.getKeywordsForUserStartWithMax_Dec.__bases__ = tuple(bases)

            ns0.getKeywordsForUserStartWithMax_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getKeywordsForUserStartWithMax_Dec_Holder"

    class getKeywordsForUserStartWithMaxResponse_Dec(ElementDeclaration):
        literal = "getKeywordsForUserStartWithMaxResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getKeywordsForUserStartWithMaxResponse")
            kw["aname"] = "_getKeywordsForUserStartWithMaxResponse"
            if ns0.getKeywordsForUserStartWithMaxResponse_Def not in ns0.getKeywordsForUserStartWithMaxResponse_Dec.__bases__:
                bases = list(ns0.getKeywordsForUserStartWithMaxResponse_Dec.__bases__)
                bases.insert(0, ns0.getKeywordsForUserStartWithMaxResponse_Def)
                ns0.getKeywordsForUserStartWithMaxResponse_Dec.__bases__ = tuple(bases)

            ns0.getKeywordsForUserStartWithMaxResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getKeywordsForUserStartWithMaxResponse_Dec_Holder"

    class getKeywordsForUserType_Dec(ElementDeclaration):
        literal = "getKeywordsForUserType"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getKeywordsForUserType")
            kw["aname"] = "_getKeywordsForUserType"
            if ns0.getKeywordsForUserType_Def not in ns0.getKeywordsForUserType_Dec.__bases__:
                bases = list(ns0.getKeywordsForUserType_Dec.__bases__)
                bases.insert(0, ns0.getKeywordsForUserType_Def)
                ns0.getKeywordsForUserType_Dec.__bases__ = tuple(bases)

            ns0.getKeywordsForUserType_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getKeywordsForUserType_Dec_Holder"

    class getKeywordsForUserTypeResponse_Dec(ElementDeclaration):
        literal = "getKeywordsForUserTypeResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getKeywordsForUserTypeResponse")
            kw["aname"] = "_getKeywordsForUserTypeResponse"
            if ns0.getKeywordsForUserTypeResponse_Def not in ns0.getKeywordsForUserTypeResponse_Dec.__bases__:
                bases = list(ns0.getKeywordsForUserTypeResponse_Dec.__bases__)
                bases.insert(0, ns0.getKeywordsForUserTypeResponse_Def)
                ns0.getKeywordsForUserTypeResponse_Dec.__bases__ = tuple(bases)

            ns0.getKeywordsForUserTypeResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getKeywordsForUserTypeResponse_Dec_Holder"

    class getMyInvestigations_Dec(ElementDeclaration):
        literal = "getMyInvestigations"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getMyInvestigations")
            kw["aname"] = "_getMyInvestigations"
            if ns0.getMyInvestigations_Def not in ns0.getMyInvestigations_Dec.__bases__:
                bases = list(ns0.getMyInvestigations_Dec.__bases__)
                bases.insert(0, ns0.getMyInvestigations_Def)
                ns0.getMyInvestigations_Dec.__bases__ = tuple(bases)

            ns0.getMyInvestigations_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getMyInvestigations_Dec_Holder"

    class getMyInvestigationsIncludes_Dec(ElementDeclaration):
        literal = "getMyInvestigationsIncludes"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getMyInvestigationsIncludes")
            kw["aname"] = "_getMyInvestigationsIncludes"
            if ns0.getMyInvestigationsIncludes_Def not in ns0.getMyInvestigationsIncludes_Dec.__bases__:
                bases = list(ns0.getMyInvestigationsIncludes_Dec.__bases__)
                bases.insert(0, ns0.getMyInvestigationsIncludes_Def)
                ns0.getMyInvestigationsIncludes_Dec.__bases__ = tuple(bases)

            ns0.getMyInvestigationsIncludes_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getMyInvestigationsIncludes_Dec_Holder"

    class getMyInvestigationsIncludesPagination_Dec(ElementDeclaration):
        literal = "getMyInvestigationsIncludesPagination"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getMyInvestigationsIncludesPagination")
            kw["aname"] = "_getMyInvestigationsIncludesPagination"
            if ns0.getMyInvestigationsIncludesPagination_Def not in ns0.getMyInvestigationsIncludesPagination_Dec.__bases__:
                bases = list(ns0.getMyInvestigationsIncludesPagination_Dec.__bases__)
                bases.insert(0, ns0.getMyInvestigationsIncludesPagination_Def)
                ns0.getMyInvestigationsIncludesPagination_Dec.__bases__ = tuple(bases)

            ns0.getMyInvestigationsIncludesPagination_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getMyInvestigationsIncludesPagination_Dec_Holder"

    class getMyInvestigationsIncludesPaginationResponse_Dec(ElementDeclaration):
        literal = "getMyInvestigationsIncludesPaginationResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getMyInvestigationsIncludesPaginationResponse")
            kw["aname"] = "_getMyInvestigationsIncludesPaginationResponse"
            if ns0.getMyInvestigationsIncludesPaginationResponse_Def not in ns0.getMyInvestigationsIncludesPaginationResponse_Dec.__bases__:
                bases = list(ns0.getMyInvestigationsIncludesPaginationResponse_Dec.__bases__)
                bases.insert(0, ns0.getMyInvestigationsIncludesPaginationResponse_Def)
                ns0.getMyInvestigationsIncludesPaginationResponse_Dec.__bases__ = tuple(bases)

            ns0.getMyInvestigationsIncludesPaginationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getMyInvestigationsIncludesPaginationResponse_Dec_Holder"

    class getMyInvestigationsIncludesResponse_Dec(ElementDeclaration):
        literal = "getMyInvestigationsIncludesResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getMyInvestigationsIncludesResponse")
            kw["aname"] = "_getMyInvestigationsIncludesResponse"
            if ns0.getMyInvestigationsIncludesResponse_Def not in ns0.getMyInvestigationsIncludesResponse_Dec.__bases__:
                bases = list(ns0.getMyInvestigationsIncludesResponse_Dec.__bases__)
                bases.insert(0, ns0.getMyInvestigationsIncludesResponse_Def)
                ns0.getMyInvestigationsIncludesResponse_Dec.__bases__ = tuple(bases)

            ns0.getMyInvestigationsIncludesResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getMyInvestigationsIncludesResponse_Dec_Holder"

    class getMyInvestigationsResponse_Dec(ElementDeclaration):
        literal = "getMyInvestigationsResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","getMyInvestigationsResponse")
            kw["aname"] = "_getMyInvestigationsResponse"
            if ns0.getMyInvestigationsResponse_Def not in ns0.getMyInvestigationsResponse_Dec.__bases__:
                bases = list(ns0.getMyInvestigationsResponse_Dec.__bases__)
                bases.insert(0, ns0.getMyInvestigationsResponse_Def)
                ns0.getMyInvestigationsResponse_Dec.__bases__ = tuple(bases)

            ns0.getMyInvestigationsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getMyInvestigationsResponse_Dec_Holder"

    class ingestMetadata_Dec(ElementDeclaration):
        literal = "ingestMetadata"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","ingestMetadata")
            kw["aname"] = "_ingestMetadata"
            if ns0.ingestMetadata_Def not in ns0.ingestMetadata_Dec.__bases__:
                bases = list(ns0.ingestMetadata_Dec.__bases__)
                bases.insert(0, ns0.ingestMetadata_Def)
                ns0.ingestMetadata_Dec.__bases__ = tuple(bases)

            ns0.ingestMetadata_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ingestMetadata_Dec_Holder"

    class ingestMetadataResponse_Dec(ElementDeclaration):
        literal = "ingestMetadataResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","ingestMetadataResponse")
            kw["aname"] = "_ingestMetadataResponse"
            if ns0.ingestMetadataResponse_Def not in ns0.ingestMetadataResponse_Dec.__bases__:
                bases = list(ns0.ingestMetadataResponse_Dec.__bases__)
                bases.insert(0, ns0.ingestMetadataResponse_Def)
                ns0.ingestMetadataResponse_Dec.__bases__ = tuple(bases)

            ns0.ingestMetadataResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ingestMetadataResponse_Dec_Holder"

    class investigation_Dec(ElementDeclaration):
        literal = "investigation"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","investigation")
            kw["aname"] = "_investigation"
            if ns0.investigation_Def not in ns0.investigation_Dec.__bases__:
                bases = list(ns0.investigation_Dec.__bases__)
                bases.insert(0, ns0.investigation_Def)
                ns0.investigation_Dec.__bases__ = tuple(bases)

            ns0.investigation_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "investigation_Dec_Holder"

    class investigator_Dec(ElementDeclaration):
        literal = "investigator"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","investigator")
            kw["aname"] = "_investigator"
            if ns0.investigator_Def not in ns0.investigator_Dec.__bases__:
                bases = list(ns0.investigator_Dec.__bases__)
                bases.insert(0, ns0.investigator_Def)
                ns0.investigator_Dec.__bases__ = tuple(bases)

            ns0.investigator_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "investigator_Dec_Holder"

    class listDatafileFormats_Dec(ElementDeclaration):
        literal = "listDatafileFormats"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","listDatafileFormats")
            kw["aname"] = "_listDatafileFormats"
            if ns0.listDatafileFormats_Def not in ns0.listDatafileFormats_Dec.__bases__:
                bases = list(ns0.listDatafileFormats_Dec.__bases__)
                bases.insert(0, ns0.listDatafileFormats_Def)
                ns0.listDatafileFormats_Dec.__bases__ = tuple(bases)

            ns0.listDatafileFormats_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "listDatafileFormats_Dec_Holder"

    class listDatafileFormatsResponse_Dec(ElementDeclaration):
        literal = "listDatafileFormatsResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","listDatafileFormatsResponse")
            kw["aname"] = "_listDatafileFormatsResponse"
            if ns0.listDatafileFormatsResponse_Def not in ns0.listDatafileFormatsResponse_Dec.__bases__:
                bases = list(ns0.listDatafileFormatsResponse_Dec.__bases__)
                bases.insert(0, ns0.listDatafileFormatsResponse_Def)
                ns0.listDatafileFormatsResponse_Dec.__bases__ = tuple(bases)

            ns0.listDatafileFormatsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "listDatafileFormatsResponse_Dec_Holder"

    class listDatasetStatus_Dec(ElementDeclaration):
        literal = "listDatasetStatus"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","listDatasetStatus")
            kw["aname"] = "_listDatasetStatus"
            if ns0.listDatasetStatus_Def not in ns0.listDatasetStatus_Dec.__bases__:
                bases = list(ns0.listDatasetStatus_Dec.__bases__)
                bases.insert(0, ns0.listDatasetStatus_Def)
                ns0.listDatasetStatus_Dec.__bases__ = tuple(bases)

            ns0.listDatasetStatus_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "listDatasetStatus_Dec_Holder"

    class listDatasetStatusResponse_Dec(ElementDeclaration):
        literal = "listDatasetStatusResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","listDatasetStatusResponse")
            kw["aname"] = "_listDatasetStatusResponse"
            if ns0.listDatasetStatusResponse_Def not in ns0.listDatasetStatusResponse_Dec.__bases__:
                bases = list(ns0.listDatasetStatusResponse_Dec.__bases__)
                bases.insert(0, ns0.listDatasetStatusResponse_Def)
                ns0.listDatasetStatusResponse_Dec.__bases__ = tuple(bases)

            ns0.listDatasetStatusResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "listDatasetStatusResponse_Dec_Holder"

    class listDatasetTypes_Dec(ElementDeclaration):
        literal = "listDatasetTypes"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","listDatasetTypes")
            kw["aname"] = "_listDatasetTypes"
            if ns0.listDatasetTypes_Def not in ns0.listDatasetTypes_Dec.__bases__:
                bases = list(ns0.listDatasetTypes_Dec.__bases__)
                bases.insert(0, ns0.listDatasetTypes_Def)
                ns0.listDatasetTypes_Dec.__bases__ = tuple(bases)

            ns0.listDatasetTypes_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "listDatasetTypes_Dec_Holder"

    class listDatasetTypesResponse_Dec(ElementDeclaration):
        literal = "listDatasetTypesResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","listDatasetTypesResponse")
            kw["aname"] = "_listDatasetTypesResponse"
            if ns0.listDatasetTypesResponse_Def not in ns0.listDatasetTypesResponse_Dec.__bases__:
                bases = list(ns0.listDatasetTypesResponse_Dec.__bases__)
                bases.insert(0, ns0.listDatasetTypesResponse_Def)
                ns0.listDatasetTypesResponse_Dec.__bases__ = tuple(bases)

            ns0.listDatasetTypesResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "listDatasetTypesResponse_Dec_Holder"

    class listInstruments_Dec(ElementDeclaration):
        literal = "listInstruments"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","listInstruments")
            kw["aname"] = "_listInstruments"
            if ns0.listInstruments_Def not in ns0.listInstruments_Dec.__bases__:
                bases = list(ns0.listInstruments_Dec.__bases__)
                bases.insert(0, ns0.listInstruments_Def)
                ns0.listInstruments_Dec.__bases__ = tuple(bases)

            ns0.listInstruments_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "listInstruments_Dec_Holder"

    class listInstrumentsResponse_Dec(ElementDeclaration):
        literal = "listInstrumentsResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","listInstrumentsResponse")
            kw["aname"] = "_listInstrumentsResponse"
            if ns0.listInstrumentsResponse_Def not in ns0.listInstrumentsResponse_Dec.__bases__:
                bases = list(ns0.listInstrumentsResponse_Dec.__bases__)
                bases.insert(0, ns0.listInstrumentsResponse_Def)
                ns0.listInstrumentsResponse_Dec.__bases__ = tuple(bases)

            ns0.listInstrumentsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "listInstrumentsResponse_Dec_Holder"

    class listInvestigationTypes_Dec(ElementDeclaration):
        literal = "listInvestigationTypes"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","listInvestigationTypes")
            kw["aname"] = "_listInvestigationTypes"
            if ns0.listInvestigationTypes_Def not in ns0.listInvestigationTypes_Dec.__bases__:
                bases = list(ns0.listInvestigationTypes_Dec.__bases__)
                bases.insert(0, ns0.listInvestigationTypes_Def)
                ns0.listInvestigationTypes_Dec.__bases__ = tuple(bases)

            ns0.listInvestigationTypes_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "listInvestigationTypes_Dec_Holder"

    class listInvestigationTypesResponse_Dec(ElementDeclaration):
        literal = "listInvestigationTypesResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","listInvestigationTypesResponse")
            kw["aname"] = "_listInvestigationTypesResponse"
            if ns0.listInvestigationTypesResponse_Def not in ns0.listInvestigationTypesResponse_Dec.__bases__:
                bases = list(ns0.listInvestigationTypesResponse_Dec.__bases__)
                bases.insert(0, ns0.listInvestigationTypesResponse_Def)
                ns0.listInvestigationTypesResponse_Dec.__bases__ = tuple(bases)

            ns0.listInvestigationTypesResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "listInvestigationTypesResponse_Dec_Holder"

    class listParameters_Dec(ElementDeclaration):
        literal = "listParameters"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","listParameters")
            kw["aname"] = "_listParameters"
            if ns0.listParameters_Def not in ns0.listParameters_Dec.__bases__:
                bases = list(ns0.listParameters_Dec.__bases__)
                bases.insert(0, ns0.listParameters_Def)
                ns0.listParameters_Dec.__bases__ = tuple(bases)

            ns0.listParameters_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "listParameters_Dec_Holder"

    class listParametersResponse_Dec(ElementDeclaration):
        literal = "listParametersResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","listParametersResponse")
            kw["aname"] = "_listParametersResponse"
            if ns0.listParametersResponse_Def not in ns0.listParametersResponse_Dec.__bases__:
                bases = list(ns0.listParametersResponse_Dec.__bases__)
                bases.insert(0, ns0.listParametersResponse_Def)
                ns0.listParametersResponse_Dec.__bases__ = tuple(bases)

            ns0.listParametersResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "listParametersResponse_Dec_Holder"

    class listRoles_Dec(ElementDeclaration):
        literal = "listRoles"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","listRoles")
            kw["aname"] = "_listRoles"
            if ns0.listRoles_Def not in ns0.listRoles_Dec.__bases__:
                bases = list(ns0.listRoles_Dec.__bases__)
                bases.insert(0, ns0.listRoles_Def)
                ns0.listRoles_Dec.__bases__ = tuple(bases)

            ns0.listRoles_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "listRoles_Dec_Holder"

    class listRolesResponse_Dec(ElementDeclaration):
        literal = "listRolesResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","listRolesResponse")
            kw["aname"] = "_listRolesResponse"
            if ns0.listRolesResponse_Def not in ns0.listRolesResponse_Dec.__bases__:
                bases = list(ns0.listRolesResponse_Dec.__bases__)
                bases.insert(0, ns0.listRolesResponse_Def)
                ns0.listRolesResponse_Dec.__bases__ = tuple(bases)

            ns0.listRolesResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "listRolesResponse_Dec_Holder"

    class login_Dec(ElementDeclaration):
        literal = "login"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","login")
            kw["aname"] = "_login"
            if ns0.login_Def not in ns0.login_Dec.__bases__:
                bases = list(ns0.login_Dec.__bases__)
                bases.insert(0, ns0.login_Def)
                ns0.login_Dec.__bases__ = tuple(bases)

            ns0.login_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "login_Dec_Holder"

    class loginLifetime_Dec(ElementDeclaration):
        literal = "loginLifetime"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","loginLifetime")
            kw["aname"] = "_loginLifetime"
            if ns0.loginLifetime_Def not in ns0.loginLifetime_Dec.__bases__:
                bases = list(ns0.loginLifetime_Dec.__bases__)
                bases.insert(0, ns0.loginLifetime_Def)
                ns0.loginLifetime_Dec.__bases__ = tuple(bases)

            ns0.loginLifetime_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "loginLifetime_Dec_Holder"

    class loginLifetimeResponse_Dec(ElementDeclaration):
        literal = "loginLifetimeResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","loginLifetimeResponse")
            kw["aname"] = "_loginLifetimeResponse"
            if ns0.loginLifetimeResponse_Def not in ns0.loginLifetimeResponse_Dec.__bases__:
                bases = list(ns0.loginLifetimeResponse_Dec.__bases__)
                bases.insert(0, ns0.loginLifetimeResponse_Def)
                ns0.loginLifetimeResponse_Dec.__bases__ = tuple(bases)

            ns0.loginLifetimeResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "loginLifetimeResponse_Dec_Holder"

    class loginResponse_Dec(ElementDeclaration):
        literal = "loginResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","loginResponse")
            kw["aname"] = "_loginResponse"
            if ns0.loginResponse_Def not in ns0.loginResponse_Dec.__bases__:
                bases = list(ns0.loginResponse_Dec.__bases__)
                bases.insert(0, ns0.loginResponse_Def)
                ns0.loginResponse_Dec.__bases__ = tuple(bases)

            ns0.loginResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "loginResponse_Dec_Holder"

    class logout_Dec(ElementDeclaration):
        literal = "logout"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","logout")
            kw["aname"] = "_logout"
            if ns0.logout_Def not in ns0.logout_Dec.__bases__:
                bases = list(ns0.logout_Dec.__bases__)
                bases.insert(0, ns0.logout_Def)
                ns0.logout_Dec.__bases__ = tuple(bases)

            ns0.logout_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "logout_Dec_Holder"

    class logoutResponse_Dec(ElementDeclaration):
        literal = "logoutResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","logoutResponse")
            kw["aname"] = "_logoutResponse"
            if ns0.logoutResponse_Def not in ns0.logoutResponse_Dec.__bases__:
                bases = list(ns0.logoutResponse_Dec.__bases__)
                bases.insert(0, ns0.logoutResponse_Def)
                ns0.logoutResponse_Dec.__bases__ = tuple(bases)

            ns0.logoutResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "logoutResponse_Dec_Holder"

    class modifyDataFile_Dec(ElementDeclaration):
        literal = "modifyDataFile"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","modifyDataFile")
            kw["aname"] = "_modifyDataFile"
            if ns0.modifyDataFile_Def not in ns0.modifyDataFile_Dec.__bases__:
                bases = list(ns0.modifyDataFile_Dec.__bases__)
                bases.insert(0, ns0.modifyDataFile_Def)
                ns0.modifyDataFile_Dec.__bases__ = tuple(bases)

            ns0.modifyDataFile_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "modifyDataFile_Dec_Holder"

    class modifyDataFileParameter_Dec(ElementDeclaration):
        literal = "modifyDataFileParameter"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","modifyDataFileParameter")
            kw["aname"] = "_modifyDataFileParameter"
            if ns0.modifyDataFileParameter_Def not in ns0.modifyDataFileParameter_Dec.__bases__:
                bases = list(ns0.modifyDataFileParameter_Dec.__bases__)
                bases.insert(0, ns0.modifyDataFileParameter_Def)
                ns0.modifyDataFileParameter_Dec.__bases__ = tuple(bases)

            ns0.modifyDataFileParameter_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "modifyDataFileParameter_Dec_Holder"

    class modifyDataFileParameterResponse_Dec(ElementDeclaration):
        literal = "modifyDataFileParameterResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","modifyDataFileParameterResponse")
            kw["aname"] = "_modifyDataFileParameterResponse"
            if ns0.modifyDataFileParameterResponse_Def not in ns0.modifyDataFileParameterResponse_Dec.__bases__:
                bases = list(ns0.modifyDataFileParameterResponse_Dec.__bases__)
                bases.insert(0, ns0.modifyDataFileParameterResponse_Def)
                ns0.modifyDataFileParameterResponse_Dec.__bases__ = tuple(bases)

            ns0.modifyDataFileParameterResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "modifyDataFileParameterResponse_Dec_Holder"

    class modifyDataFileResponse_Dec(ElementDeclaration):
        literal = "modifyDataFileResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","modifyDataFileResponse")
            kw["aname"] = "_modifyDataFileResponse"
            if ns0.modifyDataFileResponse_Def not in ns0.modifyDataFileResponse_Dec.__bases__:
                bases = list(ns0.modifyDataFileResponse_Dec.__bases__)
                bases.insert(0, ns0.modifyDataFileResponse_Def)
                ns0.modifyDataFileResponse_Dec.__bases__ = tuple(bases)

            ns0.modifyDataFileResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "modifyDataFileResponse_Dec_Holder"

    class modifyDataSet_Dec(ElementDeclaration):
        literal = "modifyDataSet"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","modifyDataSet")
            kw["aname"] = "_modifyDataSet"
            if ns0.modifyDataSet_Def not in ns0.modifyDataSet_Dec.__bases__:
                bases = list(ns0.modifyDataSet_Dec.__bases__)
                bases.insert(0, ns0.modifyDataSet_Def)
                ns0.modifyDataSet_Dec.__bases__ = tuple(bases)

            ns0.modifyDataSet_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "modifyDataSet_Dec_Holder"

    class modifyDataSetParameter_Dec(ElementDeclaration):
        literal = "modifyDataSetParameter"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","modifyDataSetParameter")
            kw["aname"] = "_modifyDataSetParameter"
            if ns0.modifyDataSetParameter_Def not in ns0.modifyDataSetParameter_Dec.__bases__:
                bases = list(ns0.modifyDataSetParameter_Dec.__bases__)
                bases.insert(0, ns0.modifyDataSetParameter_Def)
                ns0.modifyDataSetParameter_Dec.__bases__ = tuple(bases)

            ns0.modifyDataSetParameter_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "modifyDataSetParameter_Dec_Holder"

    class modifyDataSetParameterResponse_Dec(ElementDeclaration):
        literal = "modifyDataSetParameterResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","modifyDataSetParameterResponse")
            kw["aname"] = "_modifyDataSetParameterResponse"
            if ns0.modifyDataSetParameterResponse_Def not in ns0.modifyDataSetParameterResponse_Dec.__bases__:
                bases = list(ns0.modifyDataSetParameterResponse_Dec.__bases__)
                bases.insert(0, ns0.modifyDataSetParameterResponse_Def)
                ns0.modifyDataSetParameterResponse_Dec.__bases__ = tuple(bases)

            ns0.modifyDataSetParameterResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "modifyDataSetParameterResponse_Dec_Holder"

    class modifyDataSetResponse_Dec(ElementDeclaration):
        literal = "modifyDataSetResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","modifyDataSetResponse")
            kw["aname"] = "_modifyDataSetResponse"
            if ns0.modifyDataSetResponse_Def not in ns0.modifyDataSetResponse_Dec.__bases__:
                bases = list(ns0.modifyDataSetResponse_Dec.__bases__)
                bases.insert(0, ns0.modifyDataSetResponse_Def)
                ns0.modifyDataSetResponse_Dec.__bases__ = tuple(bases)

            ns0.modifyDataSetResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "modifyDataSetResponse_Dec_Holder"

    class modifyInvestigation_Dec(ElementDeclaration):
        literal = "modifyInvestigation"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","modifyInvestigation")
            kw["aname"] = "_modifyInvestigation"
            if ns0.modifyInvestigation_Def not in ns0.modifyInvestigation_Dec.__bases__:
                bases = list(ns0.modifyInvestigation_Dec.__bases__)
                bases.insert(0, ns0.modifyInvestigation_Def)
                ns0.modifyInvestigation_Dec.__bases__ = tuple(bases)

            ns0.modifyInvestigation_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "modifyInvestigation_Dec_Holder"

    class modifyInvestigationResponse_Dec(ElementDeclaration):
        literal = "modifyInvestigationResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","modifyInvestigationResponse")
            kw["aname"] = "_modifyInvestigationResponse"
            if ns0.modifyInvestigationResponse_Def not in ns0.modifyInvestigationResponse_Dec.__bases__:
                bases = list(ns0.modifyInvestigationResponse_Dec.__bases__)
                bases.insert(0, ns0.modifyInvestigationResponse_Def)
                ns0.modifyInvestigationResponse_Dec.__bases__ = tuple(bases)

            ns0.modifyInvestigationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "modifyInvestigationResponse_Dec_Holder"

    class modifyInvestigator_Dec(ElementDeclaration):
        literal = "modifyInvestigator"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","modifyInvestigator")
            kw["aname"] = "_modifyInvestigator"
            if ns0.modifyInvestigator_Def not in ns0.modifyInvestigator_Dec.__bases__:
                bases = list(ns0.modifyInvestigator_Dec.__bases__)
                bases.insert(0, ns0.modifyInvestigator_Def)
                ns0.modifyInvestigator_Dec.__bases__ = tuple(bases)

            ns0.modifyInvestigator_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "modifyInvestigator_Dec_Holder"

    class modifyInvestigatorResponse_Dec(ElementDeclaration):
        literal = "modifyInvestigatorResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","modifyInvestigatorResponse")
            kw["aname"] = "_modifyInvestigatorResponse"
            if ns0.modifyInvestigatorResponse_Def not in ns0.modifyInvestigatorResponse_Dec.__bases__:
                bases = list(ns0.modifyInvestigatorResponse_Dec.__bases__)
                bases.insert(0, ns0.modifyInvestigatorResponse_Def)
                ns0.modifyInvestigatorResponse_Dec.__bases__ = tuple(bases)

            ns0.modifyInvestigatorResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "modifyInvestigatorResponse_Dec_Holder"

    class modifyPublication_Dec(ElementDeclaration):
        literal = "modifyPublication"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","modifyPublication")
            kw["aname"] = "_modifyPublication"
            if ns0.modifyPublication_Def not in ns0.modifyPublication_Dec.__bases__:
                bases = list(ns0.modifyPublication_Dec.__bases__)
                bases.insert(0, ns0.modifyPublication_Def)
                ns0.modifyPublication_Dec.__bases__ = tuple(bases)

            ns0.modifyPublication_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "modifyPublication_Dec_Holder"

    class modifyPublicationResponse_Dec(ElementDeclaration):
        literal = "modifyPublicationResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","modifyPublicationResponse")
            kw["aname"] = "_modifyPublicationResponse"
            if ns0.modifyPublicationResponse_Def not in ns0.modifyPublicationResponse_Dec.__bases__:
                bases = list(ns0.modifyPublicationResponse_Dec.__bases__)
                bases.insert(0, ns0.modifyPublicationResponse_Def)
                ns0.modifyPublicationResponse_Dec.__bases__ = tuple(bases)

            ns0.modifyPublicationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "modifyPublicationResponse_Dec_Holder"

    class modifySample_Dec(ElementDeclaration):
        literal = "modifySample"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","modifySample")
            kw["aname"] = "_modifySample"
            if ns0.modifySample_Def not in ns0.modifySample_Dec.__bases__:
                bases = list(ns0.modifySample_Dec.__bases__)
                bases.insert(0, ns0.modifySample_Def)
                ns0.modifySample_Dec.__bases__ = tuple(bases)

            ns0.modifySample_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "modifySample_Dec_Holder"

    class modifySampleParameter_Dec(ElementDeclaration):
        literal = "modifySampleParameter"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","modifySampleParameter")
            kw["aname"] = "_modifySampleParameter"
            if ns0.modifySampleParameter_Def not in ns0.modifySampleParameter_Dec.__bases__:
                bases = list(ns0.modifySampleParameter_Dec.__bases__)
                bases.insert(0, ns0.modifySampleParameter_Def)
                ns0.modifySampleParameter_Dec.__bases__ = tuple(bases)

            ns0.modifySampleParameter_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "modifySampleParameter_Dec_Holder"

    class modifySampleParameterResponse_Dec(ElementDeclaration):
        literal = "modifySampleParameterResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","modifySampleParameterResponse")
            kw["aname"] = "_modifySampleParameterResponse"
            if ns0.modifySampleParameterResponse_Def not in ns0.modifySampleParameterResponse_Dec.__bases__:
                bases = list(ns0.modifySampleParameterResponse_Dec.__bases__)
                bases.insert(0, ns0.modifySampleParameterResponse_Def)
                ns0.modifySampleParameterResponse_Dec.__bases__ = tuple(bases)

            ns0.modifySampleParameterResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "modifySampleParameterResponse_Dec_Holder"

    class modifySampleResponse_Dec(ElementDeclaration):
        literal = "modifySampleResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","modifySampleResponse")
            kw["aname"] = "_modifySampleResponse"
            if ns0.modifySampleResponse_Def not in ns0.modifySampleResponse_Dec.__bases__:
                bases = list(ns0.modifySampleResponse_Dec.__bases__)
                bases.insert(0, ns0.modifySampleResponse_Def)
                ns0.modifySampleResponse_Dec.__bases__ = tuple(bases)

            ns0.modifySampleResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "modifySampleResponse_Dec_Holder"

    class removeAuthorisation_Dec(ElementDeclaration):
        literal = "removeAuthorisation"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","removeAuthorisation")
            kw["aname"] = "_removeAuthorisation"
            if ns0.removeAuthorisation_Def not in ns0.removeAuthorisation_Dec.__bases__:
                bases = list(ns0.removeAuthorisation_Dec.__bases__)
                bases.insert(0, ns0.removeAuthorisation_Def)
                ns0.removeAuthorisation_Dec.__bases__ = tuple(bases)

            ns0.removeAuthorisation_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removeAuthorisation_Dec_Holder"

    class removeAuthorisationResponse_Dec(ElementDeclaration):
        literal = "removeAuthorisationResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","removeAuthorisationResponse")
            kw["aname"] = "_removeAuthorisationResponse"
            if ns0.removeAuthorisationResponse_Def not in ns0.removeAuthorisationResponse_Dec.__bases__:
                bases = list(ns0.removeAuthorisationResponse_Dec.__bases__)
                bases.insert(0, ns0.removeAuthorisationResponse_Def)
                ns0.removeAuthorisationResponse_Dec.__bases__ = tuple(bases)

            ns0.removeAuthorisationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removeAuthorisationResponse_Dec_Holder"

    class removeDataFile_Dec(ElementDeclaration):
        literal = "removeDataFile"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","removeDataFile")
            kw["aname"] = "_removeDataFile"
            if ns0.removeDataFile_Def not in ns0.removeDataFile_Dec.__bases__:
                bases = list(ns0.removeDataFile_Dec.__bases__)
                bases.insert(0, ns0.removeDataFile_Def)
                ns0.removeDataFile_Dec.__bases__ = tuple(bases)

            ns0.removeDataFile_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removeDataFile_Dec_Holder"

    class removeDataFileParameter_Dec(ElementDeclaration):
        literal = "removeDataFileParameter"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","removeDataFileParameter")
            kw["aname"] = "_removeDataFileParameter"
            if ns0.removeDataFileParameter_Def not in ns0.removeDataFileParameter_Dec.__bases__:
                bases = list(ns0.removeDataFileParameter_Dec.__bases__)
                bases.insert(0, ns0.removeDataFileParameter_Def)
                ns0.removeDataFileParameter_Dec.__bases__ = tuple(bases)

            ns0.removeDataFileParameter_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removeDataFileParameter_Dec_Holder"

    class removeDataFileParameterResponse_Dec(ElementDeclaration):
        literal = "removeDataFileParameterResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","removeDataFileParameterResponse")
            kw["aname"] = "_removeDataFileParameterResponse"
            if ns0.removeDataFileParameterResponse_Def not in ns0.removeDataFileParameterResponse_Dec.__bases__:
                bases = list(ns0.removeDataFileParameterResponse_Dec.__bases__)
                bases.insert(0, ns0.removeDataFileParameterResponse_Def)
                ns0.removeDataFileParameterResponse_Dec.__bases__ = tuple(bases)

            ns0.removeDataFileParameterResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removeDataFileParameterResponse_Dec_Holder"

    class removeDataFileResponse_Dec(ElementDeclaration):
        literal = "removeDataFileResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","removeDataFileResponse")
            kw["aname"] = "_removeDataFileResponse"
            if ns0.removeDataFileResponse_Def not in ns0.removeDataFileResponse_Dec.__bases__:
                bases = list(ns0.removeDataFileResponse_Dec.__bases__)
                bases.insert(0, ns0.removeDataFileResponse_Def)
                ns0.removeDataFileResponse_Dec.__bases__ = tuple(bases)

            ns0.removeDataFileResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removeDataFileResponse_Dec_Holder"

    class removeDataSet_Dec(ElementDeclaration):
        literal = "removeDataSet"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","removeDataSet")
            kw["aname"] = "_removeDataSet"
            if ns0.removeDataSet_Def not in ns0.removeDataSet_Dec.__bases__:
                bases = list(ns0.removeDataSet_Dec.__bases__)
                bases.insert(0, ns0.removeDataSet_Def)
                ns0.removeDataSet_Dec.__bases__ = tuple(bases)

            ns0.removeDataSet_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removeDataSet_Dec_Holder"

    class removeDataSetParameter_Dec(ElementDeclaration):
        literal = "removeDataSetParameter"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","removeDataSetParameter")
            kw["aname"] = "_removeDataSetParameter"
            if ns0.removeDataSetParameter_Def not in ns0.removeDataSetParameter_Dec.__bases__:
                bases = list(ns0.removeDataSetParameter_Dec.__bases__)
                bases.insert(0, ns0.removeDataSetParameter_Def)
                ns0.removeDataSetParameter_Dec.__bases__ = tuple(bases)

            ns0.removeDataSetParameter_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removeDataSetParameter_Dec_Holder"

    class removeDataSetParameterResponse_Dec(ElementDeclaration):
        literal = "removeDataSetParameterResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","removeDataSetParameterResponse")
            kw["aname"] = "_removeDataSetParameterResponse"
            if ns0.removeDataSetParameterResponse_Def not in ns0.removeDataSetParameterResponse_Dec.__bases__:
                bases = list(ns0.removeDataSetParameterResponse_Dec.__bases__)
                bases.insert(0, ns0.removeDataSetParameterResponse_Def)
                ns0.removeDataSetParameterResponse_Dec.__bases__ = tuple(bases)

            ns0.removeDataSetParameterResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removeDataSetParameterResponse_Dec_Holder"

    class removeDataSetResponse_Dec(ElementDeclaration):
        literal = "removeDataSetResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","removeDataSetResponse")
            kw["aname"] = "_removeDataSetResponse"
            if ns0.removeDataSetResponse_Def not in ns0.removeDataSetResponse_Dec.__bases__:
                bases = list(ns0.removeDataSetResponse_Dec.__bases__)
                bases.insert(0, ns0.removeDataSetResponse_Def)
                ns0.removeDataSetResponse_Dec.__bases__ = tuple(bases)

            ns0.removeDataSetResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removeDataSetResponse_Dec_Holder"

    class removeInvestigation_Dec(ElementDeclaration):
        literal = "removeInvestigation"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","removeInvestigation")
            kw["aname"] = "_removeInvestigation"
            if ns0.removeInvestigation_Def not in ns0.removeInvestigation_Dec.__bases__:
                bases = list(ns0.removeInvestigation_Dec.__bases__)
                bases.insert(0, ns0.removeInvestigation_Def)
                ns0.removeInvestigation_Dec.__bases__ = tuple(bases)

            ns0.removeInvestigation_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removeInvestigation_Dec_Holder"

    class removeInvestigationResponse_Dec(ElementDeclaration):
        literal = "removeInvestigationResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","removeInvestigationResponse")
            kw["aname"] = "_removeInvestigationResponse"
            if ns0.removeInvestigationResponse_Def not in ns0.removeInvestigationResponse_Dec.__bases__:
                bases = list(ns0.removeInvestigationResponse_Dec.__bases__)
                bases.insert(0, ns0.removeInvestigationResponse_Def)
                ns0.removeInvestigationResponse_Dec.__bases__ = tuple(bases)

            ns0.removeInvestigationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removeInvestigationResponse_Dec_Holder"

    class removeInvestigator_Dec(ElementDeclaration):
        literal = "removeInvestigator"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","removeInvestigator")
            kw["aname"] = "_removeInvestigator"
            if ns0.removeInvestigator_Def not in ns0.removeInvestigator_Dec.__bases__:
                bases = list(ns0.removeInvestigator_Dec.__bases__)
                bases.insert(0, ns0.removeInvestigator_Def)
                ns0.removeInvestigator_Dec.__bases__ = tuple(bases)

            ns0.removeInvestigator_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removeInvestigator_Dec_Holder"

    class removeInvestigatorResponse_Dec(ElementDeclaration):
        literal = "removeInvestigatorResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","removeInvestigatorResponse")
            kw["aname"] = "_removeInvestigatorResponse"
            if ns0.removeInvestigatorResponse_Def not in ns0.removeInvestigatorResponse_Dec.__bases__:
                bases = list(ns0.removeInvestigatorResponse_Dec.__bases__)
                bases.insert(0, ns0.removeInvestigatorResponse_Def)
                ns0.removeInvestigatorResponse_Dec.__bases__ = tuple(bases)

            ns0.removeInvestigatorResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removeInvestigatorResponse_Dec_Holder"

    class removeKeyword_Dec(ElementDeclaration):
        literal = "removeKeyword"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","removeKeyword")
            kw["aname"] = "_removeKeyword"
            if ns0.removeKeyword_Def not in ns0.removeKeyword_Dec.__bases__:
                bases = list(ns0.removeKeyword_Dec.__bases__)
                bases.insert(0, ns0.removeKeyword_Def)
                ns0.removeKeyword_Dec.__bases__ = tuple(bases)

            ns0.removeKeyword_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removeKeyword_Dec_Holder"

    class removeKeywordResponse_Dec(ElementDeclaration):
        literal = "removeKeywordResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","removeKeywordResponse")
            kw["aname"] = "_removeKeywordResponse"
            if ns0.removeKeywordResponse_Def not in ns0.removeKeywordResponse_Dec.__bases__:
                bases = list(ns0.removeKeywordResponse_Dec.__bases__)
                bases.insert(0, ns0.removeKeywordResponse_Def)
                ns0.removeKeywordResponse_Dec.__bases__ = tuple(bases)

            ns0.removeKeywordResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removeKeywordResponse_Dec_Holder"

    class removePublication_Dec(ElementDeclaration):
        literal = "removePublication"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","removePublication")
            kw["aname"] = "_removePublication"
            if ns0.removePublication_Def not in ns0.removePublication_Dec.__bases__:
                bases = list(ns0.removePublication_Dec.__bases__)
                bases.insert(0, ns0.removePublication_Def)
                ns0.removePublication_Dec.__bases__ = tuple(bases)

            ns0.removePublication_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removePublication_Dec_Holder"

    class removePublicationResponse_Dec(ElementDeclaration):
        literal = "removePublicationResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","removePublicationResponse")
            kw["aname"] = "_removePublicationResponse"
            if ns0.removePublicationResponse_Def not in ns0.removePublicationResponse_Dec.__bases__:
                bases = list(ns0.removePublicationResponse_Dec.__bases__)
                bases.insert(0, ns0.removePublicationResponse_Def)
                ns0.removePublicationResponse_Dec.__bases__ = tuple(bases)

            ns0.removePublicationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removePublicationResponse_Dec_Holder"

    class removeSample_Dec(ElementDeclaration):
        literal = "removeSample"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","removeSample")
            kw["aname"] = "_removeSample"
            if ns0.removeSample_Def not in ns0.removeSample_Dec.__bases__:
                bases = list(ns0.removeSample_Dec.__bases__)
                bases.insert(0, ns0.removeSample_Def)
                ns0.removeSample_Dec.__bases__ = tuple(bases)

            ns0.removeSample_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removeSample_Dec_Holder"

    class removeSampleParameter_Dec(ElementDeclaration):
        literal = "removeSampleParameter"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","removeSampleParameter")
            kw["aname"] = "_removeSampleParameter"
            if ns0.removeSampleParameter_Def not in ns0.removeSampleParameter_Dec.__bases__:
                bases = list(ns0.removeSampleParameter_Dec.__bases__)
                bases.insert(0, ns0.removeSampleParameter_Def)
                ns0.removeSampleParameter_Dec.__bases__ = tuple(bases)

            ns0.removeSampleParameter_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removeSampleParameter_Dec_Holder"

    class removeSampleParameterResponse_Dec(ElementDeclaration):
        literal = "removeSampleParameterResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","removeSampleParameterResponse")
            kw["aname"] = "_removeSampleParameterResponse"
            if ns0.removeSampleParameterResponse_Def not in ns0.removeSampleParameterResponse_Dec.__bases__:
                bases = list(ns0.removeSampleParameterResponse_Dec.__bases__)
                bases.insert(0, ns0.removeSampleParameterResponse_Def)
                ns0.removeSampleParameterResponse_Dec.__bases__ = tuple(bases)

            ns0.removeSampleParameterResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removeSampleParameterResponse_Dec_Holder"

    class removeSampleResponse_Dec(ElementDeclaration):
        literal = "removeSampleResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","removeSampleResponse")
            kw["aname"] = "_removeSampleResponse"
            if ns0.removeSampleResponse_Def not in ns0.removeSampleResponse_Dec.__bases__:
                bases = list(ns0.removeSampleResponse_Dec.__bases__)
                bases.insert(0, ns0.removeSampleResponse_Def)
                ns0.removeSampleResponse_Dec.__bases__ = tuple(bases)

            ns0.removeSampleResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "removeSampleResponse_Dec_Holder"

    class searchByAdvanced_Dec(ElementDeclaration):
        literal = "searchByAdvanced"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","searchByAdvanced")
            kw["aname"] = "_searchByAdvanced"
            if ns0.searchByAdvanced_Def not in ns0.searchByAdvanced_Dec.__bases__:
                bases = list(ns0.searchByAdvanced_Dec.__bases__)
                bases.insert(0, ns0.searchByAdvanced_Def)
                ns0.searchByAdvanced_Dec.__bases__ = tuple(bases)

            ns0.searchByAdvanced_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "searchByAdvanced_Dec_Holder"

    class searchByAdvancedPagination_Dec(ElementDeclaration):
        literal = "searchByAdvancedPagination"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","searchByAdvancedPagination")
            kw["aname"] = "_searchByAdvancedPagination"
            if ns0.searchByAdvancedPagination_Def not in ns0.searchByAdvancedPagination_Dec.__bases__:
                bases = list(ns0.searchByAdvancedPagination_Dec.__bases__)
                bases.insert(0, ns0.searchByAdvancedPagination_Def)
                ns0.searchByAdvancedPagination_Dec.__bases__ = tuple(bases)

            ns0.searchByAdvancedPagination_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "searchByAdvancedPagination_Dec_Holder"

    class searchByAdvancedPaginationResponse_Dec(ElementDeclaration):
        literal = "searchByAdvancedPaginationResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","searchByAdvancedPaginationResponse")
            kw["aname"] = "_searchByAdvancedPaginationResponse"
            if ns0.searchByAdvancedPaginationResponse_Def not in ns0.searchByAdvancedPaginationResponse_Dec.__bases__:
                bases = list(ns0.searchByAdvancedPaginationResponse_Dec.__bases__)
                bases.insert(0, ns0.searchByAdvancedPaginationResponse_Def)
                ns0.searchByAdvancedPaginationResponse_Dec.__bases__ = tuple(bases)

            ns0.searchByAdvancedPaginationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "searchByAdvancedPaginationResponse_Dec_Holder"

    class searchByAdvancedResponse_Dec(ElementDeclaration):
        literal = "searchByAdvancedResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","searchByAdvancedResponse")
            kw["aname"] = "_searchByAdvancedResponse"
            if ns0.searchByAdvancedResponse_Def not in ns0.searchByAdvancedResponse_Dec.__bases__:
                bases = list(ns0.searchByAdvancedResponse_Dec.__bases__)
                bases.insert(0, ns0.searchByAdvancedResponse_Def)
                ns0.searchByAdvancedResponse_Dec.__bases__ = tuple(bases)

            ns0.searchByAdvancedResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "searchByAdvancedResponse_Dec_Holder"

    class searchByKeywords_Dec(ElementDeclaration):
        literal = "searchByKeywords"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","searchByKeywords")
            kw["aname"] = "_searchByKeywords"
            if ns0.searchByKeywords_Def not in ns0.searchByKeywords_Dec.__bases__:
                bases = list(ns0.searchByKeywords_Dec.__bases__)
                bases.insert(0, ns0.searchByKeywords_Def)
                ns0.searchByKeywords_Dec.__bases__ = tuple(bases)

            ns0.searchByKeywords_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "searchByKeywords_Dec_Holder"

    class searchByKeywordsAll_Dec(ElementDeclaration):
        literal = "searchByKeywordsAll"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","searchByKeywordsAll")
            kw["aname"] = "_searchByKeywordsAll"
            if ns0.searchByKeywordsAll_Def not in ns0.searchByKeywordsAll_Dec.__bases__:
                bases = list(ns0.searchByKeywordsAll_Dec.__bases__)
                bases.insert(0, ns0.searchByKeywordsAll_Def)
                ns0.searchByKeywordsAll_Dec.__bases__ = tuple(bases)

            ns0.searchByKeywordsAll_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "searchByKeywordsAll_Dec_Holder"

    class searchByKeywordsAllResponse_Dec(ElementDeclaration):
        literal = "searchByKeywordsAllResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","searchByKeywordsAllResponse")
            kw["aname"] = "_searchByKeywordsAllResponse"
            if ns0.searchByKeywordsAllResponse_Def not in ns0.searchByKeywordsAllResponse_Dec.__bases__:
                bases = list(ns0.searchByKeywordsAllResponse_Dec.__bases__)
                bases.insert(0, ns0.searchByKeywordsAllResponse_Def)
                ns0.searchByKeywordsAllResponse_Dec.__bases__ = tuple(bases)

            ns0.searchByKeywordsAllResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "searchByKeywordsAllResponse_Dec_Holder"

    class searchByKeywordsResponse_Dec(ElementDeclaration):
        literal = "searchByKeywordsResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","searchByKeywordsResponse")
            kw["aname"] = "_searchByKeywordsResponse"
            if ns0.searchByKeywordsResponse_Def not in ns0.searchByKeywordsResponse_Dec.__bases__:
                bases = list(ns0.searchByKeywordsResponse_Dec.__bases__)
                bases.insert(0, ns0.searchByKeywordsResponse_Def)
                ns0.searchByKeywordsResponse_Dec.__bases__ = tuple(bases)

            ns0.searchByKeywordsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "searchByKeywordsResponse_Dec_Holder"

    class searchByRunNumber_Dec(ElementDeclaration):
        literal = "searchByRunNumber"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","searchByRunNumber")
            kw["aname"] = "_searchByRunNumber"
            if ns0.searchByRunNumber_Def not in ns0.searchByRunNumber_Dec.__bases__:
                bases = list(ns0.searchByRunNumber_Dec.__bases__)
                bases.insert(0, ns0.searchByRunNumber_Def)
                ns0.searchByRunNumber_Dec.__bases__ = tuple(bases)

            ns0.searchByRunNumber_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "searchByRunNumber_Dec_Holder"

    class searchByRunNumberPagination_Dec(ElementDeclaration):
        literal = "searchByRunNumberPagination"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","searchByRunNumberPagination")
            kw["aname"] = "_searchByRunNumberPagination"
            if ns0.searchByRunNumberPagination_Def not in ns0.searchByRunNumberPagination_Dec.__bases__:
                bases = list(ns0.searchByRunNumberPagination_Dec.__bases__)
                bases.insert(0, ns0.searchByRunNumberPagination_Def)
                ns0.searchByRunNumberPagination_Dec.__bases__ = tuple(bases)

            ns0.searchByRunNumberPagination_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "searchByRunNumberPagination_Dec_Holder"

    class searchByRunNumberPaginationResponse_Dec(ElementDeclaration):
        literal = "searchByRunNumberPaginationResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","searchByRunNumberPaginationResponse")
            kw["aname"] = "_searchByRunNumberPaginationResponse"
            if ns0.searchByRunNumberPaginationResponse_Def not in ns0.searchByRunNumberPaginationResponse_Dec.__bases__:
                bases = list(ns0.searchByRunNumberPaginationResponse_Dec.__bases__)
                bases.insert(0, ns0.searchByRunNumberPaginationResponse_Def)
                ns0.searchByRunNumberPaginationResponse_Dec.__bases__ = tuple(bases)

            ns0.searchByRunNumberPaginationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "searchByRunNumberPaginationResponse_Dec_Holder"

    class searchByRunNumberResponse_Dec(ElementDeclaration):
        literal = "searchByRunNumberResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","searchByRunNumberResponse")
            kw["aname"] = "_searchByRunNumberResponse"
            if ns0.searchByRunNumberResponse_Def not in ns0.searchByRunNumberResponse_Dec.__bases__:
                bases = list(ns0.searchByRunNumberResponse_Dec.__bases__)
                bases.insert(0, ns0.searchByRunNumberResponse_Def)
                ns0.searchByRunNumberResponse_Dec.__bases__ = tuple(bases)

            ns0.searchByRunNumberResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "searchByRunNumberResponse_Dec_Holder"

    class searchByUserID_Dec(ElementDeclaration):
        literal = "searchByUserID"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","searchByUserID")
            kw["aname"] = "_searchByUserID"
            if ns0.searchByUserID_Def not in ns0.searchByUserID_Dec.__bases__:
                bases = list(ns0.searchByUserID_Dec.__bases__)
                bases.insert(0, ns0.searchByUserID_Def)
                ns0.searchByUserID_Dec.__bases__ = tuple(bases)

            ns0.searchByUserID_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "searchByUserID_Dec_Holder"

    class searchByUserIDPagination_Dec(ElementDeclaration):
        literal = "searchByUserIDPagination"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","searchByUserIDPagination")
            kw["aname"] = "_searchByUserIDPagination"
            if ns0.searchByUserIDPagination_Def not in ns0.searchByUserIDPagination_Dec.__bases__:
                bases = list(ns0.searchByUserIDPagination_Dec.__bases__)
                bases.insert(0, ns0.searchByUserIDPagination_Def)
                ns0.searchByUserIDPagination_Dec.__bases__ = tuple(bases)

            ns0.searchByUserIDPagination_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "searchByUserIDPagination_Dec_Holder"

    class searchByUserIDPaginationResponse_Dec(ElementDeclaration):
        literal = "searchByUserIDPaginationResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","searchByUserIDPaginationResponse")
            kw["aname"] = "_searchByUserIDPaginationResponse"
            if ns0.searchByUserIDPaginationResponse_Def not in ns0.searchByUserIDPaginationResponse_Dec.__bases__:
                bases = list(ns0.searchByUserIDPaginationResponse_Dec.__bases__)
                bases.insert(0, ns0.searchByUserIDPaginationResponse_Def)
                ns0.searchByUserIDPaginationResponse_Dec.__bases__ = tuple(bases)

            ns0.searchByUserIDPaginationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "searchByUserIDPaginationResponse_Dec_Holder"

    class searchByUserIDResponse_Dec(ElementDeclaration):
        literal = "searchByUserIDResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","searchByUserIDResponse")
            kw["aname"] = "_searchByUserIDResponse"
            if ns0.searchByUserIDResponse_Def not in ns0.searchByUserIDResponse_Dec.__bases__:
                bases = list(ns0.searchByUserIDResponse_Dec.__bases__)
                bases.insert(0, ns0.searchByUserIDResponse_Def)
                ns0.searchByUserIDResponse_Dec.__bases__ = tuple(bases)

            ns0.searchByUserIDResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "searchByUserIDResponse_Dec_Holder"

    class searchByUserSurname_Dec(ElementDeclaration):
        literal = "searchByUserSurname"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","searchByUserSurname")
            kw["aname"] = "_searchByUserSurname"
            if ns0.searchByUserSurname_Def not in ns0.searchByUserSurname_Dec.__bases__:
                bases = list(ns0.searchByUserSurname_Dec.__bases__)
                bases.insert(0, ns0.searchByUserSurname_Def)
                ns0.searchByUserSurname_Dec.__bases__ = tuple(bases)

            ns0.searchByUserSurname_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "searchByUserSurname_Dec_Holder"

    class searchByUserSurnamePagination_Dec(ElementDeclaration):
        literal = "searchByUserSurnamePagination"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","searchByUserSurnamePagination")
            kw["aname"] = "_searchByUserSurnamePagination"
            if ns0.searchByUserSurnamePagination_Def not in ns0.searchByUserSurnamePagination_Dec.__bases__:
                bases = list(ns0.searchByUserSurnamePagination_Dec.__bases__)
                bases.insert(0, ns0.searchByUserSurnamePagination_Def)
                ns0.searchByUserSurnamePagination_Dec.__bases__ = tuple(bases)

            ns0.searchByUserSurnamePagination_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "searchByUserSurnamePagination_Dec_Holder"

    class searchByUserSurnamePaginationResponse_Dec(ElementDeclaration):
        literal = "searchByUserSurnamePaginationResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","searchByUserSurnamePaginationResponse")
            kw["aname"] = "_searchByUserSurnamePaginationResponse"
            if ns0.searchByUserSurnamePaginationResponse_Def not in ns0.searchByUserSurnamePaginationResponse_Dec.__bases__:
                bases = list(ns0.searchByUserSurnamePaginationResponse_Dec.__bases__)
                bases.insert(0, ns0.searchByUserSurnamePaginationResponse_Def)
                ns0.searchByUserSurnamePaginationResponse_Dec.__bases__ = tuple(bases)

            ns0.searchByUserSurnamePaginationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "searchByUserSurnamePaginationResponse_Dec_Holder"

    class searchByUserSurnameResponse_Dec(ElementDeclaration):
        literal = "searchByUserSurnameResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","searchByUserSurnameResponse")
            kw["aname"] = "_searchByUserSurnameResponse"
            if ns0.searchByUserSurnameResponse_Def not in ns0.searchByUserSurnameResponse_Dec.__bases__:
                bases = list(ns0.searchByUserSurnameResponse_Dec.__bases__)
                bases.insert(0, ns0.searchByUserSurnameResponse_Def)
                ns0.searchByUserSurnameResponse_Dec.__bases__ = tuple(bases)

            ns0.searchByUserSurnameResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "searchByUserSurnameResponse_Dec_Holder"

    class searchDatasetsBySample_Dec(ElementDeclaration):
        literal = "searchDatasetsBySample"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","searchDatasetsBySample")
            kw["aname"] = "_searchDatasetsBySample"
            if ns0.searchDatasetsBySample_Def not in ns0.searchDatasetsBySample_Dec.__bases__:
                bases = list(ns0.searchDatasetsBySample_Dec.__bases__)
                bases.insert(0, ns0.searchDatasetsBySample_Def)
                ns0.searchDatasetsBySample_Dec.__bases__ = tuple(bases)

            ns0.searchDatasetsBySample_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "searchDatasetsBySample_Dec_Holder"

    class searchDatasetsBySampleResponse_Dec(ElementDeclaration):
        literal = "searchDatasetsBySampleResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","searchDatasetsBySampleResponse")
            kw["aname"] = "_searchDatasetsBySampleResponse"
            if ns0.searchDatasetsBySampleResponse_Def not in ns0.searchDatasetsBySampleResponse_Dec.__bases__:
                bases = list(ns0.searchDatasetsBySampleResponse_Dec.__bases__)
                bases.insert(0, ns0.searchDatasetsBySampleResponse_Def)
                ns0.searchDatasetsBySampleResponse_Dec.__bases__ = tuple(bases)

            ns0.searchDatasetsBySampleResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "searchDatasetsBySampleResponse_Dec_Holder"

    class searchSamplesBySampleName_Dec(ElementDeclaration):
        literal = "searchSamplesBySampleName"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","searchSamplesBySampleName")
            kw["aname"] = "_searchSamplesBySampleName"
            if ns0.searchSamplesBySampleName_Def not in ns0.searchSamplesBySampleName_Dec.__bases__:
                bases = list(ns0.searchSamplesBySampleName_Dec.__bases__)
                bases.insert(0, ns0.searchSamplesBySampleName_Def)
                ns0.searchSamplesBySampleName_Dec.__bases__ = tuple(bases)

            ns0.searchSamplesBySampleName_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "searchSamplesBySampleName_Dec_Holder"

    class searchSamplesBySampleNameResponse_Dec(ElementDeclaration):
        literal = "searchSamplesBySampleNameResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","searchSamplesBySampleNameResponse")
            kw["aname"] = "_searchSamplesBySampleNameResponse"
            if ns0.searchSamplesBySampleNameResponse_Def not in ns0.searchSamplesBySampleNameResponse_Dec.__bases__:
                bases = list(ns0.searchSamplesBySampleNameResponse_Dec.__bases__)
                bases.insert(0, ns0.searchSamplesBySampleNameResponse_Def)
                ns0.searchSamplesBySampleNameResponse_Dec.__bases__ = tuple(bases)

            ns0.searchSamplesBySampleNameResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "searchSamplesBySampleNameResponse_Dec_Holder"

    class setDataSetSample_Dec(ElementDeclaration):
        literal = "setDataSetSample"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","setDataSetSample")
            kw["aname"] = "_setDataSetSample"
            if ns0.setDataSetSample_Def not in ns0.setDataSetSample_Dec.__bases__:
                bases = list(ns0.setDataSetSample_Dec.__bases__)
                bases.insert(0, ns0.setDataSetSample_Def)
                ns0.setDataSetSample_Dec.__bases__ = tuple(bases)

            ns0.setDataSetSample_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "setDataSetSample_Dec_Holder"

    class setDataSetSampleResponse_Dec(ElementDeclaration):
        literal = "setDataSetSampleResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","setDataSetSampleResponse")
            kw["aname"] = "_setDataSetSampleResponse"
            if ns0.setDataSetSampleResponse_Def not in ns0.setDataSetSampleResponse_Dec.__bases__:
                bases = list(ns0.setDataSetSampleResponse_Dec.__bases__)
                bases.insert(0, ns0.setDataSetSampleResponse_Def)
                ns0.setDataSetSampleResponse_Dec.__bases__ = tuple(bases)

            ns0.setDataSetSampleResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "setDataSetSampleResponse_Dec_Holder"

    class updateAuthorisation_Dec(ElementDeclaration):
        literal = "updateAuthorisation"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","updateAuthorisation")
            kw["aname"] = "_updateAuthorisation"
            if ns0.updateAuthorisation_Def not in ns0.updateAuthorisation_Dec.__bases__:
                bases = list(ns0.updateAuthorisation_Dec.__bases__)
                bases.insert(0, ns0.updateAuthorisation_Def)
                ns0.updateAuthorisation_Dec.__bases__ = tuple(bases)

            ns0.updateAuthorisation_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "updateAuthorisation_Dec_Holder"

    class updateAuthorisationResponse_Dec(ElementDeclaration):
        literal = "updateAuthorisationResponse"
        schema = "client.icat3.uk"
        def __init__(self, **kw):
            kw["pname"] = ("client.icat3.uk","updateAuthorisationResponse")
            kw["aname"] = "_updateAuthorisationResponse"
            if ns0.updateAuthorisationResponse_Def not in ns0.updateAuthorisationResponse_Dec.__bases__:
                bases = list(ns0.updateAuthorisationResponse_Dec.__bases__)
                bases.insert(0, ns0.updateAuthorisationResponse_Def)
                ns0.updateAuthorisationResponse_Dec.__bases__ = tuple(bases)

            ns0.updateAuthorisationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "updateAuthorisationResponse_Dec_Holder"

# end class ns0 (tns: client.icat3.uk)
