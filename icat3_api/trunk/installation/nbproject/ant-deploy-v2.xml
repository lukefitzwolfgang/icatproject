<?xml version="1.0" encoding="UTF-8"?>
<project basedir=".">
    <description>Glassfish deploy and config tasks.</description>
      
    <!--                                                            -->    
    <!--  Checks if facility.name is set and if it is ISIS or DLS   -->
    <!--                                                            -->
    <target name="-init-facility-deployment-props">
        <fail unless="facility.name" message="Must set facility.name in database.properties" />
        <condition property="facility.name.correct">
            <or>
                <equals arg1="${facility.name}"  arg2="ISIS" />
                <equals  arg1="${facility.name}" arg2="DLS" />
            </or>
        </condition>
        <fail unless="facility.name.correct" message="Must set facility.name to either ISIS or DLS" />
    </target>
    <!--                                                      -->    
    <!--  Checks Db and glassfish properties are set          -->
    <!--                                                      -->
    <target name="-init-cl-deployment-props" depends="-init-facility-deployment-props" >
         <!-- Icat  -->
        <fail unless="icat.user" message="Must set icat.user in database.properties" />
        <fail unless="icat.url" message="Must set icat.url in database.properties" />
        <fail unless="icat.password" message="Must set icat.password in database.properties" />
        <fail unless="icat.data.source.classname" message="Must set icat.data.source.classname in database.properties" />
        <fail unless="icat.driver" message="Must set icat.driver in database.properties" />
        <!-- Icat user -->
        <fail unless="icatuser.user" message="Must set icatuser.user in database.properties" />
        <fail unless="icatuser.url" message="Must set icatuser.url in database.properties" />
        <fail unless="icatuser.password" message="Must set icatuser.password in database.properties" />
        <fail unless="icatuser.data.source.classname" message="Must set icatuser.data.source.classname in database.properties" />
        <fail unless="icatuser.driver" message="Must set icatuser.driver in database.properties" />
         <!-- Glassfish config -->
        <fail unless="sjsas.admin.port" message="Must set sjsas.admin.port in glassfish.properties" />
        <fail unless="sjsas.http.port" message="Must set sjsas.http.port in glassfish.properties" />
        <fail unless="sjsas.password" message="Must set sjsas.password in glassfish.properties" />
        <fail unless="sjsas.host" message="Must set sjsas.host in glassfish.properties" />
        <fail unless="sjsas.username" message="Must set sjsas.username in glassfish.properties" />
        <fail unless="sjsas.domain" message="Must set sjsas.domain in glassfish.properties" />
        <fail unless="sjsas.root" message="Must set sjsas.root in glassfish.properties" />
        <!--  Check that valid root installation -->
        <available  property = "sjsas.root.exists"  file = "${sjsas.root}" />
        <fail unless="sjsas.root.exists" message="sjsas.root in glassfish.properties is not a valid directory" />
        <available  property = "sjsas.root.valid"  file = "${sjsas.root}/config/asadminenv.conf" />
        <fail unless="sjsas.root.valid" message="sjsas.root in glassfish.properties is not a valid glassfish installtion" />
        <fail unless="admin.auth.password" message="Must set admin.auth.password in glassfish.properties" />
    </target>
    <!--                                                     -->    
    <!--  Checks if JAVA_HOME is set                         -->
    <!--                                                     -->
    <target name="-init-java-deployment-env">
        <fail unless="java.home" message="Must set JAVA_HOME environmental variable" />
    </target>
    <!--                                                      -->
    <!--  Copies the Glassfish admin password to a file in    -->
    <!--  in the correct format so the <sun-appserv-admin>    -->
    <!--  commands can work.  Remember to delete this file.   -->
    <!--                                                      -->
    <target name="-init-cl-deployment-env" depends="-init-cl-deployment-props">
        <tempfile deleteonexit="true" prefix="sjsas" property="sjsas.password.file" destdir="${java.io.tmpdir}"/>  <!-- do not forget to delete this! -->
        <echo message="AS_ADMIN_PASSWORD=${sjsas.password}" file="${sjsas.password.file}"/>
    </target>
    <!--                                                      -->
    <!--  Copies jars and config file needed by Glassfish     -->
    <!--  to the server for ICAT and Data Portal to work      -->    
    <!--                                                      -->
    <target name="init-config" depends="-init-cl-deployment-props" description="Copies the config files to the glassfish server" >
        <!--  Data Portal's WSDL file -->
        <copy overwrite="false" file="${basedir}/nbproject/ICAT.wsdl" todir="${sjsas.root}/domains/${sjsas.domain}/config" />
         <!-- Log4j properties for all the apps -->
        <copy overwrite="false" file="${basedir}/nbproject/log4j.properties" todir="${sjsas.root}/domains/${sjsas.domain}/config" />
        <!--  Oracle's JDBC driver -->
        <copy  overwrite="false" todir="${sjsas.root}/domains/${sjsas.domain}/lib/ext">
           <!--<fileset dir="${basedir}/lib" excludes="**/*commons*.jar, **/*jglobus*.jar" includes="**/*.jar"/>-->
            <fileset file="${basedir}/lib/ojdbc14.jar" />
        </copy>
        <!--  Call -init-java-config and pass in ${copy.java} only if windows as   -->
        <!--  Unix will throw permission denied exception if copy try to file      -->
        <condition property="copy.java">
            <os family="windows" />
        </condition>
        <antcall target="-init-java-config" />
    </target>
    <!--                                                                        -->
    <!--  Copies wstx-asl-3.9.2 StAX parser into ${java.home}/lib/endorsed      -->  
    <!--  With Ant, java.home is the $JAVA_HOME/jre                             -->
    <!--  This is because there is an bug with the default StAX impl in java 6  -->
    <!--  This is dependant on whether the copy.java property is set            -->
    <!--                                                                        -->
    <target name="-init-java-config" if="copy.java"  depends="-init-java-deployment-env">     
        <!--  Create dir if not already there -->
        <mkdir dir="${java.home}/lib/endorsed"/>
        <!--  New STax parser for error with JDK 6 default implementation -->
        <copy overwrite="false" file="${basedir}/lib/wstx-asl-3.9.2.jar" todir="${java.home}/lib/endorsed" />
    </target>
    <!--                                                                        -->
    <!--  Copies wstx-asl-3.9.2 StAX parser into ${java.home}/lib/endorsed      -->  
    <!--  With Ant, java.home is the $JAVA_HOME/jre                             -->
    <!--  This is because there is an bug with the default StAX impl in java 6  -->
    <!--                                                                        -->
    <target name="init-java-config" description="Copies new wstx-asl-3.9.2.jar StAX parser into Java endorsed folder" >
        <antcall target="-init-java-config" >
            <param name="copy.java" value="true" />
        </antcall>
    </target>
    <!--                                                      -->
    <!--  Copies the applicatons depending on what facility   -->
    <!--  they wish to deploy                                 -->      
    <!--                                                      -->
    <target name="-copy-application" depends="-init-facility-deployment-props">
        <copy overwrite="false" file="${dist.dir}/${application.facility.jar}" tofile="${dist.dir}/${application.jar}" />
    </target>
    <!--                                                      -->
    <!--  Resolve host name                                   -->      
    <!--                                                      -->
    <target name="-get-hostname">
        <property environment="env"/>
        <property name="env.HOSTNAME" value="${env.HOSTNAME}"/>
    </target>
    <!--                                                      -->
    <!--  Removes all the jars and config file needed by      -->
    <!--  Glassfish for ICAT and Data Portal to work          -->    
    <!--                                                      -->
    <target name="remove-config" description="Removes the config files from the glassfish server" >
        <delete file="${sjsas.root}/domains/${sjsas.domain}/config/ICAT.wsdl" />
        <delete file="${sjsas.root}/domains/${sjsas.domain}/config/log4j.properties" />
    </target>
    <!--                                                                        -->
    <!--  Removes wstx-asl-3.9.2 StAX  parser from ${java.home}/lib/endorsed     -->    
    <!--                                                                        -->
    <target name="remove-java-config" description="Removes wstx-asl-3.9.2.jar from the Java endorsed folder" >
        <delete file="${java.home}/lib/endorsed/wstx-asl-3.9.2.jar" />
    </target>
    <!--                                                      -->
    <!--  Replaces a string with : and = to \: and \=         -->     
    <!--  This is because the : and = need to be escaped      -->                                                  
    <!--  when executing the admin command via ant            -->
    <!--                                                      -->
    <target name="-replaceURLs" depends="-replace-icatuser-url, -replace-icat-url" />
    <target name="-replace-icatuser-url">
        <echo level="info" message="${icatuser.url}" />
        <!-- Save URL to file -->
        <tempfile deleteonexit="true" prefix="urlreplace" property="url.file" destdir="${java.io.tmpdir}"/>  <!-- do not forget to delete this! -->
        <echo message="${icatuser.url}" file="${url.file}"/>
        <!-- Replace URL strings -->
        <replace file="${url.file}" value="\:" token=":" />
        <replace file="${url.file}" value="\=" token="=" />  
        <!-- Read back in as property -->
        <loadfile property="icatuser.url.replaced" srcFile="${url.file}" />
        <delete file="${url.file}"/>
        <echo level="info" message="${icatuser.url.replaced}" />
    </target>
    <target name="-replace-icat-url">
        <echo level="info" message="${icat.url}" />
        <!-- Save URL to file -->
        <tempfile deleteonexit="true" prefix="urlreplace" property="url.file" destdir="${java.io.tmpdir}"/>  <!-- do not forget to delete this! -->
        <echo message="${icat.url}" file="${url.file}"/>
        <!-- Replace URL strings -->
        <replace file="${url.file}" value="\:" token=":" />
        <replace file="${url.file}" value="\=" token="=" />  
        <!-- Read back in as property -->
        <loadfile property="icat.url.replaced" srcFile="${url.file}" />
        <delete file="${url.file}"/>
        <echo level="info" message="${icatuser.url.replaced}" />
    </target>   
    <!--                                                      -->
    <!--  Restarts glassfish domain ${sjsas.domain} specified -->
    <!--  in the properties file glassfish.properties         -->    
    <!--                                                      -->
    <target name="restart-domain" description="Restarts application server domain ${sjsas.domain}">
        <antcall target="stop-domain" />
        <antcall target="start-domain" />
    </target>
    <!--                                                      -->
    <!--  Starts glassfish domain ${sjsas.domain} specified   -->
    <!--  in the properties file glassfish.properties         -->    
    <!--                                                      -->
    <target name="start-domain" description="Starts application server domain ${sjsas.domain}">
        <echo level="info" message="Starting domain ${sjsas.domain}"/>
        <exec osfamily="Windows" spawn="true" dir="${sjsas.root}/bin" executable="${sjsas.root}/bin/asadmin.bat" >
            <arg line=" start-domain ${sjsas.domain}" />
        </exec>
        <exec osfamily="Unix" spawn="true" dir="${sjsas.root}/bin" executable="${sjsas.root}/bin/asadmin" >
            <arg line=" start-domain ${sjsas.domain}" />
        </exec>
        <echo level="info" message="Started server, waiting..." />
        <waitfor checkevery="1000" maxwait="30000" timeoutproperty="server.not.started">
            <http url="http://${sjsas.host}:${sjsas.admin.port}"/>
        </waitfor>
        <condition property="server.started">
            <and>
                <not>
                    <isset property="server.not.started"/>
                </not>
            </and>
        </condition>
        <fail unless="server.started" >Timed out retrieving http://${sjsas.host}:${sjsas.admin.port}.  Check that its running, if not, check the log file ${sjsas.root}/domains/${sjsas.domain}/logs/server.log
        </fail>
        <echo level="info" message="Server started ok." />
    </target>
    <!--                                                      -->
    <!--  Stops glassfish domain ${sjsas.domain} specified    -->
    <!--  in the properties file glassfish.properties         -->    
    <!--                                                      -->
    <target name="stop-domain" 
    description="Stops application server domain ${sjsas.domain}">
        <echo level="info"  message="Stopping domain ${sjsas.domain}"/>
        <exec osfamily="Windows" dir="${sjsas.root}/bin" executable="${sjsas.root}/bin/asadmin.bat" failonerror="true">
            <arg line=" stop-domain ${sjsas.domain}"/>
        </exec>
        <exec osfamily="Unix" dir="${sjsas.root}/bin" executable="${sjsas.root}/bin/asadmin" failonerror="true">
            <arg line=" stop-domain ${sjsas.domain}"/>
        </exec>
    </target>  
    <!--                                                      -->
    <!--  Adds JMS desination queue jms/${jms.dest.name}      -->
    <!--  to glassfish                                        -->    
    <!--                                                      -->
    <target name="-add-jms-destination" depends="-init-cl-deployment-env" >
        <echo level="info" message="Adding JMS destination ${jms.dest.name}" />
        <taskdef name="sun-appserv-admin" classname="org.apache.tools.ant.taskdefs.optional.sun.appserv.AdminTask"
                 classpath="${sjsas.root}/lib/sun-appserv-ant.jar" />
        <sun-appserv-admin  user="${sjsas.username}"
                passwordfile="${sjsas.password.file}"
                host="${sjsas.host}" port="${sjsas.admin.port}"
                command="create-jms-resource --restype javax.jms.Queue --enabled=true --property Name=${jms.dest.name} jms/${jms.dest.name}" asinstalldir="${sjsas.root}"/>
        <delete file="${sjsas.password.file}"/>
    </target>
    <!--                                                      -->
    <!--  Removes a JMS desination queue from glassfish       -->    
    <!--                                                      -->
    <target name="-remove-jms-destination" depends="-init-cl-deployment-env" >
        <echo  level="info" message="Removing JMS destination ${jms.dest.name}" />
        <taskdef name="sun-appserv-admin" classname="org.apache.tools.ant.taskdefs.optional.sun.appserv.AdminTask"
                 classpath="${sjsas.root}/lib/sun-appserv-ant.jar" />
        <sun-appserv-admin  user="${sjsas.username}"
                passwordfile="${sjsas.password.file}"
                host="${sjsas.host}" port="${sjsas.admin.port}"
                command="delete-jms-resource jms/${jms.dest.name}" asinstalldir="${sjsas.root}"/>
        <delete file="${sjsas.password.file}"/>
    </target>
    <!--                                                       -->
    <!--  Removes JMS desination factory jms/${jms.fact.name}  -->
    <!--  from glassfish                                       -->    
    <!--                                                       -->
    <target name="-remove-jms-factory" depends="-init-cl-deployment-env" >
        <echo  level="info" message="Removing JMS factory ${jms.fact.name}" />
        <taskdef name="sun-appserv-admin" classname="org.apache.tools.ant.taskdefs.optional.sun.appserv.AdminTask"
                 classpath="${sjsas.root}/lib/sun-appserv-ant.jar" />
        <sun-appserv-admin  user="${sjsas.username}"
                passwordfile="${sjsas.password.file}"
                host="${sjsas.host}" port="${sjsas.admin.port}"
                command="delete-jms-resource  ${jms.fact.name}" asinstalldir="${sjsas.root}"/>
        <delete file="${sjsas.password.file}"/>
    </target>
    <!--                                                      -->
    <!--  Adds JMS desination factory jms/${jms.fact.name}    -->
    <!--  to glassfish                                        -->    
    <!--                                                      -->
    <target name="-add-jms-factory" depends="-init-cl-deployment-env" >
        <echo level="info" message="Adding JMS factory ${jms.fact.name}" />
        <taskdef name="sun-appserv-admin" classname="org.apache.tools.ant.taskdefs.optional.sun.appserv.AdminTask"
                 classpath="${sjsas.root}/lib/sun-appserv-ant.jar" />
        <sun-appserv-admin  user="${sjsas.username}"
                passwordfile="${sjsas.password.file}"
                host="${sjsas.host}" port="${sjsas.admin.port}"
                command="create-jms-resource --restype javax.jms.QueueConnectionFactory  --enabled=true  ${jms.fact.name}" asinstalldir="${sjsas.root}"/>
        <delete file="${sjsas.password.file}"/>
    </target>
    <!--                                                           -->
    <!-- Adds a JMS connection pool jdbc/${connection.pool.name}   -->
    <!-- and resource ${connection.pool.name} to glassfish         -->    
    <!--                                                           -->
    <target name="-add-connection-pool" depends="-init-cl-deployment-env" >
        <echo  level="info" message="Adding connection pool ${connection.pool.name}" />
        <taskdef name="sun-appserv-admin" classname="org.apache.tools.ant.taskdefs.optional.sun.appserv.AdminTask"
                 classpath="${sjsas.root}/lib/sun-appserv-ant.jar" />
        <!-- isconnectvalidatereq=false improves performace -->
        <sun-appserv-admin  user="${sjsas.username}"
                passwordfile="${sjsas.password.file}"
                host="${sjsas.host}" port="${sjsas.admin.port}"
                command="create-jdbc-connection-pool --datasourceclassname ${data.source} --restype javax.sql.DataSource --failconnection=true --steadypoolsize 2 --maxpoolsize 8 --validationmethod table --validationtable ${table} --isconnectvalidatereq=false --description ${description} --property url=${url}:password=${password}:user=${user}:ImplicitCachingEnabled=true:MaxStatements=200 ${connection.pool.name}" asinstalldir="${sjsas.root}"/>
        <sun-appserv-admin  user="${sjsas.username}"
                passwordfile="${sjsas.password.file}"
                host="${sjsas.host}" port="${sjsas.admin.port}"
                command="create-jdbc-resource --connectionpoolid ${connection.pool.name} jdbc/${connection.pool.name}" asinstalldir="${sjsas.root}"/>
        <delete file="${sjsas.password.file}"/>
    </target>
    <!--                                                           -->
    <!-- Removes a JMS connection pool jdbc/${connection.pool.name}-->
    <!-- and resource ${connection.pool.name} from glassfish       -->    
    <!--                                                           -->
    <target name="-remove-connection-pool" depends="-init-cl-deployment-env" >
        <echo  level="info" message="Removing connection pool ${connection.pool.name}" />
        <taskdef name="sun-appserv-admin" classname="org.apache.tools.ant.taskdefs.optional.sun.appserv.AdminTask"
                 classpath="${sjsas.root}/lib/sun-appserv-ant.jar" />
        <sun-appserv-admin  user="${sjsas.username}"
                passwordfile="${sjsas.password.file}"
                host="${sjsas.host}" port="${sjsas.admin.port}"
                command="delete-jdbc-resource jdbc/${connection.pool.name}" asinstalldir="${sjsas.root}"/>
        <sun-appserv-admin  user="${sjsas.username}"
                passwordfile="${sjsas.password.file}"
                host="${sjsas.host}" port="${sjsas.admin.port}"
               command="delete-jdbc-connection-pool ${connection.pool.name}" asinstalldir="${sjsas.root}"/>
        <delete file="${sjsas.password.file}"/>
    </target>
    <!--                                                             -->
    <!--  Deploys application ${application.jar} to glassfish        -->    
    <!--                                                             -->
    <target name="-deploy-application" depends="-init-cl-deployment-env" >
        <echo level="info" message="Deploying ${application.jar}"/>
        <taskdef name="sun-appserv-deploy" classname="org.apache.tools.ant.taskdefs.optional.sun.appserv.DeployTask"
                 classpath="${sjsas.root}/lib/sun-appserv-ant.jar" />
        <sun-appserv-deploy user="${sjsas.username}"
                passwordfile="${sjsas.password.file}" precompilejsp="true"
                host="${sjsas.host}" port="${sjsas.admin.port}"
                file="${dist.dir}/${application.jar}" asinstalldir="${sjsas.root}"/>
        <delete file="${sjsas.password.file}"/>
    </target>
    <!--                                                             -->
    <!--  Undeploys application ${application.jar} from glassfish    -->    
    <!--                                                             -->
    <target name="-undeploy-application" depends="-init-cl-deployment-env" >
        <echo level="info" message="Undeploying ${application.jar}"/>
        <taskdef name="sun-appserv-undeploy" classname="org.apache.tools.ant.taskdefs.optional.sun.appserv.UndeployTask"
                 classpath="${sjsas.root}/lib/sun-appserv-ant.jar" />
        <sun-appserv-undeploy user="${sjsas.username}"
                passwordfile="${sjsas.password.file}"
                host="${sjsas.host}" port="${sjsas.admin.port}"
                file="${dist.dir}/${application.jar}" asinstalldir="${sjsas.root}"/>
        <delete file="${sjsas.password.file}"/>
    </target>
    <!--                                                             -->
    <!--     Adds user to glassfish file realm                       -->    
    <!--                                                             -->
    <target name="-add-file-realm-user" depends="-init-cl-deployment-env" >
        <fail unless="admin.auth.password" >${admin.auth.password} needs to be set.
        </fail>
          <!--  echo user password to password file too -->
        <echo message="AS_ADMIN_USERPASSWORD=${admin.auth.password}" file="${sjsas.password.file}"/>
        <taskdef name="sun-appserv-admin" classname="org.apache.tools.ant.taskdefs.optional.sun.appserv.AdminTask"
                 classpath="${sjsas.root}/lib/sun-appserv-ant.jar" />
        <sun-appserv-admin  user="${sjsas.username}"
                passwordfile="${sjsas.password.file}"
                host="${sjsas.host}" port="${sjsas.admin.port}"
               command=" create-file-user --groups ${admin.auth.group} ${admin.auth.user}" asinstalldir="${sjsas.root}"/>
        <delete file="${sjsas.password.file}"/>
    </target>
    <!--                                                             -->
    <!--     Adds user to glassfish file realm                       -->    
    <!--                                                             -->
    <target name="-remove-file-realm-user" depends="-init-cl-deployment-env" >
        <taskdef name="sun-appserv-admin" classname="org.apache.tools.ant.taskdefs.optional.sun.appserv.AdminTask"
                 classpath="${sjsas.root}/lib/sun-appserv-ant.jar" />
        <sun-appserv-admin  user="${sjsas.username}"
                passwordfile="${sjsas.password.file}"
                host="${sjsas.host}" port="${sjsas.admin.port}"
               command=" delete-file-user ${admin.auth.user}" asinstalldir="${sjsas.root}"/>
        <delete file="${sjsas.password.file}"/>
    </target>
</project>
