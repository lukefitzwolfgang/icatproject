################################################## 
# ICATService_services.py 
# generated by ZSI.generate.wsdl2python
##################################################


from ICATService_services_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
import ZSI

# Locator
class ICATServiceLocator:
    ICAT_address = "https://volga.dl.ac.uk:8181/ICATService/ICAT"
    def getICATAddress(self):
        return ICATServiceLocator.ICAT_address
    def getICAT(self, url=None, **kw):
        return ICATPortBindingSOAP(url or ICATServiceLocator.ICAT_address, **kw)

# Methods
class ICATPortBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: login
    def login(self, request):
        if isinstance(request, login) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(loginResponse.typecode)
        return response

    # op: loginLifetime
    def loginLifetime(self, request):
        if isinstance(request, loginLifetime) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(loginLifetimeResponse.typecode)
        return response

    # op: logout
    def logout(self, request):
        if isinstance(request, logout) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(logoutResponse.typecode)
        return response

    # op: addSampleParameter
    def addSampleParameter(self, request):
        if isinstance(request, addSampleParameter) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(addSampleParameterResponse.typecode)
        return response

    # op: addPublication
    def addPublication(self, request):
        if isinstance(request, addPublication) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(addPublicationResponse.typecode)
        return response

    # op: addSample
    def addSample(self, request):
        if isinstance(request, addSample) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(addSampleResponse.typecode)
        return response

    # op: addKeyword
    def addKeyword(self, request):
        if isinstance(request, addKeyword) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(addKeywordResponse.typecode)
        return response

    # op: addInvestigator
    def addInvestigator(self, request):
        if isinstance(request, addInvestigator) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(addInvestigatorResponse.typecode)
        return response

    # op: getInvestigation
    def getInvestigation(self, request):
        if isinstance(request, getInvestigation) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getInvestigationResponse.typecode)
        return response

    # op: getInvestigationIncludes
    def getInvestigationIncludes(self, request):
        if isinstance(request, getInvestigationIncludes) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getInvestigationIncludesResponse.typecode)
        return response

    # op: getDataset
    def getDataset(self, request):
        if isinstance(request, getDataset) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getDatasetResponse.typecode)
        return response

    # op: getDatasetIncludes
    def getDatasetIncludes(self, request):
        if isinstance(request, getDatasetIncludes) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getDatasetIncludesResponse.typecode)
        return response

    # op: getDatafile
    def getDatafile(self, request):
        if isinstance(request, getDatafile) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getDatafileResponse.typecode)
        return response

    # op: addDataFileParameter
    def addDataFileParameter(self, request):
        if isinstance(request, addDataFileParameter) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(addDataFileParameterResponse.typecode)
        return response

    # op: searchSamplesBySampleName
    def searchSamplesBySampleName(self, request):
        if isinstance(request, searchSamplesBySampleName) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(searchSamplesBySampleNameResponse.typecode)
        return response

    # op: listDatasetTypes
    def listDatasetTypes(self, request):
        if isinstance(request, listDatasetTypes) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(listDatasetTypesResponse.typecode)
        return response

    # op: listDatasetStatus
    def listDatasetStatus(self, request):
        if isinstance(request, listDatasetStatus) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(listDatasetStatusResponse.typecode)
        return response

    # op: getKeywordsForUser
    def getKeywordsForUser(self, request):
        if isinstance(request, getKeywordsForUser) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getKeywordsForUserResponse.typecode)
        return response

    # op: getKeywordsForUserStartWithMax
    def getKeywordsForUserStartWithMax(self, request):
        if isinstance(request, getKeywordsForUserStartWithMax) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getKeywordsForUserStartWithMaxResponse.typecode)
        return response

    # op: getKeywordsForUserMax
    def getKeywordsForUserMax(self, request):
        if isinstance(request, getKeywordsForUserMax) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getKeywordsForUserMaxResponse.typecode)
        return response

    # op: getKeywordsForUserType
    def getKeywordsForUserType(self, request):
        if isinstance(request, getKeywordsForUserType) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getKeywordsForUserTypeResponse.typecode)
        return response

    # op: getAllKeywords
    def getAllKeywords(self, request):
        if isinstance(request, getAllKeywords) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getAllKeywordsResponse.typecode)
        return response

    # op: getDatafiles
    def getDatafiles(self, request):
        if isinstance(request, getDatafiles) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getDatafilesResponse.typecode)
        return response

    # op: createDataFile
    def createDataFile(self, request):
        if isinstance(request, createDataFile) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(createDataFileResponse.typecode)
        return response

    # op: createDataFiles
    def createDataFiles(self, request):
        if isinstance(request, createDataFiles) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(createDataFilesResponse.typecode)
        return response

    # op: deleteDataFile
    def deleteDataFile(self, request):
        if isinstance(request, deleteDataFile) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(deleteDataFileResponse.typecode)
        return response

    # op: removeDataFile
    def removeDataFile(self, request):
        if isinstance(request, removeDataFile) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(removeDataFileResponse.typecode)
        return response

    # op: modifyDataFile
    def modifyDataFile(self, request):
        if isinstance(request, modifyDataFile) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(modifyDataFileResponse.typecode)
        return response

    # op: addDataFileParameters
    def addDataFileParameters(self, request):
        if isinstance(request, addDataFileParameters) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(addDataFileParametersResponse.typecode)
        return response

    # op: modifyDataFileParameter
    def modifyDataFileParameter(self, request):
        if isinstance(request, modifyDataFileParameter) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(modifyDataFileParameterResponse.typecode)
        return response

    # op: removeDataFileParameter
    def removeDataFileParameter(self, request):
        if isinstance(request, removeDataFileParameter) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(removeDataFileParameterResponse.typecode)
        return response

    # op: deleteDataFileParameter
    def deleteDataFileParameter(self, request):
        if isinstance(request, deleteDataFileParameter) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(deleteDataFileParameterResponse.typecode)
        return response

    # op: getAuthorisations
    def getAuthorisations(self, request):
        if isinstance(request, getAuthorisations) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getAuthorisationsResponse.typecode)
        return response

    # op: addAuthorisation
    def addAuthorisation(self, request):
        if isinstance(request, addAuthorisation) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(addAuthorisationResponse.typecode)
        return response

    # op: deleteAuthorisation
    def deleteAuthorisation(self, request):
        if isinstance(request, deleteAuthorisation) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(deleteAuthorisationResponse.typecode)
        return response

    # op: removeAuthorisation
    def removeAuthorisation(self, request):
        if isinstance(request, removeAuthorisation) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(removeAuthorisationResponse.typecode)
        return response

    # op: updateAuthorisation
    def updateAuthorisation(self, request):
        if isinstance(request, updateAuthorisation) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(updateAuthorisationResponse.typecode)
        return response

    # op: ingestMetadata
    def ingestMetadata(self, request):
        if isinstance(request, ingestMetadata) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ingestMetadataResponse.typecode)
        return response

    # op: searchByAdvanced
    def searchByAdvanced(self, request):
        if isinstance(request, searchByAdvanced) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(searchByAdvancedResponse.typecode)
        return response

    # op: searchByAdvancedPagination
    def searchByAdvancedPagination(self, request):
        if isinstance(request, searchByAdvancedPagination) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(searchByAdvancedPaginationResponse.typecode)
        return response

    # op: searchByKeywords
    def searchByKeywords(self, request):
        if isinstance(request, searchByKeywords) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(searchByKeywordsResponse.typecode)
        return response

    # op: searchByKeywordsAll
    def searchByKeywordsAll(self, request):
        if isinstance(request, searchByKeywordsAll) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(searchByKeywordsAllResponse.typecode)
        return response

    # op: getMyInvestigations
    def getMyInvestigations(self, request):
        if isinstance(request, getMyInvestigations) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getMyInvestigationsResponse.typecode)
        return response

    # op: getMyInvestigationsIncludes
    def getMyInvestigationsIncludes(self, request):
        if isinstance(request, getMyInvestigationsIncludes) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getMyInvestigationsIncludesResponse.typecode)
        return response

    # op: getMyInvestigationsIncludesPagination
    def getMyInvestigationsIncludesPagination(self, request):
        if isinstance(request, getMyInvestigationsIncludesPagination) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getMyInvestigationsIncludesPaginationResponse.typecode)
        return response

    # op: searchByUserID
    def searchByUserID(self, request):
        if isinstance(request, searchByUserID) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(searchByUserIDResponse.typecode)
        return response

    # op: searchByUserIDPagination
    def searchByUserIDPagination(self, request):
        if isinstance(request, searchByUserIDPagination) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(searchByUserIDPaginationResponse.typecode)
        return response

    # op: searchByUserSurname
    def searchByUserSurname(self, request):
        if isinstance(request, searchByUserSurname) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(searchByUserSurnameResponse.typecode)
        return response

    # op: searchByUserSurnamePagination
    def searchByUserSurnamePagination(self, request):
        if isinstance(request, searchByUserSurnamePagination) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(searchByUserSurnamePaginationResponse.typecode)
        return response

    # op: listInstruments
    def listInstruments(self, request):
        if isinstance(request, listInstruments) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(listInstrumentsResponse.typecode)
        return response

    # op: listRoles
    def listRoles(self, request):
        if isinstance(request, listRoles) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(listRolesResponse.typecode)
        return response

    # op: listParameters
    def listParameters(self, request):
        if isinstance(request, listParameters) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(listParametersResponse.typecode)
        return response

    # op: listInvestigationTypes
    def listInvestigationTypes(self, request):
        if isinstance(request, listInvestigationTypes) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(listInvestigationTypesResponse.typecode)
        return response

    # op: searchDatasetsBySample
    def searchDatasetsBySample(self, request):
        if isinstance(request, searchDatasetsBySample) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(searchDatasetsBySampleResponse.typecode)
        return response

    # op: searchByRunNumber
    def searchByRunNumber(self, request):
        if isinstance(request, searchByRunNumber) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(searchByRunNumberResponse.typecode)
        return response

    # op: searchByRunNumberPagination
    def searchByRunNumberPagination(self, request):
        if isinstance(request, searchByRunNumberPagination) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(searchByRunNumberPaginationResponse.typecode)
        return response

    # op: listDatafileFormats
    def listDatafileFormats(self, request):
        if isinstance(request, listDatafileFormats) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(listDatafileFormatsResponse.typecode)
        return response

    # op: getInvestigationsIncludes
    def getInvestigationsIncludes(self, request):
        if isinstance(request, getInvestigationsIncludes) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getInvestigationsIncludesResponse.typecode)
        return response

    # op: createInvestigation
    def createInvestigation(self, request):
        if isinstance(request, createInvestigation) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(createInvestigationResponse.typecode)
        return response

    # op: deleteInvestigation
    def deleteInvestigation(self, request):
        if isinstance(request, deleteInvestigation) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(deleteInvestigationResponse.typecode)
        return response

    # op: removeInvestigation
    def removeInvestigation(self, request):
        if isinstance(request, removeInvestigation) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(removeInvestigationResponse.typecode)
        return response

    # op: deleteInvestigator
    def deleteInvestigator(self, request):
        if isinstance(request, deleteInvestigator) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(deleteInvestigatorResponse.typecode)
        return response

    # op: deleteKeyword
    def deleteKeyword(self, request):
        if isinstance(request, deleteKeyword) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(deleteKeywordResponse.typecode)
        return response

    # op: deletePublication
    def deletePublication(self, request):
        if isinstance(request, deletePublication) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(deletePublicationResponse.typecode)
        return response

    # op: deleteSample
    def deleteSample(self, request):
        if isinstance(request, deleteSample) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(deleteSampleResponse.typecode)
        return response

    # op: deleteSampleParameter
    def deleteSampleParameter(self, request):
        if isinstance(request, deleteSampleParameter) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(deleteSampleParameterResponse.typecode)
        return response

    # op: modifyInvestigation
    def modifyInvestigation(self, request):
        if isinstance(request, modifyInvestigation) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(modifyInvestigationResponse.typecode)
        return response

    # op: modifyInvestigator
    def modifyInvestigator(self, request):
        if isinstance(request, modifyInvestigator) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(modifyInvestigatorResponse.typecode)
        return response

    # op: modifySample
    def modifySample(self, request):
        if isinstance(request, modifySample) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(modifySampleResponse.typecode)
        return response

    # op: modifyPublication
    def modifyPublication(self, request):
        if isinstance(request, modifyPublication) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(modifyPublicationResponse.typecode)
        return response

    # op: modifySampleParameter
    def modifySampleParameter(self, request):
        if isinstance(request, modifySampleParameter) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(modifySampleParameterResponse.typecode)
        return response

    # op: removeKeyword
    def removeKeyword(self, request):
        if isinstance(request, removeKeyword) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(removeKeywordResponse.typecode)
        return response

    # op: removeInvestigator
    def removeInvestigator(self, request):
        if isinstance(request, removeInvestigator) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(removeInvestigatorResponse.typecode)
        return response

    # op: removePublication
    def removePublication(self, request):
        if isinstance(request, removePublication) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(removePublicationResponse.typecode)
        return response

    # op: removeSample
    def removeSample(self, request):
        if isinstance(request, removeSample) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(removeSampleResponse.typecode)
        return response

    # op: removeSampleParameter
    def removeSampleParameter(self, request):
        if isinstance(request, removeSampleParameter) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(removeSampleParameterResponse.typecode)
        return response

    # op: getDatasets
    def getDatasets(self, request):
        if isinstance(request, getDatasets) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getDatasetsResponse.typecode)
        return response

    # op: createDataSet
    def createDataSet(self, request):
        if isinstance(request, createDataSet) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(createDataSetResponse.typecode)
        return response

    # op: createDataSets
    def createDataSets(self, request):
        if isinstance(request, createDataSets) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(createDataSetsResponse.typecode)
        return response

    # op: deleteDataSet
    def deleteDataSet(self, request):
        if isinstance(request, deleteDataSet) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(deleteDataSetResponse.typecode)
        return response

    # op: deleteDataSetParameter
    def deleteDataSetParameter(self, request):
        if isinstance(request, deleteDataSetParameter) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(deleteDataSetParameterResponse.typecode)
        return response

    # op: modifyDataSet
    def modifyDataSet(self, request):
        if isinstance(request, modifyDataSet) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(modifyDataSetResponse.typecode)
        return response

    # op: modifyDataSetParameter
    def modifyDataSetParameter(self, request):
        if isinstance(request, modifyDataSetParameter) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(modifyDataSetParameterResponse.typecode)
        return response

    # op: setDataSetSample
    def setDataSetSample(self, request):
        if isinstance(request, setDataSetSample) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(setDataSetSampleResponse.typecode)
        return response

    # op: addDataSetParameter
    def addDataSetParameter(self, request):
        if isinstance(request, addDataSetParameter) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(addDataSetParameterResponse.typecode)
        return response

    # op: addDataSetParameters
    def addDataSetParameters(self, request):
        if isinstance(request, addDataSetParameters) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(addDataSetParametersResponse.typecode)
        return response

    # op: removeDataSet
    def removeDataSet(self, request):
        if isinstance(request, removeDataSet) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(removeDataSetResponse.typecode)
        return response

    # op: removeDataSetParameter
    def removeDataSetParameter(self, request):
        if isinstance(request, removeDataSetParameter) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(removeDataSetParameterResponse.typecode)
        return response

    # op: downloadDatafile
    def downloadDatafile(self, request):
        if isinstance(request, downloadDatafile) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(downloadDatafileResponse.typecode)
        return response

    # op: downloadDataset
    def downloadDataset(self, request):
        if isinstance(request, downloadDataset) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(downloadDatasetResponse.typecode)
        return response

    # op: downloadDatafiles
    def downloadDatafiles(self, request):
        if isinstance(request, downloadDatafiles) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(downloadDatafilesResponse.typecode)
        return response

    # op: checkDatafileDownloadAccess
    def checkDatafileDownloadAccess(self, request):
        if isinstance(request, checkDatafileDownloadAccess) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(checkDatafileDownloadAccessResponse.typecode)
        return response

    # op: checkDatasetDownloadAccess
    def checkDatasetDownloadAccess(self, request):
        if isinstance(request, checkDatasetDownloadAccess) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(checkDatasetDownloadAccessResponse.typecode)
        return response

checkDatafileDownloadAccess = ns0.checkDatafileDownloadAccess_Dec().pyclass

checkDatafileDownloadAccessResponse = ns0.checkDatafileDownloadAccessResponse_Dec().pyclass

checkDatasetDownloadAccess = ns0.checkDatasetDownloadAccess_Dec().pyclass

checkDatasetDownloadAccessResponse = ns0.checkDatasetDownloadAccessResponse_Dec().pyclass
