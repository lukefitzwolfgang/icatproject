/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package uk.icat3.logging.mdb;

import uk.icat3.logging.util.LoggingBeanRemote;
import java.sql.Timestamp;
import java.util.Collection;
import javax.ejb.ActivationConfigProperty;
import javax.ejb.EJB;
import javax.ejb.MessageDriven;
import javax.jms.Message;
import javax.jms.MessageListener;
import javax.jms.ObjectMessage;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.apache.log4j.Logger;
import uk.icat3.logging.entity.AdvInstrument;
import uk.icat3.logging.entity.AdvInvestigator;
import uk.icat3.logging.entity.AdvKeyword;
import uk.icat3.logging.entity.AdvancedSearch;
import uk.icat3.logging.entity.LogInstrument;
import uk.icat3.logging.entity.InvInclude;
import uk.icat3.logging.entity.LogKeyword;
import uk.icat3.logging.entity.LogInvestigator;
import uk.icat3.logging.entity.Login;
import uk.icat3.logging.entity.Search;
import uk.icat3.logging.util.PropertyNames;
import uk.icat3.logging.util.QueueNames;
import uk.icat3.search.AdvancedSearchDetails;

/**
 *
 * @author scb24683
 */
@MessageDriven(mappedName = QueueNames.ADVANCED_QUEUE, activationConfig = {
    @ActivationConfigProperty(propertyName = "acknowledgeMode", propertyValue = "Auto-acknowledge"),
    @ActivationConfigProperty(propertyName = "destinationType", propertyValue = "javax.jms.Queue")
})
public class AdvancedSearchMDB implements MessageListener {

    @PersistenceContext(unitName = "icat3-logging")
    private EntityManager em;
    static Logger log;
    @EJB
    LoggingBeanRemote bean;

    public AdvancedSearchMDB() {
    }

    public AdvancedSearchMDB(EntityManager em) {
        this.em = em;
    }

    public void onMessage(Message message) {
        log = Logger.getLogger(AdvancedSearchMDB.class);
        try {
            log.info("==================Advanced Search message received==================");
            ObjectMessage msg = (ObjectMessage) message;
            String sessionId = msg.getStringProperty(PropertyNames.SESSION_ID);
            String userId = msg.getStringProperty(PropertyNames.USER_ID);
            String method = msg.getStringProperty(PropertyNames.METHOD);
            String time = msg.getStringProperty(PropertyNames.TIME);
            Timestamp searchTime = Timestamp.valueOf(time);

            //create generic Search object
            Search search = new Search();
            search.setLogin(em.find(Login.class, sessionId));
            search.setMethod(method);
            search.setSearchTime(searchTime);
            search.setUserId(userId);
            em.persist(search);
            log.trace("Search persisted");

            AdvancedSearchDetails details = (AdvancedSearchDetails) msg.getObject();
            AdvancedSearch adv = new AdvancedSearch();
            adv.setSearch(search);
            adv.setTitle(details.getInvestigationName());
            adv.setAbstract_(details.getInvestigationAbstract());
            adv.setGrantId(details.getGrantId());
            adv.setRb(details.getExperimentNumber());
            adv.setDatafile(details.getDatafileName());
            //if run numbers are not specified, will use run numbers generated by AdvancedSearchDetails object
            adv.setRunStart(Float.parseFloat(details.getRunStart().toString()));
            adv.setRunEnd(Float.parseFloat(details.getRunEnd().toString()));
            adv.setSample(details.getSampleName());
            adv.setInvestigator(details.getBackCatalogueInvestigatorString());

            if (details.hasDate()) {
                adv.setStartDate(new Timestamp(details.getDateRangeStart().getTime()));
                adv.setEndDate(new Timestamp(details.getDateRangeEnd().getTime()));
            }
            
            InvInclude inc = bean.getInvIncludeByName(details.getInvestigationInclude().name());
            adv.setInvInclude1(inc);
            adv.setInvType(details.getInvestigationType());
            adv.setVisitId(details.getVisitId());

            if (details.isCaseSensitive()) {
                adv.setCaseSensitive("Yes");
            }

            try {
                //try to retrieve pagination properties
                int start = msg.getIntProperty(PropertyNames.START_INDEX);
                int results = msg.getIntProperty(PropertyNames.NO_RESULTS);
                adv.setNoResults(new Long(results));
                adv.setStartIndex(new Long(start));
            } catch (Exception e) {
                log.warn("One or more of these properties does not exist");
            }

            em.persist(adv);
            log.trace("AdvancedSearch persisted");

            if ((details.getInstruments() != null) && (details.getInstruments().size() > 0)) {
                Collection<String> instruments = details.getInstruments();
                for (String ins : instruments) {
                    LogInstrument i = bean.getInstrumentByName(ins);
                    if (i == null) {
                        //if instrument is not found in db, create new instrument
                        i = new LogInstrument();
                        i.setName(ins);
                        em.persist(i);
                    } else {
                        AdvInstrument ai = new AdvInstrument();
                        ai.setLogInstrument(i);
                        ai.setAdvancedSearch(adv);
                        em.persist(ai);
                    }
                }
            }

            if ((details.getKeywords() != null) && (details.getKeywords().size() > 0)) {
                Collection<String> keywords = details.getKeywords();
                for (String word : keywords) {
                    LogKeyword kw = bean.findKeyword(word);
                    if (kw == null) {
                        //if keyword not found, create new keyword
                        kw = new LogKeyword();
                        kw.setKeyword(word);
                        em.persist(kw);
                        log.debug("Keyword persisted successfully");
                    } else {
                        log.trace("Keyword found in database");
                    }
                    AdvKeyword akw = new AdvKeyword();
                    akw.setAdvancedSearch(adv);
                    akw.setLogKeyword(kw);
                    em.persist(akw);
                    log.trace("AdvKeyword persisted succesfully");
                }
            }

            if ((details.getInvestigators() != null) && (details.getInvestigators().size() > 0)) {
                Collection<String> investigators = details.getInvestigators();
                for (String inv : investigators) {
                    LogInvestigator i = bean.searchForInvestigator(inv);
                    if (i == null) {
                        i = new LogInvestigator();
                        i.setName(inv);
                        em.persist(i);
                        log.debug("Investigator persisted");
                    } else {
                        log.trace("Investigator found in database");
                    }
                    AdvInvestigator ain = new AdvInvestigator();
                    ain.setLogInvestigator(i);
                    ain.setAdvancedSearch(adv);
                    em.persist(ain);
                    log.trace("AdvInvestigator persisted");
                }
            }

            log.info("SUCCESS");

        } catch (Exception e) {
            log.fatal("Error in advanced mdb", e);
        }
    }
}
