#!/usr/bin/env python

import logging
import sys
import getpass
import urlparse
import httplib
import json
from urllib import urlencode

logging.basicConfig(level=logging.CRITICAL)

class IcatException(Exception):
    def __init__(self, code, message):
        self.code = code
        self.message = message
        
    def __str__(self):
        return self.code + ": " + self.message

class IcatClient(object):

    def __init__(self, url):
        """
        Create an IcatClient. The url should have the scheme, hostname and optionally the port. 
        It may also have a path if it is installed behind an apache front end. 
        """
        o = urlparse.urlparse(url)
        self.icat_host = o.netloc
        path = o.path
        if not path.endswith("/"): path = path + "/"
        self.path = path + "icat/"
        self.sessionId = None
 
    def import_data(self, stream, attributes="user" , duplicate="throw"):  
        parms = {}
        parms["sessionId"] = self.sessionId
        parms["attributes"] = attributes
        parms["duplicate"] = duplicate 
        js = json.dumps(parms)
        path = self.path + "port"
        conn = httplib.HTTPSConnection(self.icat_host)
        conn.putrequest("POST", path, skip_accept_encoding=True)
        conn.putheader("Cache-Control", "no-cache")
        conn.putheader("Pragma", "no-cache")
        conn.putheader("Accept", "text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2")
        conn.putheader("Connection", "keep-alive") 
 
        BOUNDARY = 'gc0p4Jq0M2Yt08jU534c0p'
        CRLF = '\r\n'
 
        L = []
        L.append('--' + BOUNDARY)
        L.append('Content-Disposition: form-data; name="json"')
        L.append('')
        L.append(js)
        L.append('--' + BOUNDARY)
        L.append('Content-Disposition: form-data; name="file"; filename="file"')
        L.append('Content-Type: application/text/plain')
        L.append('')
        L.append(stream.read())
        L.append('--' + BOUNDARY + '--')
        L.append('')
        body = CRLF.join(L)
        conn.putheader("Content-Type", 'multipart/form-data; boundary=' + BOUNDARY)
        conn.putheader("Content-Length", len(body))
        conn.endheaders()
        conn.send(body)
        response = conn.getresponse()
        rc = response.status
        if (rc / 100 != 2):
            try:
                responseContent = response.read()
                om = json.loads(responseContent)
            except Exception:
                raise IcatException("InternalException", responseContent)
            code = om["code"]
            message = om["message"]
            raise IcatException(code, message)
        return response.read()

    def login(self, plugin, creds):
        cmap = []
        for i in range (0, len(creds), 2):
            key = creds[i]   
            if creds[i + 1] == "-":
                value = getpass.getpass()
            else:
                value = creds[i + 1]
            cmap.append({key:value})
        js = json.dumps({"plugin" : plugin, "credentials": cmap})
     
        path = self.path + "session"
        parameters = urlencode({"json": js})
        
        conn = httplib.HTTPSConnection(self.icat_host)
        conn.putrequest("POST", path, skip_accept_encoding=True)
        conn.putheader("Cache-Control", "no-cache")
        conn.putheader("Pragma", "no-cache")
        conn.putheader("Accept", "text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2")
        conn.putheader("Connection", "keep-alive") 
        conn.putheader('Content-Length', str(len(parameters)))
        conn.putheader('Content-Type', 'application/x-www-form-urlencoded')       
        conn.endheaders()
        conn.send(parameters)
        
        response = conn.getresponse()
        rc = response.status
        if (rc / 100 != 2):
            try:
                responseContent = response.read()
                om = json.loads(responseContent)
            except Exception:
                raise IcatException("InternalException", responseContent)
            code = om["code"]
            message = om["message"]
            raise IcatException(code, message)
        self.sessionId = json.loads(response.read())["sessionId"] 
        
args = sys.argv
if len(args) < 4 or len(args) % 2 != 0:
    print >> sys.stderr, "\nThis must have three fixed arguments: url, file and plugin mnemonic\nfollowed by pairs of arguments to represent the credentials. For example\n\n    ", args[0], "https://example.com:8181 db username root password guess\n"
    sys.exit(1)

url = args[1]
imp_file = args[2]
plugin = args[3]

client = IcatClient(url)

client.login(plugin, args[4:])
f = open(imp_file)
client.import_data(f, attributes="all" , duplicate="ignore")
f.close()
