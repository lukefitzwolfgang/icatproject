<project>
    <shortName>icat</shortName>
    <fullName>ICAT</fullName>
    <version>1.0</version>
    <readmeFile>README.txt</readmeFile>
    <licenseFile>LICENSE.txt</licenseFile>
    <leftImage>logo.gif</leftImage>
    <logoImage>small.gif</logoImage>
    <splashImage>logo.gif</splashImage>
    <functionDefinitionList>
        <!-- Prepare to run setup -->
        <actionDefinition name="prepare">
            <actionList>
                <if>
                    <conditionRuleEvaluationLogic>or</conditionRuleEvaluationLogic>
                    <actionList>
                        <setInstallerVariable name="url" value="http://www.icatproject.org/mvn/repo/org/icatproject/${component}/${componentVersion}/${component}-${componentVersion}-distro.zip">
                            <ruleList>
                                <compareText>
                                    <logic>equals</logic>
                                    <text>${url}</text>
                                    <value></value>
                                </compareText>
                            </ruleList>
                        </setInstallerVariable>
                        <generateRandomValue length="5" variable="tname"/>
                        <logMessage>
                            <text>Fetching distro ${url}</text>
                        </logMessage>
                        <httpGet filename="${system_temp_directory}/${tname}" progressText="Fetching distro for ${component}" url="${url}"/>
                        <unzip destinationDirectory="${installdir}" zipFile="${system_temp_directory}/${tname}"/>
                        <writeFile path="${installdir}/${component}/${propertyRoot}-setup.properties">
                            <text>glassfish=${installdir.dos}/glassfish4
                                port=4848
                                ${setupProperties}
                            </text>
                        </writeFile>
                        <copyFile>
                            <destination>${installdir}/${component}/${propertyRoot}.properties</destination>
                            <origin>${installdir}/${component}/${propertyRoot}.properties.example</origin>
                            <ruleList>
                                <fileExists negate="1" path="${installdir}/${component}/${propertyRoot}.properties"/>
                            </ruleList>
                        </copyFile>
                    </actionList>
                    <conditionRuleList>
                        <fileExists negate="1" path="${installdir}/${component}/${propertyRoot}.properties"/>
                        <fileExists negate="1" path="${installdir}/${component}/${propertyRoot}.properties.example"/>
                    </conditionRuleList>
                </if>
            </actionList>
            <parameterList>
                <stringParameter name="component" description="" explanation="" value="" default="" allowEmptyValue="0" width="40"/>
                <stringParameter name="componentVersion" description="" explanation="" value="" default="" allowEmptyValue="0" width="40"/>
                <stringParameter name="propertyRoot" description="" explanation="" value="" default="" allowEmptyValue="0" width="40"/>
                <stringParameter name="setupProperties" description="" explanation="" value="" default="" allowEmptyValue="0" width="40"/>
                <stringParameter name="url" description="" explanation="" value="" default="" allowEmptyValue="1" width="40"/>
            </parameterList>
        </actionDefinition>

        <!-- Run setup -v -->
        <actionDefinition name="setup">
            <actionList>
                <changePermissions>
                    <files>${installdir}/${component}/*.properties</files>
                    <permissions>0600</permissions>
                </changePermissions>
                <runProgram workingDirectory="${installdir}/${component}">
                    <program>${python_executable}</program>
                    <programArguments>setup -v install</programArguments>
                    <progressText>${msg}</progressText>
                    <onErrorActionList>
                        <showWarning>
                            <text>Setup of ${component} failed.
                                ${program_stderr}${program_stdout}
                            </text>
                        </showWarning>
                        <exit exitCode="1"/>
                    </onErrorActionList>
                </runProgram>
            </actionList>
            <parameterList>
                <stringParameter name="component">
                    <description></description>
                    <explanation></explanation>
                    <value></value>
                    <default></default>
                    <allowEmptyValue>0</allowEmptyValue>
                    <width>40</width>
                </stringParameter>
                <stringParameter name="msg">
                    <description></description>
                    <explanation></explanation>
                    <value></value>
                    <default></default>
                    <allowEmptyValue>1</allowEmptyValue>
                    <width>40</width>
                </stringParameter>
            </parameterList>
        </actionDefinition>
        <actionDefinition name="asadmin">
            <actionList>
                <setInstallerVariable name="msg" value="${cmd}">
                    <ruleList>
                        <compareText logic="equals" text="${msg} " value=""/>
                    </ruleList>
                </setInstallerVariable>
                <runProgram>
                    <program>${installdir}/glassfish4/glassfish/bin/asadmin</program>
                    <programArguments>${cmd}</programArguments>
                    <progressText>${msg}</progressText>
                    <onErrorActionList>
                        <throwError text="asadmin ${cmd} failed with: ${program_stderr}${program_stdout}"/>
                    </onErrorActionList>
                </runProgram>
                <setInstallerVariable name="msg" value=""/>
            </actionList>
            <parameterList>
                <stringParameter name="cmd">
                    <description></description>
                    <explanation></explanation>
                    <value></value>
                    <default></default>
                    <allowEmptyValue>0</allowEmptyValue>
                    <width>40</width>
                </stringParameter>
                <stringParameter name="msg">
                    <description></description>
                    <explanation></explanation>
                    <value></value>
                    <default></default>
                    <allowEmptyValue>1</allowEmptyValue>
                    <width>40</width>
                </stringParameter>
            </parameterList>
        </actionDefinition>
    </functionDefinitionList>
    <componentList>
        <component>
            <name>other</name>
            <description>Other stuff</description>
            <canBeEdited>0</canBeEdited>
            <selected>1</selected>
            <show>0</show>
            <folderList>
                <folder>
                    <destination>${installdir}</destination>
                    <name>top</name>
                    <platforms>all</platforms>
                    <distributionFileList>
                        <distributionFile origin="LICENSE.txt"/>
                        <distributionFile origin="README.txt"/>
                    </distributionFileList>
                </folder>
            </folderList>
        </component>
        <component>
            <name>MySQL</name>
            <description>MySQL Server</description>
            <canBeEdited>0</canBeEdited>
            <selected>1</selected>
            <show>0</show>
            <readyToInstallActionList>
                <setInstallerVariableFromScriptOutput>
                    <exec>${mysql_executable}</exec>
                    <execArgs>-u root -p${mysql_root_password.password} -N -B -e "SELECT COUNT(*) FROM mysql.user WHERE host='localhost' and user
                        ='${mysql_username}'"
                    </execArgs>
                    <name>result</name>
                    <onErrorActionList>
                        <throwError>
                            <text>${program_stderr}</text>
                        </throwError>
                    </onErrorActionList>
                </setInstallerVariableFromScriptOutput>
                <runProgram>
                    <program>${mysql_executable}</program>
                    <programArguments>-u root -p${mysql_root_password.password} -N -B -e "create user '${mysql_username}'@'localhost' identified by
                        '${mysql_password.password}'"
                    </programArguments>
                    <ruleList>
                        <compareValues>
                            <logic>equals</logic>
                            <value1>${result}</value1>
                            <value2>0</value2>
                        </compareValues>
                    </ruleList>
                </runProgram>
                <runProgram>
                    <program>${mysql_executable}</program>
                    <programArguments>-u root -p${mysql_root_password.password} -N -B -e "set password for '${mysql_username}'@'localhost' =
                        PASSWORD('${mysql_password.password}')"
                    </programArguments>
                </runProgram>
            </readyToInstallActionList>
        </component>
        <component>
            <name>Glassfish</name>
            <description>Glassfish Server</description>
            <canBeEdited>0</canBeEdited>
            <selected>1</selected>
            <show>0</show>
            <initializationActionList>
                <autodetectJava>
                    <promptUser>0</promptUser>
                    <validVersionList>
                        <validVersion>
                            <bitness></bitness>
                            <maxVersion>1.8</maxVersion>
                            <minVersion>1.7</minVersion>
                            <requireJDK>1</requireJDK>
                            <vendor></vendor>
                        </validVersion>
                    </validVersionList>
                </autodetectJava>
                <locate>
                    <command>keytool</command>
                    <variable>keytool_executable</variable>
                </locate>
                <dirName path="${java_executable}" variable="jbin"/>
                <dirName path="${jbin}" variable="java_home"/>
                <if>
                    <actionList>
                        <setInstallerVariable name="keytool_executable" value="${jbin}\keytool.exe"/>
                    </actionList>
                    <conditionRuleList>
                        <platformTest type="windows"/>
                        <compareText logic="equals" text="${keytool_executable}" value=""/>
                    </conditionRuleList>
                </if>
                <throwError>
                    <text>Unable to find keytool command</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${keytool_executable}</text>
                            <value></value>
                        </compareText>
                    </ruleList>
                </throwError>
            </initializationActionList>
            <parameterList>
                <passwordParameter>
                    <name>glassfish_password</name>
                    <title> Glassfish admin account</title>
                    <description>Password</description>
                    <explanation>Glassfish will be installed with the admin password you specify.</explanation>
                    <value></value>
                    <default></default>
                    <allowEmptyValue>0</allowEmptyValue>
                    <descriptionRetype>Retype password</descriptionRetype>
                    <width>20</width>
                    <ruleList>
                        <compareValues>
                            <logic>equals</logic>
                            <value1>${glassfish_installed}</value1>
                            <value2>0</value2>
                        </compareValues>
                    </ruleList>
                </passwordParameter>
            </parameterList>
            <postInstallationActionList>
                <if>
                    <actionList>
                        <generateRandomValue>
                            <length>5</length>
                            <variable>tname</variable>
                        </generateRandomValue>
                        <httpGet filename="${system_temp_directory}/${tname}" progressText="Fetching glassfish distro" url="http://www.icatproject.org/misc/install/glassfish-4.0.zip"/>
                        <unzip>
                            <destinationDirectory>${installdir}</destinationDirectory>
                            <zipFile>${system_temp_directory}/${tname}</zipFile>
                        </unzip>
                        <addTextToFile>
                            <file>${installdir}/glassfish4/glassfish/config/asenv.bat</file>
                            <text>set AS_JAVA=${java_home.dos}</text>
                            <ruleList>
                                <platformTest type="windows"/>
                            </ruleList>
                        </addTextToFile>
                        <asadmin cmd="delete-domain domain1" msg="delete domain"/>
                        <generateRandomValue length="5" variable="tname"/>
                        <writeFile path="${system_temp_directory}/${tname}" text="AS_ADMIN_PASSWORD=${glassfish_password.password}"/>
                        <asadmin cmd="-W ${system_temp_directory}/${tname} --user admin create-domain --savelogin domain1" msg="create domain"/>
                        <deleteFile path="${system_temp_directory}/${tname}"/>
                        <asadmin cmd="start-domain" msg=""/>
                        <asadmin cmd="enable-secure-admin" msg=""/>
                        <asadmin cmd="stop-domain" msg=""/>
                        <asadmin cmd="start-domain" msg=""/>
                        <asadmin msg="Set log format">
                            <cmd>set server.http-service.access-log.format="common"</cmd>
                        </asadmin>
                        <asadmin cmd="set server.http-service.access-logging-enabled=true" msg="Configure glassfish logging"/>
                        <asadmin cmd="set server.thread-pools.thread-pool.http-thread-pool.max-thread-pool-size=128" msg="Configure glassfish thread pool"/>
                        <asadmin cmd="set configs.config.server-config.cdi-service.enable-implicit-cdi=false" msg="Disable implict cdi in glassfish"/>
                        <asadmin msg="Require portable jndi names in glassfish">
                            <cmd>set server.ejb-container.property.disable-nonportable-jndi-names="true"</cmd>
                        </asadmin>
                        <asadmin cmd="delete-ssl --type http-listener http-listener-2" msg="Limit set of cifers in glassfish"/>
                        <asadmin cmd="delete-network-listener http-listener-2" msg="Limit set of cifers in glassfish"/>
                        <asadmin cmd="create-network-listener --listenerport 8181 --protocol http-listener-2 http-listener-2" msg="Limit set of cifers in glassfish"/>
                        <asadmin cmd="create-ssl --type http-listener --certname s1as --ssl3enabled=false --ssl3tlsciphers +SSL_RSA_WITH_RC4_128_MD5,+SSL_RSA_WITH_RC4_128_SHA http-listener-2" msg="Limit set of cifers in glassfish"/>
                        <asadmin cmd="set configs.config.server-config.network-config.protocols.protocol.http-listener-2.http.request-timeout-seconds=-1">
                            <msg></msg>
                        </asadmin>
                        <runProgram program="${keytool_executable}" programArguments="-export -keystore ${installdir.dos}/glassfish4/glassfish/domains/domain1/config/keystore.jks -file  ${installdir.dos}/glassfish4/glassfish/domains/domain1/config/cert -storepass changeit -alias s1as" progressText="Extracting certificate"/>
                        <httpGet filename="${installdir}/glassfish4/glassfish/domains/domain1/lib/mysql-connector-java-5.1.30-bin.jar" progressText="Installing MySQL connector" url="http://www.icatproject.org/misc/install/mysql-connector-java-5.1.30-bin.jar"/>
                    </actionList>
                    <conditionRuleList>
                        <compareValues>
                            <logic>equals</logic>
                            <value1>${glassfish_installed}</value1>
                            <value2>0</value2>
                        </compareValues>
                    </conditionRuleList>
                </if>
                <runProgram>
                    <abortOnError>0</abortOnError>
                    <program>${installdir}/glassfish4/glassfish/bin/asadmin</program>
                    <programArguments>stop-domain</programArguments>
                    <progressText>Stop glassfish</progressText>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
                <asadmin cmd="start-domain">
                    <msg>Start glassfish</msg>
                </asadmin>
            </postInstallationActionList>
            <postUninstallationActionList>
                <deleteFile path="${installdir}/glassfish4/"/>
            </postUninstallationActionList>
            <preInstallationActionList>
                <if>
                    <actionList>
                        <setInstallerVariable>
                            <name>glassfish_installed</name>
                            <value>1</value>
                        </setInstallerVariable>
                    </actionList>
                    <conditionRuleList>
                        <fileExists path="${installdir}/glassfish4/glassfish/domains/domain1/lib/mysql-connector-java-5.1.30-bin.jar"/>
                    </conditionRuleList>
                    <elseActionList>
                        <setInstallerVariable>
                            <name>glassfish_installed</name>
                            <value>0</value>
                        </setInstallerVariable>
                        <runProgram>
                            <abortOnError>0</abortOnError>
                            <program>${installdir}/glassfish4/glassfish/bin/asadmin</program>
                            <programArguments>stop-domain</programArguments>
                            <progressText>Stop glassfish</progressText>
                            <showMessageOnError>0</showMessageOnError>
                        </runProgram>
                        <getProcessUsingPort>
                            <port>4848</port>
                            <variable>glassfish_management</variable>
                        </getProcessUsingPort>
                        <throwError>
                            <text>Port 4848 is in use by ${glassfish_management}</text>
                            <ruleList>
                                <compareText>
                                    <logic>equals</logic>
                                    <negate>1</negate>
                                    <text>${glassfish_management}</text>
                                    <value></value>
                                </compareText>
                            </ruleList>
                        </throwError>
                        <getProcessUsingPort>
                            <port>8181</port>
                            <variable>glassfish_https</variable>
                        </getProcessUsingPort>
                        <throwError>
                            <text>Port 8181 is in use by ${glassfish_https}</text>
                            <ruleList>
                                <compareText>
                                    <logic>equals</logic>
                                    <negate>1</negate>
                                    <text>${glassfish_https}</text>
                                    <value></value>
                                </compareText>
                            </ruleList>
                        </throwError>
                    </elseActionList>
                </if>
            </preInstallationActionList>
            <preUninstallationActionList>
                <runProgram>
                    <program>${installdir}/glassfish4/glassfish/bin/asadmin</program>
                    <programArguments>stop-domain</programArguments>
                    <progressText>Stopping glassfish</progressText>
                    <onErrorActionList>
                        <throwError text="asadmin stop-domain failed with: ${program_stdout}${program_stderr}"/>
                    </onErrorActionList>
                </runProgram>
            </preUninstallationActionList>
        </component>
        <componentGroup>
            <name>authn</name>
            <description>Authenticators</description>
            <canBeEdited>0</canBeEdited>
            <detailedDescription>You must include at least one authenticator to allow login to ICAT.
            </detailedDescription>
            <selected>1</selected>
            <show>1</show>
            <componentList>
                <component>
                    <name>authn_anon</name>
                    <description>Anonymous Authenticator</description>
                    <canBeEdited>1</canBeEdited>
                    <detailedDescription>The anonymous authenticator accepts anyone.</detailedDescription>
                    <selected>1</selected>
                    <show>1</show>
                    <postInstallationActionList>
                        <prepare component="authn_anon" componentVersion="${authn_anon_version}" propertyRoot="authn_anon" setupProperties="">
                            <url></url>
                        </prepare>
                        <setup component="authn_anon" msg="Deploying ANON Authenticator"/>
                    </postInstallationActionList>
                </component>
                <component>
                    <name>authn_simple</name>
                    <description>Simple Authenticator</description>
                    <canBeEdited>1</canBeEdited>
                    <detailedDescription>Users and passwords are listed in a file</detailedDescription>
                    <selected>0</selected>
                    <show>1</show>
                    <parameterList>
                        <parameterGroup>
                            <name>SIMPLEConfiguration</name>
                            <title>Simple Authenticator Configuration</title>
                            <explanation></explanation>
                            <value></value>
                            <default></default>
                            <parameterList>
                                <parameterGroup>
                                    <name>SIMPLEConfigurationUser0</name>
                                    <explanation>User 1</explanation>
                                    <value></value>
                                    <default></default>
                                    <parameterList>
                                        <stringParameter>
                                            <name>user0</name>
                                            <description>Name</description>
                                            <explanation></explanation>
                                            <value>${user0}</value>
                                            <default></default>
                                            <allowEmptyValue>1</allowEmptyValue>
                                            <width>30</width>
                                        </stringParameter>
                                        <stringParameter>
                                            <name>password0</name>
                                            <description>Password</description>
                                            <explanation></explanation>
                                            <value>${password0}</value>
                                            <default></default>
                                            <allowEmptyValue>1</allowEmptyValue>
                                            <width>119</width>
                                        </stringParameter>
                                    </parameterList>
                                </parameterGroup>
                                <parameterGroup>
                                    <name>SIMPLEConfigurationUser1</name>
                                    <explanation>User 2</explanation>
                                    <value></value>
                                    <default></default>
                                    <parameterList>
                                        <stringParameter>
                                            <name>user1</name>
                                            <description>Name</description>
                                            <explanation></explanation>
                                            <value>${user1}</value>
                                            <default></default>
                                            <allowEmptyValue>1</allowEmptyValue>
                                            <width>30</width>
                                        </stringParameter>
                                        <stringParameter>
                                            <name>password1</name>
                                            <description>Password</description>
                                            <explanation></explanation>
                                            <value>${password1}</value>
                                            <default></default>
                                            <allowEmptyValue>1</allowEmptyValue>
                                            <width>119</width>
                                        </stringParameter>
                                    </parameterList>
                                </parameterGroup>
                                <parameterGroup>
                                    <name>SIMPLEConfigurationUser2</name>
                                    <explanation>User 3</explanation>
                                    <value></value>
                                    <default></default>
                                    <parameterList>
                                        <stringParameter>
                                            <name>user2</name>
                                            <description>Name</description>
                                            <explanation></explanation>
                                            <value>${user2}</value>
                                            <default></default>
                                            <allowEmptyValue>1</allowEmptyValue>
                                            <width>30</width>
                                        </stringParameter>
                                        <stringParameter>
                                            <name>password2</name>
                                            <description>Password</description>
                                            <explanation></explanation>
                                            <value>${password2}</value>
                                            <default></default>
                                            <allowEmptyValue>1</allowEmptyValue>
                                            <width>119</width>
                                        </stringParameter>
                                    </parameterList>
                                </parameterGroup>
                                <parameterGroup>
                                    <name>SIMPLEConfigurationUser3</name>
                                    <explanation>User 4</explanation>
                                    <value></value>
                                    <default></default>
                                    <parameterList>
                                        <stringParameter>
                                            <name>user3</name>
                                            <description>Name</description>
                                            <explanation></explanation>
                                            <value>${user3}</value>
                                            <default></default>
                                            <allowEmptyValue>1</allowEmptyValue>
                                            <width>30</width>
                                        </stringParameter>
                                        <stringParameter>
                                            <name>password3</name>
                                            <description>Password</description>
                                            <explanation></explanation>
                                            <value>${password3}</value>
                                            <default></default>
                                            <allowEmptyValue>1</allowEmptyValue>
                                            <width>119</width>
                                        </stringParameter>
                                    </parameterList>
                                </parameterGroup>
                                <parameterGroup>
                                    <name>SIMPLEConfigurationUser4</name>
                                    <explanation>User 5</explanation>
                                    <value></value>
                                    <default></default>
                                    <parameterList>
                                        <stringParameter>
                                            <name>user4</name>
                                            <description>Name</description>
                                            <explanation></explanation>
                                            <value>${user4}</value>
                                            <default></default>
                                            <allowEmptyValue>1</allowEmptyValue>
                                            <width>30</width>
                                        </stringParameter>
                                        <stringParameter>
                                            <name>password4</name>
                                            <description>Password</description>
                                            <explanation></explanation>
                                            <value>${password4}</value>
                                            <default></default>
                                            <allowEmptyValue>1</allowEmptyValue>
                                            <width>119</width>
                                        </stringParameter>
                                    </parameterList>
                                </parameterGroup>
                            </parameterList>
                            <preShowPageActionList>
                                <if>
                                    <actionList>
                                        <if>
                                            <actionList>
                                                <propertiesFileGet>
                                                    <file>${installdir}/authn_simple/authn_simple.properties</file>
                                                    <key>user.list</key>
                                                    <variable>user_list</variable>
                                                </propertiesFileGet>
                                                <setInstallerVariable name="n" value="0"/>
                                                <foreach>
                                                    <values>${user_list}</values>
                                                    <variables>name</variables>
                                                    <actionList>
                                                        <setInstallerVariable name="user${n}" value="${name}"/>
                                                        <propertiesFileGet>
                                                            <file>${installdir}/authn_simple/authn_simple.properties</file>
                                                            <key>user.${name}.password</key>
                                                            <variable>upw</variable>
                                                        </propertiesFileGet>
                                                        <setInstallerVariable name="password${n}" value="${upw}"/>
                                                        <mathExpression text="${n} + 1" variable="n"/>
                                                    </actionList>
                                                </foreach>
                                            </actionList>
                                            <conditionRuleList>
                                                <fileExists>
                                                    <path>${installdir}/authn_simple/authn_simple.properties</path>
                                                </fileExists>
                                            </conditionRuleList>
                                        </if>
                                        <setInstallerVariable name="authnSimplePagesInited" value="1"/>
                                    </actionList>
                                    <conditionRuleList>
                                        <compareValues logic="equals" negate="1" value1="${authnSimplePagesInited}" value2="1"/>
                                    </conditionRuleList>
                                </if>
                            </preShowPageActionList>
                        </parameterGroup>
                    </parameterList>
                    <postInstallationActionList>
                        <prepare component="authn_simple" componentVersion="${authn_simple_version}" propertyRoot="authn_simple" setupProperties="">
                            <url></url>
                        </prepare>
                        <setInstallerVariable name="n" value="0"/>
                        <setInstallerVariable name="user_list" value=""/>
                        <while>
                            <actionList>
                                <if>
                                    <actionList>
                                        <setInstallerVariable name="tpass" value="${password${n}}"/>
                                        <setInstallerVariableFromScriptOutput abortOnError="0" exec="${python_executable}" name="password${n}">
                                            <execArgs>-c "import crypt; print crypt.crypt('${tpass}')"</execArgs>
                                            <showMessageOnError>0</showMessageOnError>
                                            <onErrorActionList>
                                                <setInstallerVariable name="password${n}" value="${tpass}"/>
                                            </onErrorActionList>
                                            <ruleList>
                                                <regExMatch>
                                                    <logic>matches</logic>
                                                    <negate>1</negate>
                                                    <pattern>^\$.*</pattern>
                                                    <text>${password${n}}</text>
                                                </regExMatch>
                                            </ruleList>
                                        </setInstallerVariableFromScriptOutput>
                                        <propertiesFileSet>
                                            <file>${installdir}/authn_simple/authn_simple.properties</file>
                                            <key>user.${user${n}}.password</key>
                                            <value>${password${n}}</value>
                                        </propertiesFileSet>
                                        <setInstallerVariable name="user_list" value="${user_list} ${user${n}}"/>
                                    </actionList>
                                    <conditionRuleList>
                                        <compareText logic="equals" negate="1" text="${user${n}}" value=""/>
                                    </conditionRuleList>
                                </if>
                                <mathExpression text="${n} + 1" variable="n"/>
                            </actionList>
                            <conditionRuleList>
                                <compareValues logic="less" value1="${n}" value2="5"/>
                            </conditionRuleList>
                        </while>
                        <propertiesFileSet>
                            <file>${installdir}/authn_simple/authn_simple.properties</file>
                            <key>user.list</key>
                            <value>${user_list}</value>
                        </propertiesFileSet>
                        <setup component="authn_simple" msg="Deploying Simple Authenticator"/>
                    </postInstallationActionList>
                </component>
                <component>
                    <name>authn_ldap</name>
                    <description>LDAP Authenticator</description>
                    <canBeEdited>1</canBeEdited>
                    <detailedDescription>An authenticator that makes use of the contents of an LDAP database.</detailedDescription>
                    <selected>0</selected>
                    <show>1</show>
                    <parameterList>
                        <parameterGroup>
                            <name>LDAPConfiguration</name>
                            <title>LDAP Configuration</title>
                            <explanation>LDAP Configuration</explanation>
                            <value></value>
                            <default></default>
                            <parameterList>
                                <stringParameter>
                                    <name>provider_url</name>
                                    <description>provider_url</description>
                                    <explanation>The url of the ldap server</explanation>
                                    <value>${provider_url}</value>
                                    <default></default>
                                    <allowEmptyValue>0</allowEmptyValue>
                                    <width>30</width>
                                </stringParameter>
                                <stringParameter>
                                    <name>security_principal</name>
                                    <description>security_principal</description>
                                    <explanation>The % character in the security_principal will be replaced by the specified user name.</explanation>
                                    <value>${security_principal}</value>
                                    <default></default>
                                    <allowEmptyValue>0</allowEmptyValue>
                                    <width>30</width>
                                </stringParameter>
                                <choiceParameter>
                                    <name>case</name>
                                    <description>case</description>
                                    <explanation>If not set the case will be left alone</explanation>
                                    <value>${case}</value>
                                    <default></default>
                                    <allowEmptyValue>1</allowEmptyValue>
                                    <displayType>combobox</displayType>
                                    <ordering>default</ordering>
                                    <width>30</width>
                                    <optionList>
                                        <option>
                                            <description>Convert returned name to upper case</description>
                                            <image></image>
                                            <text>upper</text>
                                            <value>upper</value>
                                        </option>
                                        <option>
                                            <description>Convert returned name to lower case</description>
                                            <image></image>
                                            <text>lower</text>
                                            <value>lower</value>
                                        </option>
                                        <option>
                                            <description>Do not modify the case of the returned name</description>
                                            <image></image>
                                            <text></text>
                                            <value></value>
                                        </option>
                                    </optionList>
                                </choiceParameter>
                            </parameterList>
                            <preShowPageActionList>
                                <if>
                                    <actionList>
                                        <if>
                                            <actionList>
                                                <foreach>
                                                    <values>provider_url security_principal case</values>
                                                    <variables>prop</variables>
                                                    <actionList>
                                                        <propertiesFileGet>
                                                            <file>${installdir}/authn_ldap/authn_ldap.properties</file>
                                                            <key>${prop}</key>
                                                            <variable>${prop}</variable>
                                                        </propertiesFileGet>
                                                    </actionList>
                                                </foreach>
                                            </actionList>
                                            <conditionRuleList>
                                                <fileExists path="${installdir}/authn_ldap/authn_ldap.properties"/>
                                            </conditionRuleList>
                                            <elseActionList>
                                                <setInstallerVariable name="provider_url" value=""/>
                                                <setInstallerVariable name="security_principal" value=""/>
                                                <setInstallerVariable name="case" value="lower"/>
                                            </elseActionList>
                                        </if>
                                        <setInstallerVariable name="authnLdapPagesInited" value="1"/>
                                    </actionList>
                                    <conditionRuleList>
                                        <compareValues logic="equals" negate="1" value1="${authnLdapPagesInited}" value2="1"/>
                                    </conditionRuleList>
                                </if>
                            </preShowPageActionList>
                        </parameterGroup>
                    </parameterList>
                    <postInstallationActionList>
                        <prepare component="authn_ldap" componentVersion="${authn_ldap_version}" propertyRoot="authn_ldap" url="http://icatproject.org/misc/install/authn_ldap-${authn_ldap_version}-distro.zip">
                            <setupProperties></setupProperties>
                        </prepare>
                        <propertiesFileSet>
                            <file>${installdir}/authn_ldap/authn_ldap.properties</file>
                            <key>case</key>
                            <value>${case}</value>
                        </propertiesFileSet>
                        <propertiesFileSet>
                            <file>${installdir}/authn_ldap/authn_ldap.properties</file>
                            <key>provider_url</key>
                            <value>${provider_url}</value>
                        </propertiesFileSet>
                        <propertiesFileSet>
                            <file>${installdir}/authn_ldap/authn_ldap.properties</file>
                            <key>security_principal</key>
                            <value>${security_principal}</value>
                        </propertiesFileSet>
                        <touchFile path="${installdir}/authn_ldap/configured"/>
                        <setup component="authn_ldap" msg="Deploying LDAP Authenticator"/>
                    </postInstallationActionList>
                </component>
                <component>
                    <name>authn_db</name>
                    <description>Database Authenticator</description>
                    <canBeEdited>1</canBeEdited>
                    <detailedDescription>An authenticator that makes use of the contents of a relational database.</detailedDescription>
                    <selected>0</selected>
                    <show>1</show>
                    <parameterList>
                        <stringParameter name="authnDB" value="authn_db" default="authn_db">
                            <title>Database Authenticator Configuration Parameters</title>
                            <description>Name of MySQL Database to use for Database Authenticator</description>
                            <explanation>The data base will be created for you. If you use an existing database an attempt will be made to add the
                                required tables to it.
                            </explanation>
                            <allowEmptyValue>0</allowEmptyValue>
                            <width>30</width>
                            <ruleList>
                                <fileExists negate="1" path="${installdir}/authn_db/authn_db-setup.properties"/>
                            </ruleList>
                        </stringParameter>
                    </parameterList>
                    <postInstallationActionList>
                        <runProgram>
                            <program>${mysql_executable}</program>
                            <programArguments>-u root -p${mysql_root_password.password} -N -B -e "grant all on ${authnDB}.* to
                                '${mysql_username}'@'localhost'"
                            </programArguments>
                            <progressText>Configuring authn_db database</progressText>
                        </runProgram>
                        <runProgram>
                            <program>${mysql_executable}</program>
                            <programArguments>-u ${mysql_username} -p${mysql_password.password} -N -B -e "create database if not exists ${authnDB}"
                            </programArguments>
                            <progressText>Configuring authn_db database</progressText>
                            <onErrorActionList>
                                <throwError>
                                    <text>${program_stderr}</text>
                                </throwError>
                            </onErrorActionList>
                        </runProgram>
                        <prepare component="authn_db" componentVersion="${authn_db_version}" propertyRoot="authn_db">
                            <setupProperties>driver=com.mysql.jdbc.jdbc2.optional.MysqlDataSource
                                dbProperties=user=${mysql_username}:password=${mysql_password}:databaseName=${authnDB}
                            </setupProperties>
                            <url></url>
                        </prepare>
                        <setup component="authn_db" msg="Deploying Database Authenticator"/>
                    </postInstallationActionList>
                </component>
            </componentList>
        </componentGroup>
        <component>
            <name>icat_server</name>
            <description>The ICAT server</description>
            <canBeEdited>0</canBeEdited>
            <detailedDescription>This is the main ICAT server for the metadata.</detailedDescription>
            <selected>1</selected>
            <show>0</show>
            <componentSelectionValidationActionList>
                <throwError text="You must install at least one authenticator.">
                    <ruleList>
                        <isFalse value="${component(authn).component(authn_anon).selected}"/>
                        <isFalse value="${component(authn).component(authn_ldap).selected}"/>
                        <isFalse value="${component(authn).component(authn_db).selected}"/>
                        <isFalse value="${component(authn).component(authn_simple).selected}"/>
                    </ruleList>
                </throwError>
            </componentSelectionValidationActionList>
            <parameterList>
                <parameterGroup>
                    <name>ICATConfiguration</name>
                    <title>ICAT Server Configuration Parameters</title>
                    <explanation></explanation>
                    <value></value>
                    <default></default>
                    <parameterList>
                        <stringParameter name="icatDB" value="icat" default="icat">
                            <description>Name of MySQL Database to use for ICAT server</description>
                            <explanation>The data base for the ICAT server will be created for you.
                                If you use an existing database an attempt will be
                                made to add the required tables to it.
                            </explanation>
                            <allowEmptyValue>0</allowEmptyValue>
                            <width>30</width>
                            <ruleList>
                                <fileExists negate="1" path="${installdir}/icat.server/icat-setup.properties"/>
                            </ruleList>
                        </stringParameter>
                        <stringParameter>
                            <name>rootUserNames</name>
                            <description>rootUserNames</description>
                            <explanation>Space separated list of users with "root" access to the ICAT server; for example: simple/root.
                                The prefix must
                                correspond to one of the authenticators you have selected.
                            </explanation>
                            <value>${rootUserNames}</value>
                            <default></default>
                            <allowEmptyValue>0</allowEmptyValue>
                            <width>30</width>
                        </stringParameter>
                        <stringParameter>
                            <name>maxEntities</name>
                            <description>maxEntities</description>
                            <explanation>The maximum number of entities to return in an ICAT query. A request for more will throw an error.
                            </explanation>
                            <value>${maxEntities}</value>
                            <default></default>
                            <allowEmptyValue>0</allowEmptyValue>
                            <width>30</width>
                        </stringParameter>
                    </parameterList>
                    <preShowPageActionList>
                        <if>
                            <actionList>
                                <if>
                                    <actionList>
                                        <foreach>
                                            <values>rootUserNames maxEntities</values>
                                            <variables>prop</variables>
                                            <actionList>
                                                <propertiesFileGet>
                                                    <file>${installdir}/icat.server/icat.properties</file>
                                                    <key>${prop}</key>
                                                    <variable>${prop}</variable>
                                                </propertiesFileGet>
                                            </actionList>
                                        </foreach>
                                    </actionList>
                                    <conditionRuleList>
                                        <fileExists>
                                            <path>${installdir}/icat.server/icat.properties</path>
                                        </fileExists>
                                    </conditionRuleList>
                                    <elseActionList>
                                        <setInstallerVariable name="rootUserNames" value=""/>
                                        <setInstallerVariable name="maxEntities" value="10000"/>
                                    </elseActionList>
                                </if>
                                <setInstallerVariable name="icatServerPagesInited" value="1"/>
                            </actionList>
                            <conditionRuleList>
                                <compareValues logic="equals" negate="1" value1="${icatServerPagesInited}" value2="1"/>
                            </conditionRuleList>
                        </if>
                    </preShowPageActionList>
                </parameterGroup>
            </parameterList>
            <postInstallationActionList>
                <runProgram>
                    <program>${mysql_executable}</program>
                    <programArguments>-u root -p${mysql_root_password.password} -N -B -e "grant all on ${icatDB}.* to '${mysql_username}'@'localhost'"
                    </programArguments>
                    <progressText>Configuring icat database</progressText>
                </runProgram>
                <runProgram>
                    <program>${mysql_executable}</program>
                    <programArguments>-u ${mysql_username} -p${mysql_password.password} -N -B -e "create database if not exists ${icatDB}"
                    </programArguments>
                    <progressText>Configuring icat database</progressText>
                    <onErrorActionList>
                        <throwError text="${program_stderr}"/>
                    </onErrorActionList>
                </runProgram>
                <prepare component="icat.server" componentVersion="${icat_server_version}" propertyRoot="icat" url="http://www.icatproject.org/misc/install/icat.server-${icat_server_version}-distro.zip">
                    <setupProperties>driver=com.mysql.jdbc.jdbc2.optional.MysqlDataSource
                        dbProperties=user=${mysql_username}:password=${mysql_password}:databaseName=${icatDB}
                    </setupProperties>
                </prepare>
                <propertiesFileSet>
                    <file>${installdir}/icat.server/icat.properties</file>
                    <key>rootUserNames</key>
                    <value>${rootUserNames}</value>
                </propertiesFileSet>
                <propertiesFileSet>
                    <file>${installdir}/icat.server/icat.properties</file>
                    <key>maxEntities</key>
                    <value>${maxEntities}</value>
                </propertiesFileSet>
                <setInstallerVariable name="authn_list" value=""/>
                <foreach>
                    <values>db ldap anon simple</values>
                    <variables>authn</variables>
                    <actionList>
                        <continue>
                            <ruleList>
                                <isFalse>
                                    <value>${component(authn).component(authn_${authn}).selected}</value>
                                </isFalse>
                            </ruleList>
                        </continue>
                        <setInstallerVariable name="authn_list" value="${authn_list} ${authn}"/>
                        <stringModify logic="toupper" text="${authn}" variable="authn_upper"/>
                        <propertiesFileSet>
                            <file>${installdir}/icat.server/icat.properties</file>
                            <key>authn.${authn}.jndi</key>
                            <value>java:global/authn_${authn}-${authn_${authn}_version}/${authn_upper}_Authenticator</value>
                        </propertiesFileSet>
                    </actionList>
                </foreach>
                <propertiesFileSet>
                    <file>${installdir}/icat.server/icat.properties</file>
                    <key>authn.list</key>
                    <value>${authn_list}</value>
                </propertiesFileSet>
                <changePermissions>
                    <files>${installdir}/icat.properties/*.properties</files>
                    <permissions>0600</permissions>
                </changePermissions>
                <createDirectory path="${user_home_directory}/bin"/>
                <runProgram workingDirectory="${installdir}/icat.server">
                    <program>${python_executable}</program>
                    <programArguments>setup -v install --binDir=${user_home_directory.dos}/bin</programArguments>
                    <progressText>Deploying ICAT Server</progressText>
                    <onErrorActionList>
                        <showWarning text="Will abort: ${program_stdout}${program_stderr}"/>
                        <exit exitCode="1"/>
                    </onErrorActionList>
                </runProgram>
                <wait ms="10000" progressText="wait for 10 seconds"/>
            </postInstallationActionList>
            <preInstallationActionList>
                <runProgram>
                    <abortOnError>0</abortOnError>
                    <program>${installdir}/glassfish4/glassfish/bin/asadmin</program>
                    <programArguments>undeploy topcat-${topcat_version}</programArguments>
                    <progressText>Undeploy TopCAT</progressText>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
                <runProgram>
                    <abortOnError>0</abortOnError>
                    <program>${installdir}/glassfish4/glassfish/bin/asadmin</program>
                    <programArguments>undeploy ids.server-${ids_server_version}</programArguments>
                    <progressText>Undeploy IDS server</progressText>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
                <runProgram>
                    <abortOnError>0</abortOnError>
                    <program>${installdir}/glassfish4/glassfish/bin/asadmin</program>
                    <programArguments>undeploy icat.server-${icat_server_version}</programArguments>
                    <progressText>Undeploy ICAT server</progressText>
                    <showMessageOnError>0</showMessageOnError>
                </runProgram>
            </preInstallationActionList>
        </component>
        <component>
            <name>icat_contents</name>
            <description>ICAT Demo Contents</description>
            <canBeEdited>1</canBeEdited>
            <selected>1</selected>
            <show>1</show>
            <folderList>
                <folder>
                    <description></description>
                    <destination>${installdir}/icat.contents</destination>
                    <name>icat_contents</name>
                    <platforms>all</platforms>
                    <distributionFileList>
                        <distributionFile allowWildcards="1">
                            <origin>icat.contents/*</origin>
                        </distributionFile>
                    </distributionFileList>
                    <ruleList>
                        <fileExists>
                            <negate>1</negate>
                            <path>${installdir}/icat.contents</path>
                        </fileExists>
                    </ruleList>
                </folder>
            </folderList>
            <parameterList>
                <parameterGroup>
                    <name>ICATContentsConfiguration</name>
                    <title>ICAT Contents Configuration</title>
                    <explanation></explanation>
                    <value></value>
                    <default></default>
                    <parameterList>
                        <stringParameter name="root_credentials">
                            <description>Root credentials</description>
                            <explanation>Root credentials are specified by a space separated icat plugin name and credentials for a user included in
                                the icat root user list.
                            </explanation>
                            <value></value>
                            <default></default>
                            <allowEmptyValue>0</allowEmptyValue>
                            <width>30</width>
                        </stringParameter>
                    </parameterList>
                </parameterGroup>
            </parameterList>
            <postInstallationActionList>
                <setInstallerVariableFromScriptOutput exec="${mysql_executable}" name="seq">
                    <execArgs>-u ${mysql_username} -p${mysql_password.password} ${icatDB} -N -B -e "select SEQ_COUNT from SEQUENCE"</execArgs>
                </setInstallerVariableFromScriptOutput>
                <if>
                    <progressText>Set up contents</progressText>
                    <actionList>
                        <showQuestion default="no">
                            <text>The database has already been used. Do you want to attempt to install demo data anyway?</text>
                            <variable>overwrite</variable>
                        </showQuestion>
                        <setInstallerVariable name="seq" value="0">
                            <ruleList>
                                <compareText logic="equals" text="${overwrite}" value="yes"/>
                            </ruleList>
                        </setInstallerVariable>
                    </actionList>
                    <conditionRuleList>
                        <compareText logic="equals" negate="1" text="${seq}" value="0"/>
                    </conditionRuleList>
                </if>
                <runProgram workingDirectory="${installdir}/icat.contents">
                    <program>${python_executable}</program>
                    <programArguments>addContents https://${machine_fqdn}:8181 icat.port ${root_credentials}</programArguments>
                    <progressText>Populating ICAT Server</progressText>
                    <ruleList>
                        <compareText logic="equals" text="${seq}" value="0"/>
                    </ruleList>
                </runProgram>
            </postInstallationActionList>
        </component>
        <component>
            <name>ids_storage_file</name>
            <description>IDS storage_file plugin</description>
            <canBeEdited>0</canBeEdited>
            <selected>0</selected>
            <show>0</show>
            <parameterList>
                <parameterGroup>
                    <name>StorageFileConfiguration</name>
                    <title>IDS StorageFile Plugin Configuration</title>
                    <explanation>The storage_file plugin for the IDS server can use two storage areas where the main one acts as a cache for the
                        archive.
                    </explanation>
                    <value></value>
                    <default></default>
                    <parameterList>
                        <directoryParameter name="mainDir" description="directory for IDS main storage" explanation="" value="${mainDir}" default="" allowEmptyValue="0" width="60">
                            <mustBeWritable>1</mustBeWritable>
                            <mustExist>0</mustExist>
                        </directoryParameter>
                        <directoryParameter name="archiveDir" description="directory for IDS archive storage" explanation="" value="${archiveDir}" default="" allowEmptyValue="0" width="60">
                            <mustBeWritable>1</mustBeWritable>
                            <mustExist>0</mustExist>
                        </directoryParameter>
                    </parameterList>
                    <preShowPageActionList>
                        <if>
                            <actionList>
                                <if>
                                    <actionList>
                                        <propertiesFileGet file="${installdir}/ids.storage_file/ids.storage_file.main.properties" key="dir" variable="mainDir"/>
                                        <propertiesFileGet file="${installdir}/ids.storage_file/ids.storage_file.archive.properties" key="dir" variable="archiveDir"/>
                                    </actionList>
                                    <conditionRuleList>
                                        <fileExists path="${installdir}/ids.storage_file/ids.storage_file.main.properties"/>
                                        <fileExists path="${installdir}/ids.storage_file/ids.storage_file.archive.properties"/>
                                    </conditionRuleList>
                                    <elseActionList>
                                        <setInstallerVariable name="mainDir" value="${user_home_directory}/ids/main"/>
                                        <setInstallerVariable name="archiveDir" value="${user_home_directory}/ids/archive"/>
                                    </elseActionList>
                                </if>
                                <setInstallerVariable name="idsStorageFilePagesInited" value="1"/>
                            </actionList>
                            <conditionRuleList>
                                <compareValues logic="equals" negate="1" value1="${idsStorageFilePagesInited}" value2="1"/>
                            </conditionRuleList>
                        </if>
                    </preShowPageActionList>
                </parameterGroup>
            </parameterList>
            <postInstallationActionList>
                <if>
                    <conditionRuleEvaluationLogic>or</conditionRuleEvaluationLogic>
                    <actionList>
                        <setInstallerVariable name="url" value="http://www.icatproject.org/mvn/repo/org/icatproject/ids.storage_file/${ids_storage_file_version}/ids.storage_file-${ids_storage_file_version}-distro.zip"/>
                        <generateRandomValue length="5" variable="tname"/>
                        <logMessage text="Fetching distro ${url}"/>
                        <httpGet filename="${system_temp_directory}/${tname}" progressText="Fetching distro for ids.storage_file" url="${url}"/>
                        <unzip destinationDirectory="${installdir}" zipFile="${system_temp_directory}/${tname}"/>
                        <writeFile path="${installdir}/ids.storage_file/ids.storage_file-setup.properties">
                            <text>glassfish=${installdir.dos}/glassfish4
                                port=4848
                            </text>
                        </writeFile>
                        <copyFile>
                            <destination>${installdir}/ids.storage_file/ids.storage_file.main.properties</destination>
                            <origin>${installdir}/ids.storage_file/ids.storage_file.main.properties.example</origin>
                            <ruleList>
                                <fileExists negate="1" path="${installdir}/ids.storage_file/ids.storage_file.main.properties"/>
                            </ruleList>
                        </copyFile>
                        <copyFile>
                            <destination>${installdir}/ids.storage_file/ids.storage_file.archive.properties</destination>
                            <origin>${installdir}/ids.storage_file/ids.storage_file.archive.properties.example</origin>
                            <ruleList>
                                <fileExists negate="1" path="${installdir}/ids.storage_file/ids.storage_file.archive.properties"/>
                            </ruleList>
                        </copyFile>
                    </actionList>
                    <conditionRuleList>
                        <fileExists negate="1" path="${installdir}/ids.storage_file/ids.storage_file.main.properties"/>
                        <fileExists negate="1" path="${installdir}/ids.storage_file/ids.storage_file.archive.properties"/>
                        <fileExists negate="1" path="${installdir}/ids.storage_file/ids.storage_file.main.properties.example"/>
                        <fileExists negate="1" path="${installdir}/ids.storage_file/ids.storage_file.archive.properties.example"/>
                    </conditionRuleList>
                </if>
                <propertiesFileSet file="${installdir}/ids.storage_file/ids.storage_file.main.properties" key="dir" value="${mainDir}"/>
                <propertiesFileSet file="${installdir}/ids.storage_file/ids.storage_file.archive.properties" key="dir" value="${archiveDir}"/>
                <createDirectory path="${mainDir}"/>
                <createDirectory path="${archiveDir}"/>
                <copyFile destination="${installdir}/glassfish4/glassfish/domains/domain1/config" origin="${installdir}/ids.storage_file/ids.storage_file.main.properties"/>
                <copyFile destination="${installdir}/glassfish4/glassfish/domains/domain1/config" origin="${installdir}/ids.storage_file/ids.storage_file.archive.properties"/>
                <deleteFile path="${installdir}/glassfish4/glassfish/domains/domain1/lib/applibs/ids.storage_file*.jar"/>
                <copyFile destination="${installdir}/glassfish4/glassfish/domains/domain1/lib/applibs/" origin="${installdir}/ids.storage_file/ids.storage_file*.jar"/>
                <asadmin cmd="stop-domain domain1" msg="Restart domain after deploying IDS StorageFile Plugin"/>
                <asadmin cmd="start-domain domain1" msg="Restart domain after deploying IDS StorageFile Plugin"/>
            </postInstallationActionList>
        </component>
        <component>
            <name>ids_server</name>
            <description>The IDS</description>
            <canBeEdited>1</canBeEdited>
            <detailedDescription>This is the ids.server to upload and download data files which will be installed using the "storage file" plugin.
            </detailedDescription>
            <selected>1</selected>
            <show>1</show>
            <componentSelectionValidationActionList>
                <componentSelection deselect="" select="ids_storage_file"/>
            </componentSelectionValidationActionList>
            <parameterList>
                <parameterGroup>
                    <name>IDSServerConfiguration</name>
                    <title>IDS Server Configuration</title>
                    <explanation></explanation>
                    <value></value>
                    <default></default>
                    <parameterList>
                        <stringParameter name="ids_reader">
                            <description>reader</description>
                            <explanation>A reader is specified by a space separated icat plugin name and credentials for a user permitted
                                to read all
                                datasets, datafiles, investigations and facilities. For example: db username root password secret.
                            </explanation>
                            <value>${idsReader}</value>
                            <default></default>
                            <allowEmptyValue>0</allowEmptyValue>
                            <width>30</width>
                        </stringParameter>
                        <stringParameter name="ids_rootUserNames">
                            <description>rootUserNames</description>
                            <explanation>A space separated list of user names allowed to make the getServiceStatus call. For example simple/root
                                where
                                the prefix must correspond to an installed authenticator.
                            </explanation>
                            <value>${ids_rootUserNames}</value>
                            <default></default>
                            <allowEmptyValue>0</allowEmptyValue>
                            <width>30</width>
                        </stringParameter>
                        <stringParameter name="ids_cache_dir">
                            <description>cache.dir</description>
                            <explanation>The location (absolute or relative to the config directory of the domain) of a directory to hold mostly zip
                                files.
                            </explanation>
                            <value></value>
                            <default></default>
                            <allowEmptyValue>0</allowEmptyValue>
                            <width>60</width>
                        </stringParameter>
                        <stringParameter name="ids_filesCheck_parallelCount">
                            <description>filesCheck.parallelCount</description>
                            <explanation>If non zero then the readability of the data will be checked in batches of this size.</explanation>
                            <value>${ids_filesCheck_parallelCount}</value>
                            <default></default>
                            <allowEmptyValue>0</allowEmptyValue>
                            <width>10</width>
                        </stringParameter>
                        <stringParameter name="ids_filesCheck_gapSeconds">
                            <description>filesCheck.gapSeconds</description>
                            <explanation>The number of seconds to wait before launching a check of the next batch of datafiles or datasets.
                            </explanation>
                            <value>${ids_filesCheck_gapSeconds}</value>
                            <default></default>
                            <allowEmptyValue>0</allowEmptyValue>
                            <width>10</width>
                        </stringParameter>
                    </parameterList>
                    <preShowPageActionList>
                        <if>
                            <actionList>
                                <if>
                                    <actionList>
                                        <propertiesFileGet file="${installdir}/ids.server/ids.properties" key="reader" variable="ids_reader"/>
                                        <propertiesFileGet file="${installdir}/ids.server/ids.properties" key="rootUserNames" variable="ids_rootUserNames"/>
                                        <propertiesFileGet file="${installdir}/ids.server/ids.properties" key="cache.dir" variable="ids_cache_dir"/>
                                        <propertiesFileGet file="${installdir}/ids.server/ids.properties" key="filesCheck.parallelCount" variable="ids_filesCheck_parallelCount"/>
                                        <propertiesFileGet file="${installdir}/ids.server/ids.properties" key="filesCheck.gapSeconds" variable="ids_filesCheck_gapSeconds"/>
                                        <propertiesFileGet file="${installdir}/ids.server/ids.properties" key="filesCheck.lastIdFile" variable="ids_filesCheck_lastIdFile"/>
                                        <propertiesFileGet file="${installdir}/ids.server/ids.properties" key="filesCheck.errorLog" variable="ids_filesCheck_errorLog"/>
                                    </actionList>
                                    <conditionRuleList>
                                        <fileExists path="${installdir}/ids.server/ids.properties"/>
                                    </conditionRuleList>
                                    <elseActionList>
                                        <setInstallerVariable name="ids_reader" value=""/>
                                        <setInstallerVariable name="ids_rootUserNames" value=""/>
                                        <setInstallerVariable name="ids_cache_dir" value="../data/ids/cache"/>
                                        <setInstallerVariable name="ids_filesCheck_parallelCount" value="5"/>
                                        <setInstallerVariable name="ids_filesCheck_gapSeconds" value="5"/>
                                        <setInstallerVariable name="ids_filesCheck_lastIdFile" value="../data/ids/lastIdFile"/>
                                        <setInstallerVariable name="ids_filesCheck_errorLog" value="../data/ids/errorLog"/>
                                    </elseActionList>
                                </if>
                                <setInstallerVariable name="idsServerPagesInited" value="1"/>
                            </actionList>
                            <conditionRuleList>
                                <compareValues logic="equals" negate="1" value1="${idsServerPagesInited}" value2="1"/>
                            </conditionRuleList>
                        </if>
                    </preShowPageActionList>
                </parameterGroup>
            </parameterList>
            <postInstallationActionList>
                <prepare component="ids.server" componentVersion="${ids_server_version}" propertyRoot="ids" setupProperties="libraries=ids.storage_file*.jar" url=""/>
                <propertiesFileSet file="${installdir}/ids.server/ids.properties" key="reader" value="${ids_reader}"/>
                <propertiesFileSet file="${installdir}/ids.server/ids.properties" key="rootUserNames" value="${ids_rootUserNames}"/>
                <propertiesFileSet file="${installdir}/ids.server/ids.properties" key="cache.dir" value="${ids_cache_dir}"/>
                <propertiesFileSet file="${installdir}/ids.server/ids.properties" key="filesCheck.parallelCount" value="${ids_filesCheck_parallelCount}"/>
                <propertiesFileSet file="${installdir}/ids.server/ids.properties" key="filesCheck.gapSeconds" value="${ids_filesCheck_gapSeconds}"/>
                <propertiesFileSet file="${installdir}/ids.server/ids.properties" key="filesCheck.lastIdFile" value="${ids_filesCheck_lastIdFile}"/>
                <propertiesFileSet file="${installdir}/ids.server/ids.properties" key="filesCheck.errorLog" value="${ids_filesCheck_errorLog}"/>
                <propertiesFileSet file="${installdir}/ids.server/ids.properties" key="icat.url" value="https://${machine_fqdn}:8181"/>
                <setInstallerVariableFromScriptOutput exec="${python_executable}" name="dir">
                    <execArgs>-c 'import os.path; print os.path.normpath(os.path.join("${installdir}/glassfish4/glassfish/domains/domain1/config/",
                        "${ids_cache_dir}".strip()))'
                    </execArgs>
                </setInstallerVariableFromScriptOutput>
                <createDirectory path="${dir}"/>
                <setInstallerVariableFromScriptOutput exec="${python_executable}" name="dir">
                    <execArgs>-c 'import os.path; print os.path.normpath(os.path.join("${installdir}/glassfish4/glassfish/domains/domain1/config/",
                        os.path.dirname("${ids_filesCheck_lastIdFile}".strip())))'
                    </execArgs>
                </setInstallerVariableFromScriptOutput>
                <createDirectory path="${dir}"/>
                <setInstallerVariableFromScriptOutput exec="${python_executable}" name="dir">
                    <execArgs>-c 'import os.path; print os.path.normpath(os.path.join("${installdir}/glassfish4/glassfish/domains/domain1/config/",
                        os.path.dirname("${ids_filesCheck_errorLog}".strip())))'
                    </execArgs>
                </setInstallerVariableFromScriptOutput>
                <createDirectory path="${dir}"/>
                <setup component="ids.server" msg="Deploying IDS Server"/>
            </postInstallationActionList>
        </component>
        <component>
            <name>topcat</name>
            <description>TopCAT</description>
            <canBeEdited>1</canBeEdited>
            <detailedDescription>To browse, download from and upload to multiple ICAT servers.</detailedDescription>
            <selected>1</selected>
            <show>1</show>
            <componentSelectionValidationActionList>
                <throwError text="TopCAT cannot be installed without the IDS.">
                    <ruleList>
                        <isFalse value="${component(ids_server).selected}"/>
                    </ruleList>
                </throwError>
            </componentSelectionValidationActionList>
            <parameterList>
                <parameterGroup value="" default="">
                    <name>TopCATConfiguration</name>
                    <title>TopCAT Configuration</title>
                    <explanation></explanation>
                    <parameterList>
                        <stringParameter name="topcatDB" value="topcat" default="topcat">
                            <description>Name of MySQL Database to use for TopCAT</description>
                            <explanation>The database will be created for you. If you use an existing database an attempt will be made to add the
                                required tables to it.
                            </explanation>
                            <allowEmptyValue>0</allowEmptyValue>
                            <width>30</width>
                        </stringParameter>
                        <passwordParameter>
                            <name>topcat_adminPassword</name>
                            <description>Password</description>
                            <explanation>Password for the TopCAT admin interface. The username will be admin. The password must contain at least
                                one lower case letter, one upper case letter and a digit and be at least six characters long as this 
                                provides access via a web browser and so should be more secure.
                            </explanation>
                            <value></value>
                            <default></default>
                            <allowEmptyValue>0</allowEmptyValue>
                            <descriptionRetype>Retype password</descriptionRetype>
                            <width>30</width>
                            <validationActionList>
                                <throwError text="The password must contain at least one lower case letter, one upper case letter and a digit and be at least six characters long.">
                                    <ruleList>
                                        <regExMatch>
                                            <logic>does_not_match</logic>
                                            <pattern>^(?=(?:\D*\d))(?=(?:[^a-z]*[a-z]))(?=(?:[^A-Z]*[A-Z])).{6,}$</pattern>
                                            <text>${topcat_adminPassword}</text>
                                        </regExMatch>
                                    </ruleList>
                                </throwError>
                            </validationActionList>
                        </passwordParameter>
                    </parameterList>
                    <ruleList>
                        <fileExists negate="1" path="${installdir}/topcat/topcat-setup.properties"/>
                    </ruleList>
                </parameterGroup>
            </parameterList>
            <postInstallationActionList>
                <runProgram>
                    <program>${mysql_executable}</program>
                    <programArguments>-u root -p${mysql_root_password.password} -N -B -e "grant all on ${topcatDB}.* to
                        '${mysql_username}'@'localhost'"
                    </programArguments>
                    <progressText>Configuring TopCAT database</progressText>
                </runProgram>
                <runProgram>
                    <program>${mysql_executable}</program>
                    <programArguments>-u ${mysql_username} -p${mysql_password.password} -N -B -e "create database if not exists ${topcatDB}"
                    </programArguments>
                    <progressText>Configuring TopCAT database</progressText>
                    <onErrorActionList>
                        <throwError>
                            <text>${program_stderr}</text>
                        </throwError>
                    </onErrorActionList>
                </runProgram>
                <prepare component="topcat" componentVersion="${topcat_version}" propertyRoot="topcat" url="http://www.icatproject.org/mvn/repo/org/icatproject/TopCAT/${topcat_version}/TopCAT-${topcat_version}-distro.zip">
                    <setupProperties>driver=com.mysql.jdbc.jdbc2.optional.MysqlDataSource
                        dbProperties=user=${mysql_username}:password=${mysql_password}:databaseName=${topcatDB}
                        topcatUrlRoot=
                        topcatAdminUrlRoot=
                        adminUsername=admin
                        adminPassword=${topcat_adminPassword}
                    </setupProperties>
                </prepare>
                <setup component="topcat" msg="Deploying TopCAT"/>
                <setInstallerVariableFromScriptOutput exec="${mysql_executable}" name="new">
                    <execArgs>-u ${mysql_username} -p${mysql_password.password} ${topcatDB} -N -B -e "select SEQ_COUNT from SEQUENCE"</execArgs>
                </setInstallerVariableFromScriptOutput>
                <if>
                    <actionList>
                        <runProgram program="${mysql_executable}">
                            <programArguments>-u ${mysql_username} -p${mysql_password.password} ${topcatDB} -N -B -e "insert into
                                TOPCAT_ICAT_SERVER(ID, DOWNLOAD_PLUGIN_NAME, DOWNLOAD_SERVICE_URL, DOWNLOAD_TYPE, NAME, SERVER_URL, VERSION,
                                ALLOW_UPLOAD, ALLOW_CREATE_DATASET) values (1, 'ids', 'https://${machine_fqdn}:8181', 'archived',
                                '${machine_hostname}', 'https://${machine_fqdn}:8181/ICATService/ICAT?wsdl', 'v43', 1,1)"
                            </programArguments>
                        </runProgram>
                        <setInstallerVariable name="n" value="0"/>
                        <foreach>
                            <values>db ldap anon simple</values>
                            <variables>authn</variables>
                            <actionList>
                                <continue>
                                    <ruleList>
                                        <isFalse>
                                            <value>${component(authn).component(authn_${authn}).selected}</value>
                                        </isFalse>
                                    </ruleList>
                                </continue>
                                <mathExpression text="${n} + 1" variable="n"/>
                                <if>
                                    <actionList>
                                        <setInstallerVariable name="plugin" value="uk.ac.stfc.topcat.gwt.client.authentication.DefaultAuthenticationPlugin"/>
                                    </actionList>
                                    <conditionRuleList>
                                        <compareText logic="equals" negate="1" text="${authn}" value="anon"/>
                                    </conditionRuleList>
                                    <elseActionList>
                                        <setInstallerVariable name="plugin" value="uk.ac.stfc.topcat.gwt.client.authentication.AnonymousAuthenticationPlugin"/>
                                    </elseActionList>
                                </if>
                                <runProgram program="${mysql_executable}">
                                    <programArguments>-u ${mysql_username} -p${mysql_password.password} ${topcatDB} -N -B -e "insert into
                                        TOPCAT_ICAT_AUTHENTICATION(ID, AUTHENTICATION_TYPE, DISPLAY_NAME, PLUGIN_NAME, SERVER_ID) values (${n},
                                        '${authn}', '${authn}', '${plugin}', 1)"
                                    </programArguments>
                                </runProgram>
                            </actionList>
                        </foreach>
                        <runProgram program="${mysql_executable}">
                            <programArguments>-u ${mysql_username} -p${mysql_password.password} ${topcatDB} -N -B -e "update SEQUENCE set SEQ_COUNT =
                                ${n}"
                            </programArguments>
                        </runProgram>
                    </actionList>
                    <conditionRuleList>
                        <compareValues logic="equals" value1="${new}" value2="0"/>
                    </conditionRuleList>
                    <elseActionList>
                        <showWarning text="The TopCAT database has already been setup so will not be modified."/>
                    </elseActionList>
                </if>
            </postInstallationActionList>
        </component>
    </componentList>
    <initializationActionList>
        <setInstallerVariable name="authn_anon_version" value="1.0.2"/>
        <setInstallerVariable name="authn_db_version" value="1.1.2"/>
        <setInstallerVariable name="authn_ldap_version" value="1.1.0"/>
        <setInstallerVariable name="authn_simple_version" value="1.0.1"/>
        <setInstallerVariable name="icat_server_version" value="4.4.0"/>
        <setInstallerVariable name="ids_server_version" value="1.3.1"/>
        <setInstallerVariable name="ids_storage_file_version" value="1.3.2"/>
        <setInstallerVariable name="topcat_version" value="1.12.0"/>
        <locate>
            <command>python</command>
            <variable>python_executable</variable>
        </locate>
        <throwError text="No Python installation was found. Please install Python 2.4 to 2.x and try again.">
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${python_executable}</text>
                    <value></value>
                </compareText>
            </ruleList>
        </throwError>
        <runProgram>
            <program>${python_executable}</program>
            <programArguments>-V</programArguments>
        </runProgram>
        <throwError>
            <text>Python version must be between 2.4 and 2.x</text>
            <ruleList>
                <regExMatch>
                    <logic>matches</logic>
                    <negate>1</negate>
                    <pattern>^Python 2\.[4-9]\.</pattern>
                    <text>${program_stderr}</text>
                </regExMatch>
            </ruleList>
        </throwError>
        <locate>
            <command>mysql</command>
            <variable>mysql_executable</variable>
        </locate>
        <setInstallerVariableFromScriptOutput>
            <exec>cmd</exec>
            <execArgs>/c dir "c:\program files\mysql\mysql.exe" /s /b</execArgs>
            <name>mysql_executable</name>
            <ruleList>
                <platformTest>
                    <type>windows</type>
                </platformTest>
                <compareText>
                    <logic>equals</logic>
                    <text>${mysql_executable}</text>
                    <value></value>
                </compareText>
            </ruleList>
        </setInstallerVariableFromScriptOutput>
        <throwError>
            <text>Unable to find mysql command</text>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${mysql_executable}</text>
                    <value></value>
                </compareText>
            </ruleList>
        </throwError>
    </initializationActionList>
    <postUninstallationActionList>
        <foreach values="authn_anon authn_ldap authn_db authn_simple icat.server icat.contents ids.storage_file ids.server topcat" variables="comp">
            <actionList>
                <deleteFile excludeFiles="*.properties" path="${installdir}/${comp}/*"/>
                <deleteFile path="${installdir}/${comp}/*-setup.properties"/>
            </actionList>
        </foreach>
    </postUninstallationActionList>
    <allowComponentSelection>1</allowComponentSelection>
    <enableRollback>0</enableRollback>
    <enableTimestamp>1</enableTimestamp>
    <height>700</height>
    <installationLogFile>${installdir}/${project.shortName}-installation.log</installationLogFile>
    <saveRelativePaths>1</saveRelativePaths>
    <uninstallationLogFile>${installdir}/${project.shortName}-uninstallation.log</uninstallationLogFile>
    <vendor>ICAT Collaboration</vendor>
    <width>1000</width>
    <parameterList>
        <directoryParameter>
            <name>installdir</name>
            <description>Installer.Parameter.installdir.description</description>
            <explanation>Installer.Parameter.installdir.explanation</explanation>
            <value></value>
            <default>${platform_install_prefix}/${product_shortname}-${product_version}</default>
            <allowEmptyValue>0</allowEmptyValue>
            <ask>yes</ask>
            <cliOptionName>prefix</cliOptionName>
            <mustBeWritable>yes</mustBeWritable>
            <mustExist>0</mustExist>
            <width>30</width>
        </directoryParameter>
        <parameterGroup>
            <name>passwords</name>
            <title>Passwords</title>
            <explanation></explanation>
            <value></value>
            <default></default>
            <parameterList>
                <passwordParameter>
                    <name>mysql_root_password</name>
                    <description>Password</description>
                    <explanation>MySQL root password. This password is required to configure the required databases.</explanation>
                    <value></value>
                    <default></default>
                    <allowEmptyValue>0</allowEmptyValue>
                    <askForConfirmation>0</askForConfirmation>
                    <descriptionRetype></descriptionRetype>
                    <width>20</width>
                </passwordParameter>
                <stringParameter>
                    <name>mysql_username</name>
                    <description>Username</description>
                    <explanation>MySQL user who will own the ICAT databases - MySQL account will be created if necessary</explanation>
                    <value>icat</value>
                    <default>icat</default>
                    <allowEmptyValue>0</allowEmptyValue>
                    <width>20</width>
                </stringParameter>
                <passwordParameter>
                    <name>mysql_password</name>
                    <description>Password</description>
                    <explanation>Password of MySQL user who will own the ICAT databases - it will be updated if necessary.</explanation>
                    <value></value>
                    <default></default>
                    <allowEmptyValue>0</allowEmptyValue>
                    <descriptionRetype>Retype password</descriptionRetype>
                    <width>20</width>
                </passwordParameter>
            </parameterList>
        </parameterGroup>
    </parameterList>
    <preShowHelpActionList>
        <setInstallerVariable name="n" value="0"/>
        <while>
            <actionList>
                <setInstallerVariable name="user${n}" value=""/>
                <setInstallerVariable name="password${n}" value=""/>
                <mathExpression text="${n} + 1" variable="n"/>
            </actionList>
            <conditionRuleList>
                <compareValues logic="less" value1="${n}" value2="5"/>
            </conditionRuleList>
        </while>
    </preShowHelpActionList>
</project>

