<project>
    <shortName>icat</shortName>
    <fullName>ICAT</fullName>
    <version>1.0</version>
    <readmeFile>README.txt</readmeFile>
    <licenseFile>LICENSE.txt</licenseFile>
    <leftImage>logo.gif</leftImage>
    <logoImage>small.gif</logoImage>
    <splashImage>logo.gif</splashImage>
    <functionDefinitionList>
        <actionDefinition name="asadmin">
            <actionList>
                <setInstallerVariable name="msg" value="${cmd}">
                    <ruleList>
                        <compareText logic="equals" text="${msg} " value=""/>
                    </ruleList>
                </setInstallerVariable>
                <runProgram>
                    <program>${installdir}/glassfish4/glassfish/bin/asadmin</program>
                    <programArguments>${cmd}</programArguments>
                    <progressText>${msg}</progressText>
                    <onErrorActionList>
                        <throwError text="asadmin ${cmd} failed with: ${program_stderr}${program_stdout}"/>
                    </onErrorActionList>
                </runProgram>
                <setInstallerVariable name="msg" value=""/>
            </actionList>
            <parameterList>
                <stringParameter name="cmd">
                    <description></description>
                    <explanation></explanation>
                    <value></value>
                    <default></default>
                    <allowEmptyValue>0</allowEmptyValue>
                    <width>40</width>
                </stringParameter>
                <stringParameter name="msg">
                    <description></description>
                    <explanation></explanation>
                    <value></value>
                    <default></default>
                    <allowEmptyValue>1</allowEmptyValue>
                    <width>40</width>
                </stringParameter>
            </parameterList>
        </actionDefinition>
    </functionDefinitionList>
    <componentList>
        <component>
            <name>MySQL</name>
            <description>MySQL Server</description>
            <canBeEdited>0</canBeEdited>
            <selected>1</selected>
            <show>0</show>
            <readyToInstallActionList>
                <setInstallerVariableFromScriptOutput>
                    <exec>${mysql_executable}</exec>
                    <execArgs>-u root -p${mysql_root_password} -N -B -e "SELECT COUNT(*) FROM mysql.user WHERE host='localhost' and user ='${mysql_username}'"</execArgs>
                    <name>result</name>
                    <onErrorActionList>
                        <throwError>
                            <text>${program_stderr}</text>
                        </throwError>
                    </onErrorActionList>
                </setInstallerVariableFromScriptOutput>
                <runProgram>
                    <program>${mysql_executable}</program>
                    <programArguments>-u root -p${mysql_root_password} -N -B -e "create user '${mysql_username}'@'localhost' identified by '${mysql_password}'"</programArguments>
                    <ruleList>
                        <compareValues>
                            <logic>equals</logic>
                            <value1>${result}</value1>
                            <value2>0</value2>
                        </compareValues>
                    </ruleList>
                </runProgram>
                <runProgram>
                    <program>${mysql_executable}</program>
                    <programArguments>-u root -p${mysql_root_password} -N -B -e "set password for '${mysql_username}'@'localhost' = PASSWORD('${mysql_password}')"</programArguments>
                </runProgram>
            </readyToInstallActionList>
        </component>
        <component>
            <name>Glassfish</name>
            <description>Glassfish Server</description>
            <canBeEdited>0</canBeEdited>
            <selected>1</selected>
            <show>0</show>
            <folderList>
                <folder>
                    <description>Glassfish</description>
                    <destination>${installdir}/distro/glassfish</destination>
                    <name>glassfish</name>
                    <platforms>all</platforms>
                    <distributionFileList>
                        <distributionFile allowWildcards="1">
                            <origin>glassfish/*</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
            </folderList>
            <initializationActionList>
                <autodetectJava>
                    <promptUser>0</promptUser>
                    <validVersionList>
                        <validVersion>
                            <bitness></bitness>
                            <maxVersion>1.8</maxVersion>
                            <minVersion>1.7</minVersion>
                            <requireJDK>1</requireJDK>
                            <vendor></vendor>
                        </validVersion>
                    </validVersionList>
                </autodetectJava>
                <locate>
                    <command>keytool</command>
                    <variable>keytool_executable</variable>
                </locate>
                <if>
                    <actionList>
                        <dirName path="${java_executable}" variable="jbin"/>
                        <setInstallerVariable name="keytool_executable" value="${jbin}\keytool.exe"/>
                    </actionList>
                    <conditionRuleList>
                        <platformTest type="windows"/>
                        <compareText logic="equals" text="${keytool_executable}" value=""/>
                    </conditionRuleList>
                </if>
                <throwError>
                    <text>Unable to find keytool command</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${keytool_executable}</text>
                            <value></value>
                        </compareText>
                    </ruleList>
                </throwError>
            </initializationActionList>
            <parameterList>
                <passwordParameter>
                    <name>glassfish_password</name>
                    <title>Password for the Glassfish admin account</title>
                    <description></description>
                    <explanation></explanation>
                    <value></value>
                    <default></default>
                    <allowEmptyValue>0</allowEmptyValue>
                    <descriptionRetype></descriptionRetype>
                    <width>20</width>
                    <ruleList>
                        <compareValues>
                            <logic>equals</logic>
                            <value1>${glassfish_installed}</value1>
                            <value2>0</value2>
                        </compareValues>
                    </ruleList>
                </passwordParameter>
            </parameterList>
            <postInstallationActionList>
                <if>
                    <actionList>
                        <unzip>
                            <destinationDirectory>${installdir}</destinationDirectory>
                            <zipFile>${installdir}/distro/glassfish/glassfish-4.0.zip</zipFile>
                        </unzip>
                        <asadmin cmd="delete-domain domain1" msg="delete domain"/>
                        <generateRandomValue length="5" variable="tname"/>
                        <writeFile path="${system_temp_directory}/${tname}" text="AS_ADMIN_PASSWORD=${glassfish_password}"/>
                        <asadmin cmd="-W ${system_temp_directory}/${tname} --user admin create-domain --savelogin domain1" msg="create domain"/>
                        <deleteFile path="${system_temp_directory}/${tname}"/>
                        <asadmin cmd="start-domain" msg=""/>
                        <asadmin cmd="enable-secure-admin" msg=""/>
                        <asadmin cmd="stop-domain" msg=""/>
                        <asadmin cmd="start-domain" msg=""/>
                        <asadmin msg="Set log format">
                            <cmd>set server.http-service.access-log.format="common"</cmd>
                        </asadmin>
                        <asadmin cmd="set server.http-service.access-logging-enabled=true" msg=""/>
                        <asadmin cmd="set server.thread-pools.thread-pool.http-thread-pool.max-thread-pool-size=128" msg=""/>
                        <asadmin cmd="set configs.config.server-config.cdi-service.enable-implicit-cdi=false" msg=""/>
                        <asadmin msg="">
                            <cmd>set server.ejb-container.property.disable-nonportable-jndi-names="true"</cmd>
                        </asadmin>
                        <asadmin cmd="delete-ssl --type http-listener http-listener-2" msg=""/>
                        <asadmin cmd="delete-network-listener http-listener-2" msg=""/>
                        <asadmin cmd="create-network-listener --listenerport 8181 --protocol http-listener-2 http-listener-2" msg=""/>
                        <asadmin cmd="create-ssl --type http-listener --certname s1as --ssl3enabled=false --ssl3tlsciphers +SSL_RSA_WITH_RC4_128_MD5,+SSL_RSA_WITH_RC4_128_SHA http-listener-2" msg=""/>
                        <runProgram>
                            <program>${keytool_executable}</program>
                            <programArguments>-export -keystore	${installdir.dos}/glassfish4/glassfish/domains/domain1/config/keystore.jks -file ${installdir.dos}/glassfish4/glassfish/domains/domain1/config/cert -storepass changeit -alias s1as</programArguments>
                            <progressText>Extracting certificate</progressText>
                        </runProgram>
                        <copyFile>
                            <destination>${installdir}/glassfish4/glassfish/domains/domain1/lib/</destination>
                            <origin>${installdir}/distro/glassfish/mysql-connector-java-5.1.30-bin.jar</origin>
                            <progressText>Installing MySQL Connector</progressText>
                        </copyFile>
                    </actionList>
                    <conditionRuleList>
                        <compareValues>
                            <logic>equals</logic>
                            <value1>${glassfish_installed}</value1>
                            <value2>0</value2>
                        </compareValues>
                    </conditionRuleList>
                </if>
                <asadmin cmd="restart-domain">
                    <msg></msg>
                </asadmin>
            </postInstallationActionList>
            <postUninstallationActionList>
                <deleteFile path="${installdir}/glassfish4/"/>
            </postUninstallationActionList>
            <preInstallationActionList>
                <if>
                    <actionList>
                        <setInstallerVariable>
                            <name>glassfish_installed</name>
                            <value>1</value>
                        </setInstallerVariable>
                    </actionList>
                    <conditionRuleList>
                        <fileExists path="${installdir}/glassfish4/glassfish/domains/domain1/lib/mysql-connector-java-5.1.30-bin.jar"/>
                    </conditionRuleList>
                    <elseActionList>
                        <setInstallerVariable>
                            <name>glassfish_installed</name>
                            <value>0</value>
                        </setInstallerVariable>
                        <getProcessUsingPort>
                            <port>4848</port>
                            <variable>glassfish_management</variable>
                        </getProcessUsingPort>
                        <throwError>
                            <text>Port 4848 is in use by ${glassfish_management}</text>
                            <ruleList>
                                <compareText>
                                    <logic>equals</logic>
                                    <negate>1</negate>
                                    <text>${glassfish_management}</text>
                                    <value></value>
                                </compareText>
                            </ruleList>
                        </throwError>
                        <getProcessUsingPort>
                            <port>8181</port>
                            <variable>glassfish_https</variable>
                        </getProcessUsingPort>
                        <throwError>
                            <text>Port 8181 is in use by ${glassfish_https}</text>
                            <ruleList>
                                <compareText>
                                    <logic>equals</logic>
                                    <negate>1</negate>
                                    <text>${glassfish_https}</text>
                                    <value></value>
                                </compareText>
                            </ruleList>
                        </throwError>
                    </elseActionList>
                </if>
            </preInstallationActionList>
            <preUninstallationActionList>
                <runProgram>
                    <program>${installdir}/glassfish4/glassfish/bin/asadmin</program>
                    <programArguments>stop-domain</programArguments>
                    <progressText>Stopping glassfish</progressText>
                    <onErrorActionList>
                        <throwError text="asadmin stop-domain failed with: ${program_stdout}${program_stderr}"/>
                    </onErrorActionList>
                </runProgram>
            </preUninstallationActionList>
        </component>
        <componentGroup>
            <name>authn</name>
            <description>Authenticators</description>
            <canBeEdited>1</canBeEdited>
            <detailedDescription>You must include at least one authenticator to allow login to ICAT.
			</detailedDescription>
            <selected>1</selected>
            <show>1</show>
            <componentList>
                <component>
                    <name>authn_anon</name>
                    <description>Anonymous Authenticator</description>
                    <canBeEdited>1</canBeEdited>
                    <detailedDescription>The anonymous authenticator accepts anyone.</detailedDescription>
                    <selected>1</selected>
                    <show>1</show>
                    <postInstallationActionList>
                        <if>
                            <conditionRuleEvaluationLogic>or</conditionRuleEvaluationLogic>
                            <actionList>
                                <generateRandomValue>
                                    <length>5</length>
                                    <variable>tname</variable>
                                </generateRandomValue>
                                <httpGet filename="${system_temp_directory}/${tname}" url="http://www.icatproject.org/mvn/repo/org/icatproject/authn_anon/${authn_anon_version}/authn_anon-${authn_anon_version}-distro.zip"/>
                                <unzip>
                                    <destinationDirectory>${installdir}</destinationDirectory>
                                    <zipFile>${system_temp_directory}/${tname}</zipFile>
                                </unzip>
                                <writeFile>
                                    <path>${installdir}/authn_anon/authn_anon-setup.properties</path>
                                    <text>glassfish=${installdir.dos}/glassfish4
										port=4848
									</text>
                                </writeFile>
                                <copyFile>
                                    <destination>${installdir}/authn_anon/authn_anon.properties</destination>
                                    <origin>${installdir}/authn_anon/authn_anon.properties.example</origin>
                                    <ruleList>
                                        <fileExists negate="1" path="${installdir}/authn_anon/authn_anon.properties"/>
                                    </ruleList>
                                </copyFile>
                            </actionList>
                            <conditionRuleList>
                                <fileExists negate="1" path="${installdir}/authn_anon/authn_anon.properties"/>
                                <fileExists negate="1" path="${installdir}/authn_anon/authn_anon.properties.example"/>
                            </conditionRuleList>
                        </if>
                        <changePermissions>
                            <files>${installdir}/authn_anon/*.properties</files>
                            <permissions>0600</permissions>
                        </changePermissions>
                        <runProgram workingDirectory="${installdir}/authn_anon">
                            <program>${python_executable}</program>
                            <programArguments>${installdir.dos}/authn_anon/setup -v install</programArguments>
                            <progressText>Deploying ANON Authenticator</progressText>
                            <onErrorActionList>
                                <throwError text="${program_stdout}${program_stderr}"/>
                            </onErrorActionList>
                        </runProgram>
                    </postInstallationActionList>
                </component>
                <component>
                    <name>authn_simple</name>
                    <description>Simple Authenticator</description>
                    <canBeEdited>1</canBeEdited>
                    <detailedDescription>Users and passwords are listed in a file</detailedDescription>
                    <selected>0</selected>
                    <show>1</show>
                    <parameterList>
                        <parameterGroup>
                            <name>SIMPLEConfiguration</name>
                            <explanation>Simple Authenticator Configuration</explanation>
                            <value></value>
                            <default></default>
                            <parameterList>
                                <parameterGroup>
                                    <name>SIMPLEConfigurationUser0</name>
                                    <explanation>User 0</explanation>
                                    <value></value>
                                    <default></default>
                                    <parameterList>
                                        <stringParameter>
                                            <name>user0</name>
                                            <description>Name</description>
                                            <explanation></explanation>
                                            <value>${user0}</value>
                                            <default></default>
                                            <allowEmptyValue>1</allowEmptyValue>
                                            <width>30</width>
                                        </stringParameter>
                                        <stringParameter>
                                            <name>password0</name>
                                            <description>Password</description>
                                            <explanation></explanation>
                                            <value>${password0}</value>
                                            <default></default>
                                            <allowEmptyValue>1</allowEmptyValue>
                                            <width>20</width>
                                        </stringParameter>
                                    </parameterList>
                                </parameterGroup>
                                <parameterGroup>
                                    <name>SIMPLEConfigurationUser1</name>
                                    <explanation>User 1</explanation>
                                    <value></value>
                                    <default></default>
                                    <parameterList>
                                        <stringParameter>
                                            <name>user1</name>
                                            <description>Name</description>
                                            <explanation></explanation>
                                            <value>${user1}</value>
                                            <default></default>
                                            <allowEmptyValue>1</allowEmptyValue>
                                            <width>30</width>
                                        </stringParameter>
                                        <stringParameter>
                                            <name>password1</name>
                                            <description>Password</description>
                                            <explanation></explanation>
                                            <value>${password1}</value>
                                            <default></default>
                                            <allowEmptyValue>1</allowEmptyValue>
                                            <width>20</width>
                                        </stringParameter>
                                    </parameterList>
                                </parameterGroup>
                                <parameterGroup>
                                    <name>SIMPLEConfigurationUser2</name>
                                    <explanation>User 2</explanation>
                                    <value></value>
                                    <default></default>
                                    <parameterList>
                                        <stringParameter>
                                            <name>user2</name>
                                            <description>Name</description>
                                            <explanation></explanation>
                                            <value>${user2}</value>
                                            <default></default>
                                            <allowEmptyValue>1</allowEmptyValue>
                                            <width>30</width>
                                        </stringParameter>
                                        <stringParameter>
                                            <name>password2</name>
                                            <description>Password</description>
                                            <explanation></explanation>
                                            <value>${password2}</value>
                                            <default></default>
                                            <allowEmptyValue>1</allowEmptyValue>
                                            <width>20</width>
                                        </stringParameter>
                                    </parameterList>
                                </parameterGroup>
                            </parameterList>
                            <preShowPageActionList>
                                <setInstallerVariable name="n" value="0"/>
                                <while>
                                    <actionList>
                                        <setInstallerVariable name="user${n}" value=""/>
                                        <setInstallerVariable name="password${n}" value=""/>
                                        <mathExpression text="${n} + 1" variable="n"/>
                                    </actionList>
                                    <conditionRuleList>
                                        <compareValues>
                                            <logic>less</logic>
                                            <value1>${n}</value1>
                                            <value2>5</value2>
                                        </compareValues>
                                    </conditionRuleList>
                                </while>
                                <if>
                                    <actionList>
                                        <propertiesFileGet>
                                            <file>${installdir}/authn_simple/authn_simple.properties</file>
                                            <key>user.list</key>
                                            <variable>user_list</variable>
                                        </propertiesFileGet>
                                        <setInstallerVariable name="n" value="0"/>
                                        <foreach>
                                            <values>${user_list}</values>
                                            <variables>name</variables>
                                            <actionList>
                                                <setInstallerVariable name="user${n}" value="${name}"/>
                                                <propertiesFileGet>
                                                    <file>${installdir}/authn_simple/authn_simple.properties</file>
                                                    <key>user.${name}.password</key>
                                                    <variable>upw</variable>
                                                </propertiesFileGet>
                                                <setInstallerVariable name="password${n}" value="${upw}"/>
                                                <mathExpression text="${n} + 1" variable="n"/>
                                            </actionList>
                                        </foreach>
                                    </actionList>
                                    <conditionRuleList>
                                        <fileExists>
                                            <path>${installdir}/authn_simple/authn_simple.properties</path>
                                        </fileExists>
                                    </conditionRuleList>
                                </if>
                            </preShowPageActionList>
                        </parameterGroup>
                    </parameterList>
                    <postInstallationActionList>
                        <if>
                            <conditionRuleEvaluationLogic>or</conditionRuleEvaluationLogic>
                            <actionList>
                                <generateRandomValue length="5" variable="tname"/>
                                <httpGet filename="${system_temp_directory}/${tname}" url="http://www.icatproject.org/mvn/repo/org/icatproject/authn_simple/${authn_simple_version}/authn_simple-${authn_simple_version}-distro.zip"/>
                                <unzip>
                                    <destinationDirectory>${installdir}</destinationDirectory>
                                    <zipFile>${system_temp_directory}/${tname}</zipFile>
                                </unzip>
                                <writeFile>
                                    <path>${installdir}/authn_simple/authn_simple-setup.properties</path>
                                    <text>glassfish=${installdir.dos}/glassfish4
										port=4848
									</text>
                                </writeFile>
                                <copyFile destination="${installdir}/authn_simple/authn_simple.properties" origin="${installdir}/authn_simple/authn_simple.properties.example">
                                    <ruleList>
                                        <fileExists negate="1" path="${installdir}/authn_simple/authn_simple.properties"/>
                                    </ruleList>
                                </copyFile>
                            </actionList>
                            <conditionRuleList>
                                <fileExists negate="1" path="${installdir}/authn_simple/authn_simple.properties"/>
                                <fileExists negate="1" path="${installdir}/authn_simple/authn_simple.properties.example"/>
                            </conditionRuleList>
                        </if>
                        <setInstallerVariable name="n" value="0"/>
                        <setInstallerVariable name="user_list" value=""/>
                        <while>
                            <actionList>
                                <if>
                                    <actionList>
                                        <propertiesFileSet>
                                            <file>${installdir}/authn_simple/authn_simple.properties</file>
                                            <key>user.${user${n}}.password</key>
                                            <value>${password${n}}</value>
                                        </propertiesFileSet>
                                        <setInstallerVariable name="user_list" value="${user_list} ${user${n}}"/>
                                    </actionList>
                                    <conditionRuleList>
                                        <compareText logic="equals" negate="1" text="${user{$n}}" value=""/>
                                    </conditionRuleList>
                                </if>
                                <mathExpression text="${n} + 1" variable="n"/>
                            </actionList>
                            <conditionRuleList>
                                <compareValues>
                                    <logic>less</logic>
                                    <value1>${n}</value1>
                                    <value2>5</value2>
                                </compareValues>
                            </conditionRuleList>
                        </while>
                        <propertiesFileSet>
                            <file>${installdir}/authn_simple/authn_simple.properties</file>
                            <key>user.list</key>
                            <value>${user_list}</value>
                        </propertiesFileSet>
                        <changePermissions>
                            <files>${installdir}/authn_simple/*.properties</files>
                            <permissions>0600</permissions>
                        </changePermissions>
                        <runProgram workingDirectory="${installdir}/authn_simple">
                            <program>${python_executable}</program>
                            <programArguments>${installdir.dos}/authn_simple/setup -v install</programArguments>
                            <progressText>Deploying Simple Authenticator</progressText>
                            <onErrorActionList>
                                <throwError>
                                    <text>${program_stdout}${program_stderr}</text>
                                </throwError>
                            </onErrorActionList>
                        </runProgram>
                    </postInstallationActionList>
                </component>
                <component>
                    <name>authn_ldap</name>
                    <description>LDAP Authenticator</description>
                    <canBeEdited>1</canBeEdited>
                    <detailedDescription>An authenticator that makes use of the contents of an LDAP database.</detailedDescription>
                    <selected>0</selected>
                    <show>1</show>
                    <folderList>
                        <folder>
                            <description>authn_ldap</description>
                            <destination>${installdir}/distro/authn_ldap</destination>
                            <name>authn_ldap</name>
                            <platforms>all</platforms>
                            <distributionFileList>
                                <distributionFile allowWildcards="1" origin="authn_ldap/*"/>
                            </distributionFileList>
                        </folder>
                    </folderList>
                    <parameterList>
                        <parameterGroup>
                            <name>LDAPConfiguration</name>
                            <title>LDAP Configuration</title>
                            <explanation>LDAP Configuration</explanation>
                            <value></value>
                            <default></default>
                            <parameterList>
                                <stringParameter>
                                    <name>provider_url</name>
                                    <description>provider_url</description>
                                    <explanation>The url of the ldap server</explanation>
                                    <value>${provide_url}</value>
                                    <default></default>
                                    <allowEmptyValue>0</allowEmptyValue>
                                    <width>30</width>
                                </stringParameter>
                                <stringParameter>
                                    <name>security_principal</name>
                                    <description>security_principal</description>
                                    <explanation>The % character in the security_principal will be replaced by the specified user name.</explanation>
                                    <value>${security_principal}</value>
                                    <default></default>
                                    <allowEmptyValue>0</allowEmptyValue>
                                    <width>30</width>
                                </stringParameter>
                                <choiceParameter>
                                    <name>case</name>
                                    <description>case</description>
                                    <explanation>If not set the case will be left alone</explanation>
                                    <value>${case}</value>
                                    <default></default>
                                    <allowEmptyValue>1</allowEmptyValue>
                                    <displayType>combobox</displayType>
                                    <ordering>default</ordering>
                                    <width>30</width>
                                    <optionList>
                                        <option>
                                            <description>Convert returned name to upper case</description>
                                            <image></image>
                                            <text>upper</text>
                                            <value>upper</value>
                                        </option>
                                        <option>
                                            <description>Convert returned name to lower case</description>
                                            <image></image>
                                            <text>lower</text>
                                            <value>lower</value>
                                        </option>
                                        <option>
                                            <description>Do not modify the case of the returned name</description>
                                            <image></image>
                                            <text></text>
                                            <value></value>
                                        </option>
                                    </optionList>
                                </choiceParameter>
                            </parameterList>
                            <preShowPageActionList>
                                <if>
                                    <actionList>
                                        <foreach>
                                            <values>provider_url security_principal case</values>
                                            <variables>prop</variables>
                                            <actionList>
                                                <propertiesFileGet>
                                                    <file>${installdir}/authn_ldap/authn_ldap.properties</file>
                                                    <key>${prop}</key>
                                                    <variable>${prop}</variable>
                                                </propertiesFileGet>
                                            </actionList>
                                        </foreach>
                                    </actionList>
                                    <conditionRuleList>
                                        <fileExists path="${installdir}/authn_ldap/authn_ldap.properties"/>
                                    </conditionRuleList>
                                    <elseActionList>
                                        <setInstallerVariable name="provider_url" value=""/>
                                        <setInstallerVariable name="security_principal" value=""/>
                                        <setInstallerVariable name="case" value="lower"/>
                                    </elseActionList>
                                </if>
                            </preShowPageActionList>
                        </parameterGroup>
                    </parameterList>
                    <postInstallationActionList>
                        <unzip>
                            <destinationDirectory>${installdir}</destinationDirectory>
                            <zipFile>${installdir}/distro/authn_ldap/authn_ldap-${authn_ldap_version}-distro.zip</zipFile>
                            <ruleList>
                                <fileExists negate="1" path="${installdir}/authn_ldap/authn_ldap.properties"/>
                            </ruleList>
                        </unzip>
                        <writeFile>
                            <path>${installdir}/authn_ldap/authn_ldap-setup.properties</path>
                            <text>glassfish=${installdir.dos}/glassfish4
								port=4848
							</text>
                            <ruleList>
                                <fileExists negate="1" path="${installdir}/authn_ldap/authn_ldap-setup.properties"/>
                            </ruleList>
                        </writeFile>
                        <touchFile path="${installdir}/authn_ldap/configured"/>
                        <copyFile destination="${installdir}/authn_ldap/authn_ldap.properties" origin="${installdir}/authn_ldap/authn_ldap.properties.example">
                            <ruleList>
                                <fileExists negate="1" path="${installdir}/authn_ldap/authn_ldap.properties"/>
                            </ruleList>
                        </copyFile>
                        <propertiesFileSet>
                            <file>${installdir}/authn_ldap/authn_ldap.properties</file>
                            <key>case</key>
                            <value>${case}</value>
                        </propertiesFileSet>
                        <propertiesFileSet>
                            <file>${installdir}/authn_ldap/authn_ldap.properties</file>
                            <key>provider_url</key>
                            <value>${provider_url}</value>
                        </propertiesFileSet>
                        <propertiesFileSet>
                            <file>${installdir}/authn_ldap/authn_ldap.properties</file>
                            <key>security_principal</key>
                            <value>${security_principal}</value>
                        </propertiesFileSet>
                        <changePermissions>
                            <files>${installdir}/authn_ldap/*.properties</files>
                            <permissions>0600</permissions>
                        </changePermissions>
                        <runProgram workingDirectory="${installdir}/authn_ldap">
                            <program>${python_executable}</program>
                            <programArguments>${installdir.dos}/authn_ldap/setup -v install</programArguments>
                            <progressText>Deploying LDAP Authenticator</progressText>
                            <onErrorActionList>
                                <throwError>
                                    <text>${program_stdout}${program_stderr}</text>
                                </throwError>
                            </onErrorActionList>
                        </runProgram>
                    </postInstallationActionList>
                </component>
                <component>
                    <name>authn_db</name>
                    <description>Database Authenticator</description>
                    <canBeEdited>1</canBeEdited>
                    <detailedDescription>An authenticator that makes use of the	contents of a relational database.</detailedDescription>
                    <selected>0</selected>
                    <show>1</show>
                    <folderList>
                        <folder>
                            <description>authn_db</description>
                            <destination>${installdir}/distro/authn_db</destination>
                            <name>authn_db</name>
                            <platforms>all</platforms>
                            <distributionFileList>
                                <distributionFile allowWildcards="1" origin="authn_db/*"/>
                            </distributionFileList>
                        </folder>
                    </folderList>
                    <postInstallationActionList>
                        <runProgram>
                            <program>${mysql_executable}</program>
                            <programArguments>-u root -p${mysql_root_password} -N -B -e	"grant all on authn_db.* to '${mysql_username}'@'localhost'"</programArguments>
                            <progressText>Configuring authn_db database</progressText>
                        </runProgram>
                        <runProgram>
                            <program>${mysql_executable}</program>
                            <programArguments>-u ${mysql_username} -p${mysql_password} -N -B -e "create database if not exists authn_db"</programArguments>
                            <progressText>Configuring authn_db database</progressText>
                            <onErrorActionList>
                                <throwError>
                                    <text>${program_stderr}</text>
                                </throwError>
                            </onErrorActionList>
                        </runProgram>
                        <unzip>
                            <destinationDirectory>${installdir}</destinationDirectory>
                            <zipFile>${installdir}/distro/authn_db/authn_db-${authn_db_version}-distro.zip</zipFile>
                        </unzip>
                        <writeFile>
                            <path>${installdir}/authn_db/authn_db-setup.properties</path>
                            <text>driver=com.mysql.jdbc.jdbc2.optional.MysqlDataSource
								authn_dbProperties=user=${mysql_username}:password=${mysql_password}:databaseName=authn_db
								glassfish=${installdir.dos}/glassfish4
								port=4848
							</text>
                        </writeFile>
                        <touchFile path="${installdir}/authn_db/configured"/>
                        <copyFile destination="${installdir}/authn_db/authn_db.properties" origin="${installdir}/authn_db/authn_db.properties.example">
                            <ruleList>
                                <fileExists negate="1" path="${installdir}/authn_db/authn_db.properties"/>
                            </ruleList>
                        </copyFile>
                        <changePermissions>
                            <files>${installdir}/authn_db/*.properties</files>
                            <permissions>0600</permissions>
                        </changePermissions>
                        <runProgram workingDirectory="${installdir}/authn_db">
                            <program>${python_executable}</program>
                            <programArguments>${installdir.dos}/authn_db/setup -v install</programArguments>
                            <progressText>Deploying Database Authenticator</progressText>
                            <onErrorActionList>
                                <throwError>
                                    <text>${program_stdout}${program_stderr}</text>
                                </throwError>
                            </onErrorActionList>
                        </runProgram>
                    </postInstallationActionList>
                </component>
            </componentList>
        </componentGroup>
        <component>
            <name>icat_server</name>
            <description>The ICAT server</description>
            <canBeEdited>0</canBeEdited>
            <detailedDescription>This is the main ICAT server for the metadata.</detailedDescription>
            <selected>1</selected>
            <show>0</show>
            <componentSelectionValidationActionList>
                <throwError text="You must install at least one authenticator.">
                    <ruleList>
                        <isFalse value="${component(authn).component(authn_anon).selected}"/>
                        <isFalse value="${component(authn).component(authn_ldap).selected}"/>
                        <isFalse value="${component(authn).component(authn_db).selected}"/>
                        <isFalse value="${component(authn).component(authn_simple).selected}"/>
                    </ruleList>
                </throwError>
            </componentSelectionValidationActionList>
            <folderList>
                <folder>
                    <description>ICAT Server</description>
                    <destination>${installdir}/distro/icat.server</destination>
                    <name>icat_server</name>
                    <platforms>all</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <allowWildcards>1</allowWildcards>
                            <origin>icat.server/*</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
            </folderList>
            <parameterList>
                <parameterGroup>
                    <name>ICATConfiguration</name>
                    <title>ICAT Server Configuration Parameters</title>
                    <explanation>ICAT Server Configuration Parameters</explanation>
                    <value></value>
                    <default></default>
                    <parameterList>
                        <stringParameter>
                            <name>rootUserNames</name>
                            <description>rootUserNames</description>
                            <explanation>Users with "root" access to the ICAT server</explanation>
                            <value>${rootUserNames}</value>
                            <default></default>
                            <allowEmptyValue>0</allowEmptyValue>
                            <width>30</width>
                        </stringParameter>
                        <stringParameter>
                            <name>maxEntities</name>
                            <description>maxEntities</description>
                            <explanation>The maximum number of entities to return in an ICAT query. A request for more will throw an error.</explanation>
                            <value>${maxEntities}</value>
                            <default></default>
                            <allowEmptyValue>0</allowEmptyValue>
                            <width>30</width>
                        </stringParameter>
                    </parameterList>
                    <preShowPageActionList>
                        <if>
                            <actionList>
                                <foreach>
                                    <values>rootUserNames maxEntities</values>
                                    <variables>prop</variables>
                                    <actionList>
                                        <propertiesFileGet>
                                            <file>${installdir}/icat.server/icat.properties</file>
                                            <key>${prop}</key>
                                            <variable>${prop}</variable>
                                        </propertiesFileGet>
                                    </actionList>
                                </foreach>
                            </actionList>
                            <conditionRuleList>
                                <fileExists>
                                    <path>${installdir}/icat.server/icat.properties</path>
                                </fileExists>
                            </conditionRuleList>
                            <elseActionList>
                                <setInstallerVariable name="rootUserNames" value=""/>
                                <setInstallerVariable name="maxEntities" value=""/>
                            </elseActionList>
                        </if>
                    </preShowPageActionList>
                </parameterGroup>
            </parameterList>
            <postInstallationActionList>
                <runProgram>
                    <program>${mysql_executable}</program>
                    <programArguments>-u root -p${mysql_root_password} -N -B -e "grant all on icat.* to '${mysql_username}'@'localhost'"</programArguments>
                    <progressText>Configuring icat database</progressText>
                </runProgram>
                <runProgram>
                    <program>${mysql_executable}</program>
                    <programArguments>-u ${mysql_username} -p${mysql_password} -N -B -e "create database if not exists icat"</programArguments>
                    <progressText>Configuring icat database</progressText>
                    <onErrorActionList>
                        <throwError text="${program_stderr}"/>
                    </onErrorActionList>
                </runProgram>
                <unzip>
                    <destinationDirectory>${installdir}</destinationDirectory>
                    <zipFile>${installdir}/distro/icat.server/icat.server-${icat_server_version}-distro.zip</zipFile>
                    <ruleList>
                        <fileExists negate="1" path="${installdir}/icat.server/icat.properties"/>
                        <fileExists negate="1" path="${installdir}/icat.server/icat.properties.example"/>
                    </ruleList>
                </unzip>
                <writeFile progressText="Configuring icat.server properties">
                    <path>${installdir}/icat.server/icat-setup.properties</path>
                    <text>driver=com.mysql.jdbc.jdbc2.optional.MysqlDataSource
						dbProperties=user=${mysql_username}:password=${mysql_password}:databaseName=icat
						glassfish=${installdir.dos}/glassfish4
						port=4848
					</text>
                </writeFile>
                <copyFile destination="${installdir}/icat.server/icat.properties" origin="${installdir}/icat.server/icat.properties.example">
                    <ruleList>
                        <fileExists negate="1" path="${installdir}/icat.server/icat.server.properties"/>
                    </ruleList>
                </copyFile>
                <propertiesFileSet>
                    <file>${installdir}/icat.server/icat.properties</file>
                    <key>rootUserNames</key>
                    <value>${rootUserNames}</value>
                </propertiesFileSet>
                <propertiesFileSet>
                    <file>${installdir}/icat.server/icat.properties</file>
                    <key>maxEntities</key>
                    <value>${maxEntities}</value>
                </propertiesFileSet>
                <setInstallerVariable name="authn_list" value=""/>
                <foreach>
                    <values>db ldap anon simple</values>
                    <variables>authn</variables>
                    <actionList>
                        <continue>
                            <ruleList>
                                <isFalse>
                                    <value>${component(authn).component(authn_${authn}).selected}</value>
                                </isFalse>
                            </ruleList>
                        </continue>
                        <setInstallerVariable name="authn_list" value="${authn_list} ${authn}"/>
                        <stringModify logic="toupper" text="${authn}" variable="authn_upper"/>
                        <propertiesFileSet>
                            <file>${installdir}/icat.server/icat.properties</file>
                            <key>authn.${authn}.jndi</key>
                            <value>java:global/authn_${authn}-${authn_${authn}_version}/${authn_upper}_Authenticator</value>
                        </propertiesFileSet>
                    </actionList>
                </foreach>
                <propertiesFileSet>
                    <file>${installdir}/icat.server/icat.properties</file>
                    <key>authn.list</key>
                    <value>${authn_list}</value>
                </propertiesFileSet>
                <changePermissions>
                    <files>${installdir}/icat.properties/*.properties</files>
                    <permissions>0600</permissions>
                </changePermissions>
                <createDirectory path="${user_home_directory}/bin"/>
                <runProgram workingDirectory="${installdir}/icat.server">
                    <program>${python_executable}</program>
                    <programArguments>${installdir.dos}/icat.server/setup -v install --binDir=${user_home_directory}/bin</programArguments>
                    <progressText>Deploying ICAT Server</progressText>
                    <onErrorActionList>
                        <throwError text="${program_stdout}${program_stderr}"/>
                    </onErrorActionList>
                </runProgram>

                <!-- This restart should not be necessary -->
                <runProgram>
                    <program>${installdir}/glassfish4/glassfish/bin/asadmin</program>
                    <programArguments>disable icat.server-${icat_server_version}</programArguments>
                    <progressText>Disable icat.server</progressText>
                </runProgram>
                <runProgram>
                    <program>${installdir}/glassfish4/glassfish/bin/asadmin</program>
                    <programArguments>enable icat.server-${icat_server_version}</programArguments>
                    <progressText>Enable icat.server</progressText>
                </runProgram>
            </postInstallationActionList>
        </component>
        <component>
            <name>ids_server</name>
            <description>The IDS server</description>
            <canBeEdited>1</canBeEdited>
            <detailedDescription>This is the server to upload and download data files.</detailedDescription>
            <selected>1</selected>
            <show>1</show>
        </component>
        <component>
            <name>topcat</name>
            <description>TopCAT</description>
            <canBeEdited>1</canBeEdited>
            <detailedDescription>This is the server to upload and download data	files.</detailedDescription>
            <selected>1</selected>
            <show>1</show>
            <componentSelectionValidationActionList>
                <throwError text="TopCAT cannot be installed without the IDS.">
                    <ruleList>
                        <isFalse value="${component(ids_server).selected}"/>
                    </ruleList>
                </throwError>
            </componentSelectionValidationActionList>
        </component>
        <component>
            <name>ijp_server</name>
            <description>The IJP server</description>
            <canBeEdited>1</canBeEdited>
            <detailedDescription>This is the server to permit submission of batch and interactive jobs.</detailedDescription>
            <selected>1</selected>
            <show>1</show>
            <componentSelectionValidationActionList>
                <throwError text="IJP cannot be installed without the IDS.">
                    <ruleList>
                        <isFalse value="${component(ids_server).selected}"/>
                    </ruleList>
                </throwError>
            </componentSelectionValidationActionList>
        </component>
    </componentList>
    <initializationActionList>
        <setInstallerVariable name="authn_db_version" value="1.1.1"/>
        <setInstallerVariable name="authn_ldap_version" value="1.1.0"/>
        <setInstallerVariable name="authn_simple_version" value="1.0.1"/>
        <setInstallerVariable name="authn_anon_version" value="1.0.2"/>
        <setInstallerVariable name="icat_server_version" value="4.4.0"/>
        <locate>
            <command>python</command>
            <variable>python_executable</variable>
        </locate>
        <throwError text="No Python installation was found. Please install Python 2.4 to 2.x and try again.">
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${python_executable}</text>
                    <value></value>
                </compareText>
            </ruleList>
        </throwError>
        <runProgram>
            <program>${python_executable}</program>
            <programArguments>-V</programArguments>
        </runProgram>
        <throwError>
            <text>Python version must be between 2.4 and 2.x</text>
            <ruleList>
                <regExMatch>
                    <logic>matches</logic>
                    <negate>1</negate>
                    <pattern>^Python 2\.[4-9]\.</pattern>
                    <text>${program_stderr}</text>
                </regExMatch>
            </ruleList>
        </throwError>
        <locate>
            <command>mysql</command>
            <variable>mysql_executable</variable>
        </locate>
        <setInstallerVariableFromScriptOutput>
            <exec>cmd</exec>
            <execArgs>/c dir "c:\program files\mysql\mysql.exe" /s /b</execArgs>
            <name>mysql_executable</name>
            <ruleList>
                <platformTest>
                    <type>windows</type>
                </platformTest>
                <compareText>
                    <logic>equals</logic>
                    <text>${mysql_executable}</text>
                    <value></value>
                </compareText>
            </ruleList>
        </setInstallerVariableFromScriptOutput>
        <throwError>
            <text>Unable to find mysql command</text>
            <ruleList>
                <compareText>
                    <logic>equals</logic>
                    <text>${mysql_executable}</text>
                    <value></value>
                </compareText>
            </ruleList>
        </throwError>
    </initializationActionList>
    <postInstallationActionList>
        <addDirectoriesToUninstaller files="${installdir}/distro/"/>
    </postInstallationActionList>
    <postUninstallationActionList>
        <foreach values="authn_anon authn_ldap authn_db authn_simple icat.server" variables="comp">
            <actionList>
                <deleteFile excludeFiles="*.properties" path="${installdir}/${comp}/*"/>
            </actionList>
        </foreach>
    </postUninstallationActionList>
    <allowComponentSelection>1</allowComponentSelection>
    <enableRollback>0</enableRollback>
    <enableTimestamp>1</enableTimestamp>
    <height>800</height>
    <installationLogFile>${system_temp_directory}/${project.shortName}-installation.log</installationLogFile>
    <saveRelativePaths>1</saveRelativePaths>
    <uninstallationLogFile>${system_temp_directory}/${project.shortName}-uninstallation.log</uninstallationLogFile>
    <vendor>ICAT Collaboration</vendor>
    <width>1000</width>
    <parameterList>
        <directoryParameter>
            <name>installdir</name>
            <description>Installer.Parameter.installdir.description</description>
            <explanation>Installer.Parameter.installdir.explanation</explanation>
            <value></value>
            <default>${platform_install_prefix}/${product_shortname}-${product_version}</default>
            <allowEmptyValue>0</allowEmptyValue>
            <ask>yes</ask>
            <cliOptionName>prefix</cliOptionName>
            <mustBeWritable>yes</mustBeWritable>
            <mustExist>0</mustExist>
            <width>30</width>
        </directoryParameter>
        <parameterGroup>
            <name>passwords</name>
            <title>Passwords</title>
            <explanation></explanation>
            <value></value>
            <default></default>
            <parameterList>
                <stringParameter>
                    <name>glassfish_user</name>
                    <description>Username</description>
                    <explanation>Who to run glassfish as. The account will be created if necessary.</explanation>
                    <value>glassfish</value>
                    <default>glassfish</default>
                    <allowEmptyValue>1</allowEmptyValue>
                    <width>20</width>
                    <ruleList>
                        <isTrue value="${installer_is_root_install}"/>
                        <isFalse value="${glassfish_installed}"/>
                    </ruleList>
                </stringParameter>
                <passwordParameter>
                    <name>mysql_root_password</name>
                    <description>Password</description>
                    <explanation>MySQL root password. This password is required to configure the required databases.</explanation>
                    <value></value>
                    <default></default>
                    <allowEmptyValue>0</allowEmptyValue>
                    <askForConfirmation>0</askForConfirmation>
                    <descriptionRetype></descriptionRetype>
                    <width>20</width>
                </passwordParameter>
                <stringParameter>
                    <name>mysql_username</name>
                    <description>Username</description>
                    <explanation>MySQL user who owns the ICAT databases</explanation>
                    <value>icat</value>
                    <default>icat</default>
                    <allowEmptyValue>1</allowEmptyValue>
                    <width>20</width>
                </stringParameter>
                <passwordParameter>
                    <name>mysql_password</name>
                    <description>Password</description>
                    <explanation>Password of MySQL user who owns the ICAT databases - it will be updated if necessary.</explanation>
                    <value></value>
                    <default></default>
                    <allowEmptyValue>0</allowEmptyValue>
                    <descriptionRetype></descriptionRetype>
                    <width>20</width>
                </passwordParameter>
            </parameterList>
        </parameterGroup>
    </parameterList>
</project>

